[core]
  editor = vim
  # for japanese chars
  quotepath = false
  # NOTE: don't use $HOME as ~
  # This is a global hook setting. So, per-repository local hook will be ignored.
  # hooksPath = ~/.config/git/hooks
  # for filepath
  ignorecase = false
  # FYI: [so\-fancy/diff\-so\-fancy: Good\-lookin' diffs\. Actually… nah… The best\-lookin' diffs\.]( https://github.com/so-fancy/diff-so-fancy )
  # pager = "{ type diff-so-fancy >/dev/null 2>&1 && diff-so-fancy || [ -n $GIT_DIFF_HIGHLIGHT ] && perl $GIT_DIFF_HIGHLIGHT || cat; } | less --tabs=2 -RFX"
  # pager = "{ type git-split-diffs >/dev/null 2>&1 && { git-split-diffs --color | less --tabs=2 -RFX; } || delta; }"
  pager = delta
[diff-so-fancy]
  markEmptyLines = false
[init]
  templatedir = ~/.git_template
[commit]
  template = ~/dotfiles/.git_commit_template
[help]
  autocorrect = -1
[alias]
  add-changed-deleted = add . --update
  add-all = add . --all

  alias = config --get-regexp 'alias.*'

  amend = commit --amend --no-edit
  fix-typo = commit --amend

  apply-3 = apply --3way

  authors = ! git shortlog -s | cut -c8-

  # NOTE: git alias of ohter alias (depends on git version)
  # Expansion of alias 'branch-name' failed; 'branch-current-name' is not a git command
  # OK: git version 2.20.1
  # NG: git version 2.7.4
  branch-current-name = rev-parse --abbrev-ref HEAD
  branch-name = branch-current-name
  branch-list = for-each-ref --format='%(refname:short) (%(authordate:relative))' --sort=-committerdate refs/heads/
  tag-or-branch-name = !git describe --tags 2> /dev/null || git rev-parse --abbrev-ref HEAD

  # co = checkout
  checkout--orphan-images = checkout --orphan images
  checkout-root = ! git checkout $(git rev-parse --show-toplevel)

  commit-first = commit -m 'First commit'
  commits-of-file = log -p
  commit-id-short = show -s --format=%h
  commit-id-long = show -s --format=%H
  # tmp = tmp-commit
  # tmp-commit = commit -m '[WIP] tmp commit instead of stash'

  conflicts = !git ls-files -u | cut -f 2 | sort -u

  change-author-and-committer-logs = filter-branch -f --env-filter 'GIT_AUTHOR_NAME=$(git config user.name) && GIT_AUTHOR_EMAIL=$(git config user.email) && GIT_COMMITTER_NAME=$(git config user.name) && GIT_COMMITTER_EMAIL=$(git config user.email)' HEAD

  wdiff = diff --word-diff-regex='\\w+'
  modified-files = diff --name-only

  find = ls-files

  grep-code-diff = log -p -S
  grep-commit-message = log --grep
  grep-reg = grep -E

  repo-init = init-repo
  init-repo = ! ! git rev-parse --is-inside-work-tree > /dev/null 2>&1 && git init && git commit --allow-empty -m 'first commit'

  log-with-note = log --pretty=format:'%C(yellow)[%ad] %C(green)%h %Creset: %s %C(red)%D%Creset - %N' --date=iso --show-notes
  # NOTE: git 2.7.4 has no option --decorate-refs=tags
  log-one-line = log --pretty=format:'%C(yellow)[%ad] %C(green)%h %Creset: %s %C(red)%D%Creset' --date=iso
  log-one-line-a-day = log --pretty=format:'%C(yellow)[%ad] %C(green)%h %Creset: %s %C(red)%D%Creset' --date=iso --since='1 day ago'
  log-one-line-a-week = log --pretty=format:'%C(yellow)[%ad] %C(green)%h %Creset: %s %C(red)%D%Creset' --date=iso --since='1 week ago'
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lga = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  graph = log --oneline --decorate --graph --branches --tags --remotes
  graph-stat = log --oneline --decorate --graph --branches --tags --remotes --stat
  graph-with-date-and-author = log --graph --oneline --decorate --date=relative --format='%C(yellow)%h%C(reset)%C(auto)%d%C(reset) %s %C(magenta)[%ad]%C(reset) %C(cyan)@%an%C(reset)'
  graph-stat-with-date-and-author = log --graph --stat --decorate --date=relative --format='%C(yellow)%h%C(reset)%C(auto)%d%C(reset) %s %C(magenta)[%ad]%C(reset) %C(cyan)@%an%C(reset)'
  stat = log --stat
  diff-log = log -p

  ls-unstage = !git ls-files -o --exclude-standard `git rev-parse --show-toplevel`
  ls-unstage-full-path = !export _git_root=`git rev-parse --show-toplevel` && git ls-files -o --exclude-standard "$_git_root" | xargs -L 1 printf '%s/%s\\n' $_git_root
  ls-newfiles = !git status --porcelain | grep "^A" | cut -c 4-
  ls-dir  = !"f(){ git ls-files | sed -e '/^[^\\/]*$/d' -e 's/\\/[^\\/]*$//g' | sort | uniq; }; f"
  ls-dirs = ls-dir

  merge-undo-from-pre-commit = reset --hard HEAD
  merge-undo-from-post-commit = reset --hard ORIG_HEAD
  # [Gitで特定のコミットを含むマージコミットを検索する \- Qiita]( https://qiita.com/shigezo/items/6df2a0515d31e6e0432b )
  # コマンドの引数として，<SHA-1> [branch name]
  find-merge-commit = "!bash -c 'commit=${1:-HEAD} && branch=${2:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge-commit = "!bash -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  push-origin-master   = push -u origin   master
  push-upstream-master = push -u upstream master
  push-origin-images   = push -u origin   images

  pull-rebase-upstream-master = pull --rebase upstream master
  pull-rebase-origin-master = pull --rebase origin master

  pull-dry-run  = !"git fetch origin; B=$(git rev-parse --abbrev-ref HEAD); git diff --stat --summary ${B}..origin/${B}"

  rebase-abort = rebase --abort
  rebase-undo-from-pre-commit = reset --hard HEAD
  rebase-undo-from-post-commit = reset --hard ORIG_HEAD

  remote-add-origin = !git remote add origin git@github.com:$(git config user.name)/$(basename $PWD).git
  remote-remove-origin = remote remove origin

  root = rev-parse --show-toplevel

  s = status
  st = status
  st-all = status --ignored

  submodule-pull-master = submodule foreach git pull origin master
  submodule-add-master = submodule add -f -b master

  # e.g. --since="2018/04/01"
  tag-time-sort-w = log --no-walk --tags --since='1 week ago'
  tag-time-sort-1w = log --no-walk --tags --since='1 week ago'
  tag-time-sort-2w = log --no-walk --tags --since='2 weeks ago'
  tag-list = for-each-ref --sort=-taggerdate --format='%(taggerdate:short) %(tag) %(taggername) %(subject)' refs/tags
  tag-sort = for-each-ref --sort='-*committerdate' --format='%(refname:short)' refs/heads/

  tree = ls-tree -dr --name-only --full-name --full-tree HEAD
  summary-tree = log --all --graph --decorate --oneline --simplify-by-decoration

  unlock = ! rm -rf $(git rev-parse --show-toplevel)/.git/index.lock

  unstage = reset HEAD
  unstage-only-newfiles = !git unstage $(git ls-newfiles)
  unstage-permanent = rm --cached -r

  urls = remote -v
  # NOTE: maybe overwrite by shell function(only for my shell setting) or command
  url =! bash -c 'git config --get remote.origin.url | sed -E "s/.+:\\(.+\\)\\.git$/https:\\\\/\\\\/github\\\\.com\\\\/\\\\1/g"'
[color]
  ui = auto
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
[color "status"]
  added = green
  changed = red
  untracked = yellow
[color "diff"]
  whitespace = magenta magenta
  meta = 247 235
  frag = 242 236
  old = red normal
  new = green normal
  context = 243
[color "grep"]
  match = cyan
  linenumber = bold white
  filename = yellow
  function = green
[push]
  default = current
[pull]
  rebase = false
[diff]
  compactionHeuristic = true
  colorMoved = dimmed-zebra
[delta]
  # features = side-by-side decorations
  # deltaのside-by-sideで1行が長いと切れる
  # [dandavison/delta: A viewer for git and diff output]( https://github.com/dandavison/delta#side-by-side-view )
  # > Wide lines in the left or right panel are currently truncated. If the truncation is a problem, one approach is to set the width of Delta's output to be larger than your terminal (e.g. delta --width 250) and ensure that less doesn't wrap long lines (e.g. export LESS=-RS); then one can scroll right to view the full content. (Another approach is to decrease font size in your terminal.)
  # 現状は、`width`を長く設定すれば途切れないが、この長さはdiffの結果に依存して変化するので、大きい値にするとterminalで見にくいが小さい値にするとtruncateされることに注意
  features = decorations
  syntax-theme = 'Monokai Extended'
[delta "decorations"]
  file-style = bold yellow
  file-decoration-style = none
  hunk-header-decoration-style = cyan box ul
  plus-style = syntax "17"
  minus-style = syntax "#400000"
  plus-emph-style = syntax "21"
  minus-emph-style = syntax "#BF2040"
[grep]
  lineNumber = true
[fetch]
  prune = true
[interactive]
  diffFilter = delta --color-only
[merge]
  tool = nvim
[mergetool "nvim"]
  # [neovim\+diffchar\.vimでgitコンフリクト解消時に単語の差分も見れるようにする \- Qiita]( https://qiita.com/mkiken/items/ddc2ee55731b01fac187 )
  # Requires: nvim and 'rickhowe/diffchar.vim'
  cmd = nvim -d \"$LOCAL\" \"$REMOTE\" \"$MERGED\" -c '2 wincmd l | wincmd J | wincmd k'
[rerere]
  enabled = true
[url "https://"]
  insteadOf = git:// # Because this protocol is deprecated.
# This is used to pass through the proxy by connect-proxy command.
[url "github:"] # The definition of this domain is written in `~/.ssh/config`.
  InsteadOf = git@github.com:
[include]
  path = ~/dotfiles/.dummy_alias.gitconfig
