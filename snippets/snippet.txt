#!/usr/bin/env bash
# [easy\-oneliner/easy\-oneliner\.txt at master ¬∑ b4b4r07/easy\-oneliner]( https://github.com/b4b4r07/easy-oneliner/blob/master/easy-oneliner.txt )
# find
[current dir find] find . -name="@" -exec grep --color=auto -H -n {} +
[root dir find] sudo find / -name="@" -exec grep --color=auto -H -n {} +

# fg
[vim] fg.vim "@" | pecovim
[vim] fg.my.vim "@" | pecovim
[vim] fg.md "@" | pecovim
[vim] fg.my.md "@" | pecovim
[vim] fg.cpp-all "@" | pecovim
[vim] fg.vim "@"
[vim] fg.my.vim "@"
[vim] fg.md "@"
[vim] fg.my.md "@"
[vim] fg.cpp-all "@"

# ubuntu
# ubuntu vim /etc files
[hosts] vim /etc/hosts !
[network/interfaces] vim /etc/network/interfaces !
[resolv.conf] vim /etc/resolv.conf !
# ubuntu cd
[GUI app autostart] cd ~/.config/autostart !
[apps] cd /usr/share/applications !
# ubuntu network
[network reboot] sudo service networking restart
[ip flush] sudo ip addr flush
[ip down up] NIC=@ && sudo ifdown $NIC && sudo ifup $NIC
# ubuntu *.deb install
[gdebi] sudo gdebi # sudo gdebi ./google-chrome-stable_current_amd64.deb

# tar
[Ëß£Âáç .tar.gz] tar zxvf @.tar.gz
[ÂúßÁ∏Æ .tar.gz] tar zcvf @.tar.gz $DIRECTORY
[Ëß£Âáç .tar] tar xvf @.tar
[ÂúßÁ∏Æ .tar] tar cvf @.tar $DIRECTORY

# filter
[filter only number] perl -nle '$_=~/([0-9]+)/;print $1;'

[IP address -> PID] netstat -p tcp | peco | perl -nle '$_=~/\.([0-9]+)/;print $1;' | xargs -IXXX lsof -i:XXX

# size
[size] du -s * # fils size
[size] df -h # disk size

# docker
[build] docker build -t $tag@ .
[run] docker run --rm -it $tag@ /bin/bash
[stty size] stty rows $(stty size | awk '{print $1}') cols $(stty size | awk '{print $2}') # run command at docker shell

# cmake
[cmake with clang-tidy] cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*" ..
[cmake] cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 # compile_commands.json

# make
[make debug] make VERBOSE=1 # made by autotoools or cmake
[make debug] make SHELL='sh -x' # made by yourself

# timeout
[timeout] timeout -sKILL # timeout -sKILL 5 bash -c 'while true; do date;sleep 1;done'

# git
[commit] git commit -m '@'
[push] git push -u origin master # normal push
[push] git push -u --force origin master # force push
[diff] git diff --cached # <file> # add„Åó„Åü„Éï„Ç°„Ç§„É´„ÅÆÂ∑ÆÂàÜË°®Á§∫
[unstage file] git reset $FILE
[unstage all] git reset
# [git ‰∏ä„ÅÆ„ÅÑ„Çç„Çì„Å™„Åì„Å®„Çí„Å™„Åã„Å£„Åü„Åì„Å®„Å´„Åô„Çã \- Qiita]( https://qiita.com/mdstoy/items/6de0aaa06dcd0cc46102 )
[commit restÔºàÁ∑®ÈõÜÂÜÖÂÆπ„ÅØ„Åù„ÅÆ„Åæ„ÅæÔºâ] git reset --soft HEAD^
[amend reset] git reset HEAD@{1}
[merge reset] git reset --hard ORIG_HEAD
[merge all conflict(adopt upper one)] git checkout --ours .
[merge all conflict(adopt lower one)] git checkout --theirs .
[merge retry all conflict] git checkout -m .
[git stash pop reset] git checkout --ours . && git reset && git checkout . # NOTE: git stash pop „Åß content „ÅåËµ∑„Åç„Åü„Å®„Åç„Å´„ÅØstash„ÅØdrop„Åó„Å™„ÅÑ
[reset deleted files] git checkout HEAD -- @ # <file>
[force update of author and email for all commits] git filter-branch -f --env-filter "GIT_AUTHOR_NAME='"$(git config user.name)"'; GIT_AUTHOR_EMAIL='"$(git config user.email)"'; GIT_COMMITTER_NAME='"$(git config user.name)"'; GIT_COMMITTER_EMAIL='"$(git config user.email)"';" HEAD
[commit without hook] git commit --no-verify
[reload git hooks]  rm -rf .git/hooks && git init # NOTE: don't delete local git hooks
[first empty commit] git commit --allow-empty -m "first commit"
[git submodule init and update] git submodule update -i
[Another git process seems to be running in this repository...]  rm -f $(git rev-parse --show-toplevel)/.git/index.lock
[git tag with message] git tag -a $TAG -m "$MESSAGE"
[git tag old to new] git tag --sort=taggerdate
[git latest named tag] git tag --sort=taggerdate | tail -n1
[git ÁâπÂÆö„ÅÆtag(commit)„ÅÆÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆcat] git show $TAG_OR_COMMIT:$FILEPATH
[git keep] touch @.gitkeep
[remove all git filesnand .git] echo 'cd $(git rev-parse --show-toplevel) && git ls-files | xargs git rm && rm -rf .git' !
[git root] git rev-parse --show-toplevel
[git search page] open "https://github.com/search"

[ls„Å®sed„Å´„Çà„ÇãÁ∞°Êòìtree„Ç≥„Éû„É≥„Éâ] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

# shell one liner
[space „Åæ„Å®„ÇÅ„Çã] sed -e 's/\s\+/ /g'
[line join with keyword] awk '{l=l (NR==1?"":"@") $0}END{print l}'
[sed template :] sed -e 's:@::g'
[sed template /] sed -e 's/@//g'
[join line with char] awk '{printf "%s\\\\n", $0}'

[number of CPU] nproc --all # linux only

# g++
[c++11] g++ -std=c++11 

# rename
[rename] find . -name "@" | xargs -L1 -IXXX echo "mv -i XXX XXX" | vim -

# line filter
[line filter] sed -n @,p # index starts with 1

# patch
[patch] echo "git diff | c && cd xxx && p | patch -p1" !

# http server
[python2 http server] python -m SimpleHTTPServer
[python3 http server] python3 -m http.server $PORT

# log
[realtime log viewer] tail -f

# mac
[brew clean cache] brew clean -s
[check SIP status] csrutil status

# export proxy
[proxy env] PROXY="@" && export http_proxy="$PROXY" && export https_proxy="$PROXY" && export HTTP_PROXY="$PROXY" && export HTTPS_PROXY="$PROXY"
[noproxy env] NO_PROXY="127.0.0.1,loacalhost@" && export no_proxy="$NO_PROXY" && export NO_PROXY="$no_proxy"

# rm
[rm files startwith '-' ] rm -- -
[rm files startwith '-' ] rm ./-

# wc
[count japanese chars] wc -m

# ssh key
[ssh id_rsa] ssh-keygen -t rsa -f @_id_rsa
[ssh local port forwarding] ssh -N -f -L $local_port@:$dst_ip:$dst_port $host
[ssh remote port forwarding] ssh -N -f $from_remote_host -R $from_remote_port:$to_remote_ip:$to_remote_port

# one liners
[args checker] python -c "import sys; print(sys.argv)" @

# python
[pip list] pip freeze
[pip3 error recover at ubuntu] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall

# g++
[g++ macro defines] g++ -dM -E - < /dev/null | sort @

# network manager
[nmcli connection] nmcli connection
[nmcli connection show] nmcli connection show
[nmcli device status] nmcli device status
[nmcli device show] nmcli device show
[nmcli general status] nmcli general status
[nmcli network reboot] echo "sudo nmcli networking off; sudo nmcli networking on" !
[nmcli network reboot] echo "sudo service network-manager restart" !
# [nmcli nic reboot] $CONNECTIONNAME=@ && (sudo nmcli connection down $CONNECTION_NAME; sudo nmcli connection up $CONNECTION_NAME)
[nmcli nic reboot] sudo nmcli connection up $CONNECTION_NAME@ # you can adopt setting only up command (without down)
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes                 ipv4.dns ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway "" ipv4.dns ""
[nmcli add device ] sudo nmcli connection add type ethernet ifname "$DEVICE_NAME" con-name "$CONNECTION_NAME"
[nmcli list unmanaged interfaces] nmcli d
[nmcli add gateway] sudo nmcli connection modify "Wired connection @" ipv4.gateway ""
[nmcil add dns    ] sudo nmcli connection modify "Wired connection @" ipv4.dns "137.153.66.28"
[nmcli set dhcp   ] sudo nmcli connection modify "Wired connection @" ipv4.method auto

# id
[USER at Mac OS X] id -F
[USER] whoami
[UID] id -u
[GID] id -g

[nmcli remote dump] ssh @ "nmcli device show"

# curl
[curl with user-agent] curl -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36' @

# dmesg
[dmesg with human readable time] dmesg -T @

# ufw
[ufw status] sudo ufw status verbose
[ufw reload] sudo ufw reload

# serial
[serial communication cu] sudo cu -l /dev/ttyUSB0 -s 115200@
[serial communication screen] sudo screen /dev/ttyUSB0 115200@

# screenshot of ubuntu
[ubuntu screenshot (all)] gnome-screenshot # PrintScreen
[ubuntu screenshot (area)] gnome-screenshot --area # Shift + PrintScreen
[ubuntu screenshot (window)] gnome-screenshot --window # Alt + PrintScreen
[ubuntu screenshot {delay} ] gnome-screenshot --delay=5

# screen
[screen list  ] screen -ls
[screen attach] screen -r

# vim
[vim force save by sudo] :call feedkeys(":w !sudo tee > /dev/null %\<CR> :e!\<CR>", 'n') # use at vim cmdline

# one liner
[for one liner] for i in $(seq @); do echo $i; done

# mnt
[mount nfs] sudo mount -t nfs "$NFS_SERVER_IP:$NFS_DIR_PATH" $LOCAL_DIR_PATH # wrong fs type? ===> sudo apt-get install nfs-common
[mount cifs(samba?)] sudo mount -t cifs -o username=$USER $REMOTE_TARGET $LOCAL_DIR_PATH
[nfsd status] nfsstat -c
[confirm filetype of system] mount

# read
[read] read -s sudo_pass

# ssh
[ssh sudo tar command which is alternative for sudo scp] [[ -z $sudo_pass ]] && echo "Remote Server Password:üîë" && read -s sudo_pass; [[ -n $sudo_pass ]] && ssh $host "echo $sudo_pass | sudo -p '' -S tar cvfz - $remote_dirpath" > $filename.tar.gz
[sshpass] sshpass -p $PASSWORD@ ssh $HOST

# compile
[gcc llvm-config] llvm-config --cxxflags --ldflags --libs --system-libs

# ffmpeg
[silent sound file] ffmpeg -ar 48000 -t 0:01:00 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero -acodec libmp3lame -aq 4 silent.mp3

# ubuntu for 32bit apps
[ubuntu 32bit] sudo dpkg --add-architecture i386 && sudo apt-get update && && sudo apt-get install -y gcc-multilib g++-multilib && sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386

# kernel
[load kernel module] insmod @.ko
[load kernel module (with dependency resolution)] modprobe @
[unload kernel] modprobe -r @
[kernel module list of fs] modprobe -lt fs
[ list kernel module ] lsmod

# losf
[lsof] sudo lsof -i:@

# proxy
[proxy npm] sudo -E npm install -g @
[proxy pip] sudo -E pip install @

# dns
[dns Google Public DNS] 8.8.8.8
[dns Google Public DNS] 8.8.4.4
[dns NTT America Technical Operations] 129.250.35.250
[dns NTT America Technical Operations] 129.250.35.251

[dns] dig
[dns] nslookup
[netstat] netstat antu

[ping NIC ] ping -I $NIC @

# apt-get
[ÊåáÂÆö„Åó„Åüpackage„ÅÆ„Åøupgrade] sudo apt-get install @ # don't use upgrade command

# at docker
[install lsof at docker] sudo apt-get install lsof

# sed
[delete end of line] sed -i '$d' $FILEPATH # for gsed
[add next line of regexp] sed -i -e '/$REGEX/a $ADD_LINE_STR' $FILAPTH
[add  pre line of regexp] sed -i -e '/$REGEX/i $ADD_LINE_STR' $FILAPTH

# ruby
[json to yaml one liner] ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'

# ansible
[ansible man] ansible-doc

# time
[unix timestamp] date +%s

# pgrep
[pgrep with user info 1] ps wup $(pgrep -f @)
[pgrep with user info 2] ps aux | grep -v grep | grep -i @

# vagrant
[vagrant for proxy] vagrant plugin install vagrant-proxyconf
[vagrant ubuntu14.04 box download] vagrant box add ubuntu/trusty64
[vagrant ubuntu16.04 box download] vagrant box add ubuntu/xenial64
[vagrant init ubuntu14.04] vagrant init ubuntu/trusty64
[vagrant init ubuntu16.04] vagrant init ubuntu/xenial64
[vagrant up (run)] vagrant up
[vagrant ssh (connect, exec, attach)] vagrant ssh
[open vagrant search url] open https://app.vagrantup.com/boxes/search !
[vagrant status] vagrant status
[vagrant stop] vagrant suspend
[vagrant force shutdown] vagrant halt
[vagrant ssh config] vagrant ssh-config > ssh.config
[vagrant scp] scp -F ssh.config $SRC_PATH@ vagrant$(echo -n "\\x40")default:$DST_PATH
[vagrant ssh] ssh -F ssh.config default
[add vagrant proxy setting] sed -i -e "/^end$/i \\  if Vagrant.has_plugin?("vagrant-proxyconf") && ENV['HTTP_PROXY']\\n      puts '# - Proxy Setting ----------------------------------'\\n      puts '# ' + ENV['HTTP_PROXY']\\n      config.proxy.http     = ENV['HTTP_PROXY']\\n      config.proxy.https    = ENV['HTTP_PROXY']\\n      config.proxy.no_proxy = "localhost,127.0.0.1"\\n      puts '# --------------------------------------------------'\\n  end" Vagrantfile

# python
[python unittest] python -m unittest $SCRIPT_NAME_WITHOUT_EXT.$TEST_CASE_NAME
[python unittest verbose] python -m unittest -v $SCRIPT_NAME_WITHOUT_EXT.$TEST_CASE_NAME
[python unittest recursively] python -m unittest discover
[python unittest recursively verbose] python -m unittest -v discover
[python touch init file] touch __init__.py

# ros
[ros kinetic source bash] source /opt/ros/kinetic/setup.bash # Wily(Ubuntu 15.10), Xenial(Ubuntu 16.04), Jessie(Debian 8)
[ros kinetic source zsh ] source /opt/ros/kinetic/share/rosbash/roszsh

[ros] rosnode list
[ros] rostopic list
[ros] rostopic info $TOPIC_OR_NODE
[ros] rostopic echo $TOPIC # /hoge/piyo
[ros] rostopic echo --noarr $TOPIC # for big topic output
[ros] rostopic hz   $TOPIC

# gitignore
# FYI: [gitignore\.io„ÅÆ„Çπ„Çπ„É° \- Qiita]( https://qiita.com/dhun/items/adcae139b5ba1da56c81 )
[ros gitignore] curl -L http://www.gitignore.io/api/ros

[show char code] hexdump -C

[replace c2a0 to space (e.g. for tree)] sed "s/$(echo -e "\\xc2\\xa0")/ /g"

[tree show hidden file] tree -a -I "\\.git"

# kill
[kill SIGKILL] sudo kill -KILL @ # same meaning as sudo kill -9

# user
[add group to user usermod] sudo usermod -aG $GROUPS@ $USER
[add group to user gpasswd] sudo gpasswd -a $USER $GROUP@
[add group to user adduser(ubuntu)] sudo adduser $USER $GROUP@

# heredoc
[heredoc to filename] cat > $FILEPATH@ << 'EOF'

# stdin/out/errr
[devnull] >/dev/null 2>&1

# login shell
[set zsh as login shell] command which zsh >/dev/null 2>&1 && sudo chsh -s $(command which zsh) $(whoami)
[relogin zsh > bash] command which zsh >/dev/null 2>&1 && exec $(command which zsh) -l
[relogin] exec $SHELL -l
[clean relogin] exec sudo su $(whoami) - # NOTE: don't miss type sudo password

[fix perl local warning] sudo apt-get install -y locales && sudo locale-gen $LANG
[enable emoji] sudo apt-get install -y language-pack-ja && sudo update-locale LANG=ja_JP.UTF-8

[zsh function list] print -l ${(ok)functions}

# sudo
[sudo su as user] sudo su
[sudo su as root] sudo su -
