#!/usr/bin/env bas
# [easy\-oneliner/easy\-oneliner\.txt at master · b4b4r07/easy\-oneliner]( https://github.com/b4b4r07/easy-oneliner/blob/master/easy-oneliner.txt )
# find
[current dir find] find . -name "@" -exec grep --color=auto -H -n {} +
[root dir find] sudo find / -name "@" -exec grep --color=auto -H -n {} +
[find some ext file] find . -name "*.@"

# fg
[vim] fg.vim "@" | pecovim
[vim] fg.my.vim "@" | pecovim
[vim] fg.md "@" | pecovim
[vim] fg.my.md "@" | pecovim
[vim] fg.cpp-all "@" | pecovim
[vim] fg.vim "@"
[vim] fg.my.vim "@"
[vim] fg.md "@"
[vim] fg.my.md "@"
[vim] fg.cpp-all "@"

# ubuntu
# ubuntu vim /etc files
[hosts] vim /etc/hosts !
[network/interfaces] vim /etc/network/interfaces !
[resolv.conf] vim /etc/resolv.conf !
# ubuntu cd
[GUI app autostart] cd ~/.config/autostart !
[apps] cd /usr/share/applications !
# ubuntu network
[network reboot] sudo service networking restart
[ip flush] sudo ip addr flush
[ip down up] NIC=@ && sudo ifdown $NIC && sudo ifup $NIC
# ubuntu *.deb install
[gdebi] sudo gdebi # sudo gdebi ./google-chrome-stable_current_amd64.deb

# tar
[解凍 .tar.gz] tar zxvf @.tar.gz
[圧縮 .tar.gz] tar zcvf @.tar.gz $DIRECTORY
[解凍 .tar] tar xvf @.tar
[圧縮 .tar] tar cvf @.tar $DIRECTORY

# filter
[filter only number] perl -nle '$_=~/([0-9]+)/;print $1;'

[IP address -> PID] netstat -p tcp | peco | perl -nle '$_=~/\.([0-9]+)/;print $1;' | xargs -IXXX lsof -i:XXX

# size
[file size] du -s * # * means file or directories
[disk size] df -h

# docker
[docker build] docker build -t $tag@ .
[docker run] docker run --rm -it $tag@ /bin/bash
[docker stty size] stty rows $(stty size | awk '{print $1}') cols $(stty size | awk '{print $2}') # run command at docker shell
[docker cp  host -> guest] docker cp $HOST_FILEPATH@ $CONTAINER_ID:$GUEST_FILEPATH # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & guest側では~が使用できない
[docker cp guest ->  host] docker cp $CONTAINER_ID:$GUEST_FILEPATH $HOST_FILEPATH@ # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & guest側では~が使用できない
[docker force rebuild flag] --no-cache
[docker volume list] docker volume ls


# cmake
[cmake with clang-tidy] cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*" ..
[cmake compile_commands] cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 # compile_commands.json
[cmake install preifx] cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/local
[cmake verbose] cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake compile_commands arg] -DCMAKE_EXPORT_COMPILE_COMMANDS=1
[cmake verbose arg] -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake auto create build dir & cmake] [[ $(basedirname $PWD) != "build" ]] && mkdir -p build && cd build; cmake ..

# make
[make debug] make VERBOSE=1 # made by autotoools or cmake
[make debug] make SHELL='sh -x' # made by yourself
[make -j max cpu] make -j$(nproc --all)
[make build and install with prefix]make -j$(nproc --all) prefix=$HOME/local && make install prefix=$HOME/local

# timeout
[timeout] timeout -sKILL # timeout -sKILL 5 bash -c 'while true; do date;sleep 1;done'

# git
[commit] git commit -m '@'
[push] git push -u origin master # normal push
[push] git push -u --force origin master # force push
[staged file diff] git diff --cached # <file> # addしたファイルの差分表示
[unstage file] git reset $FILE
[unstage all] git reset
# [git 上のいろんなことをなかったことにする \- Qiita]( https://qiita.com/mdstoy/items/6de0aaa06dcd0cc46102 )
[commit rest（編集内容はそのまま）] git reset --soft HEAD^
[git amend reset] git reset --soft "HEAD$(echo -n "\\x40"){1}" # WARN: use this comand just after wrong amend
[git merge reset] git reset --hard ORIG_HEAD
[merge all conflict(adopt upper one)] git checkout --ours .
[merge all conflict(adopt lower one)] git checkout --theirs .
[merge retry all conflict] git checkout -m .
[git stash pop reset] git checkout --ours . && git reset && git checkout . # NOTE: git stash pop で content が起きたときにはstashはdropしない
[git stash list] git stash list
[git stash list src] git stash show "stash$(echo -n "\\x40"){0}" -p
[reset deleted files] git checkout HEAD -- @ # <file>
[force update of author and email for all commits] git filter-branch -f --env-filter "GIT_AUTHOR_NAME='"$(git config user.name)"'; GIT_AUTHOR_EMAIL='"$(git config user.email)"'; GIT_COMMITTER_NAME='"$(git config user.name)"'; GIT_COMMITTER_EMAIL='"$(git config user.email)"';" HEAD
[commit without hook] git commit --no-verify
[reload git hooks]  rm -rf $(git rev-parse --show-toplevel)/.git/hooks && git init # NOTE: don't delete local git hooks
[first empty commit] git commit --allow-empty -m "first commit"
[git submodule init and update] git submodule update -i
[git submodule force add] git submodule add -f @
[Another git process seems to be running in this repository...]  rm -f $(git rev-parse --show-toplevel)/.git/index.lock
[git tag with message] git tag -a $TAG -m "$MESSAGE"
[git tag old to new] git tag --sort=taggerdate
[git latest named tag] git tag --sort=taggerdate | tail -n1
[git 特定のtag(commit)の特定のファイルのcat] git show $TAG_OR_COMMIT:$FILEPATH
[git keep] touch @.gitkeep
[remove all git filesnand .git] echo 'cd $(git rev-parse --show-toplevel) && git ls-files | xargs git rm && rm -rf .git' !
[git root] git rev-parse --show-toplevel
[git 間違えてmasterにcommit(1個)したので，他のブランチに移したい] git checkout master && git branch $NEW_BRANCH@ && git reset --hard "HEAD~1"
[git grep example] git grep -E -e '(^|\s+)//' --and --not -e 'NOTE|TODO' -e '(^|\s+)#' --and --not -e 'NOTE|TODO' -- . ':!*.md'
[git man grep] man git-grep
[git man diff] man git-diff
[git grep submodule] git grep --recurse-submodules @
[git grep submodule peco vim] ggpv --recurse-submodules @
[git clone rename] git clone @ $NEW_NAME
[git commit log grep] git log --stat -S "@"

[git rebase interactive] git rebase -i HEAD~$NUM@
[git rebase continue] git rebase --continue

[git overwrite another commit file] git checkout $COMMIT_HASH $REL_FILE_PATH
[git overwrite another branch file] git checkout $BRANCH_NAME $FILE_PATH_FROM_GIT_ROOT
[git show another commit file] git show $COMMIT_ID:$FILE_PATH_FROM_GIT_ROOT
[git only one commit log] COMMIT_ID=@ && git log $COMMIT_ID...$COMMIT_ID~
[git diff from current branch] git diff $BRANCH@ $REL_FILEPATH
[git diff between branches] git diff $OLD_BRANCH:$REL_FILEPATH $NEW_BRANCH:$REL_FILEPATH

[git follow file (find some file at log)] git log --follow --stat $REL_FILE_PATH@ # you can use dir path

[git list ignored files] git ls-files --other --ignored --exclude-standard
[git remove untracked files and dirs] git clean -d --dry-run
[git remove untracked and ignored files and dirs] git clean -x -d --dry-run
[git remove only ignored files and dirs] git clean -X -d --dry-run
# あくまでも，指定したブランチからのpull(任意に設定可能)
[git pull origin current branch] git pull origin $(git rev-parse --abbrev-ref HEAD)
[git pull rebase master] git pull --rebase origin master
[git log without modified files] git log --stat --name-status | grep -v "^M" | less

[git discard staged changes in working directory] git checkout -- . # dangerous
[git fetch remote branches] git fetch –all
[git checkout remote branch as local] git checkout -t origin/@BRANCH_NAME

[git find detached commits] git fsck --lost-found

[git patch apply] git apply $PATCH_FILEPATH # <(p)
[git patch] cd $(git rev-parse --show-toplevel) && patch -p1

[git current branch name] git rev-parse --abbrev-ref HEAD
[git current commit id] git rev-parse HEAD # or git rev-parse --short HEAD or git show -s --format=%H

# gerrit
[git gerrit review push certain branch] git push origin HEAD:refs/for/$BRANCH_NAME # without origin/
[git gerrit review push  master branch] git push origin HEAD:refs/for/master
[git gerrit base64 patch] cat @ | base64 -d | (pushd $(git rev-parse --show-toplevel) >/dev/null 2>&1; patch -p1; popd >/dev/null 2>&1) # if mac use base64 -D

# tree
[lsとsedによる簡易treeコマンド] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
[tree depth] tree -L $DEPTH

# shell one liner
[space まとめる] sed -e 's/\s\+/ /g'
[line join with keyword] awk '{l=l (NR==1?"":"@") $0}END{print l}'
[sed template :] sed -e 's:@::g'
[sed template /] sed -e 's/@//g'
[join line with char] awk '{printf "%s\\\\n", $0}'
[join block to one line] awk '!/^$/{printf "%s", $0;} /^$/{print "";}'

[number of CPU] nproc --all # linux only

# g++
[cpp c++11 compile] g++ -std=c++11 @
[cpp c++11 compile] clang++ -std=c++11 @
[cpp c++11 compile ignore library order] -Wl,--no-as-needed
[cpp pch] PCH_HEADER=@ && [[ -n $PCH_HEADER ]] && clang++ -Xclang -emit-pch -x c++-header -std=c++11 $PCH_HEADER -o $PCH_HEADER.pch
[cpp pch gen] CPPFILE=@ && [[ -n $CPPFILE ]] && cat "$CPPFILE" | grep -E -o '^#include.*' > ".${CPPFILE%.*}.hpp" && echo ".${CPPFILE%.*}.hpp"
[c++ demangle] echo "@" | c++filt
[cpp c++11 compile shared library] g++ -std=c++11 -shared -fPIC @

# rename
[rename] find . -name "@" | xargs -L1 -IXXX echo "mv -i XXX XXX" | vim -

# line filter
[line filter] sed -n @,p # index starts with 1

# patch
[patch] echo 'git diff | c && cd $(git rev-parse --show-toplevel) && p | patch -p1' !

# http server
[python2 http server] python -m SimpleHTTPServer
[python3 http server] python3 -m http.server $PORT

# log
[realtime log viewer] tail -f

# mac
[brew clean cache] brew clean -s
[brew clean cache dry-run] brew clean -n
[check SIP status] csrutil status
[brew install local formula] brew install $FORMULA_FILEPATH
[brew install without tap] brew install $GIT_AUTHOR/$REPO_NAME/$FORMULA
# linux
[linuxbrew clean cache] brew clean -s && rm -rf $HOME/.cache/Homebrew/
[linuxbrew formula dirpath] ~/.linuxbrew/Library/Taps/homebrew/homebrew-core/Formula

# export proxy
[proxy env] PROXY="@" && export http_proxy="$PROXY" && export https_proxy="$PROXY" && export HTTP_PROXY="$PROXY" && export HTTPS_PROXY="$PROXY"
[noproxy env] NO_PROXY="127.0.0.1,loacalhost@" && export no_proxy="$NO_PROXY" && export NO_PROXY="$no_proxy"

# rm
[rm files startwith '-' ] rm -- -
[rm files startwith '-' ] rm ./-
[rm avoid 10sec wait at zsh]  bash -c "rm -rf *@" # BE CAREFUL!!!!

# wc
[count japanese chars] wc -m

# ssh key
[ssh id_rsa] ssh-keygen -t rsa -f @_id_rsa
[ssh delete finger print] ssh-keygen -R $IP_ADDRESS
[ssh local port forwarding] ssh -N -f -L $local_port@:$dst_ip:$dst_port $host
[ssh remote port forwarding] ssh -N -f $from_remote_host -R $from_remote_port:$to_remote_ip:$to_remote_port
[ssh remote port forwarding example (run at remote host)] ssh -N -f $this_pc_ip_addr -R 10022:localhost:22 # reverse ssh tunnel(ssh remote_user@127.0.0.1 -p 10022)
[ssh avoid warning] ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null @
[ssh print configuration] ssh -G $HOST

[scp dir] tar -C $SRC_DIR@ -cf - . | ssh $HOST tar -C "$REMOTE_DST_DIR" -xvf - # SRC_DIR/* to REMOTE_DST_DIR/*
[rsync        ] rsync -auvzh $SRC_DIR/ @ # set dst with dirname
[rsync dry-run] rsync -auvzhn $SRC_DIR/ @ # set dst with dirname

# one liners
[args checker] python -c "import sys; print(sys.argv)" @

# python
[pip list] pip freeze
[pip updatable package list] pip list -o
[pip3 error recover at ubuntu] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall
[pip install from github] pip install https://github.com/$USER_NAME/$REPO_NAME/archive/master.tar.gz
[pip Installing collected packages: UNKNOWN] pip install setuptools --upgrade
[pip show] pip show @ # e.g. Location
[python venv] python -m venv $PROJECT_PATH@

# g++
[g++ macro defines] g++ -dM -E - < /dev/null | sort @

# network manager
[nmcli connection] nmcli connection
[nmcli connection show] nmcli connection show
[nmcli device status] nmcli device status
[nmcli device show] nmcli device show
[nmcli general status] nmcli general status
[nmcli network reboot] echo "sudo nmcli networking off; sudo nmcli networking on" !
[nmcli network reboot] echo "sudo service network-manager restart" !
# [nmcli nic reboot] $CONNECTIONNAME=@ && (sudo nmcli connection down $CONNECTION_NAME; sudo nmcli connection up $CONNECTION_NAME)
[nmcli nic reboot] sudo nmcli connection up $CONNECTION_NAME@ # you can adopt setting only up command (without down)
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes                 ipv4.dns ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection @" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway "" ipv4.dns ""
[nmcli add device ] sudo nmcli connection add type ethernet ifname "$DEVICE_NAME" con-name "$CONNECTION_NAME"
[nmcli list unmanaged interfaces] nmcli d
[nmcli add gateway] sudo nmcli connection modify "Wired connection @" ipv4.gateway ""
[nmcil add dns    ] sudo nmcli connection modify "Wired connection @" ipv4.dns "137.153.66.28" # 空白区切りで複数指定可能
[nmcli set dhcp   ] sudo nmcli connection modify "Wired connection @" ipv4.method auto
[nmcli wi-fi info list] sudo nmcli d w

[search ip address range] nmap -sP 192.168.0.0/24
[search ip address range by nbstat (NetBIOS)] sudo nmap -sU --script nbstat.nse -p137 '192.168.0.*'
[renew DHCP release] sudo dhclient -r; sudo dhclient

# id
[USER at Mac OS X] id -F
[USER] whoami
[UID] id -u
[GID] id -g

[nmcli remote dump] ssh @ "nmcli device show"

# curl
[curl with user-agent] curl -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36' @
[curl json example] curl -X POST -H "Content-Type: application/json" -d '{"id":"1","name":"nameuser","age":"10"}'@ $URL
[curl dump response header] curl --dump-header - $URL
[curl check SSL expire date] curl --verbose @ 2>&1 | grep 'expire date'

# dmesg
[dmesg with human readable time] dmesg -T @

# ufw
[ufw status] sudo ufw status verbose
[ufw reload] sudo ufw reload

# serial
[serial communication cu] sudo cu -l /dev/ttyUSB0 -s 115200@
[serial communication screen] sudo screen /dev/ttyUSB0 115200@

# screenshot of ubuntu
[ubuntu screenshot (all)] gnome-screenshot # PrintScreen
[ubuntu screenshot (area)] gnome-screenshot --area # Shift + PrintScreen
[ubuntu screenshot (window)] gnome-screenshot --window # Alt + PrintScreen
[ubuntu screenshot {delay} ] gnome-screenshot --delay=5

# screen
[screen list  ] screen -ls
[screen attach] screen -r @
[run command by screen] screen -dmS $tag $commands

# vim
[vim force save by sudo] :call feedkeys(":w !sudo tee > /dev/null %\<CR> :e!\<CR>", 'n') # use at vim cmdline

# one liner
[for one liner] for i in $(seq @); do echo $i; done

# mnt
[mount nfs] sudo mount -t nfs "$NFS_SERVER_IP:$NFS_DIR_PATH" $LOCAL_DIR_PATH # wrong fs type? ===> sudo apt-get install nfs-common
[mount cifs(samba?)] sudo mount -t cifs -o username=$USER $REMOTE_TARGET $LOCAL_DIR_PATH
[nfsd status] nfsstat -c
[confirm filetype of system] mount

# read
[read] read -s sudo_pass

# ssh
[ssh sudo tar command which is alternative for sudo scp] [[ -z $sudo_pass ]] && echo "Remote Server Password:🔑" && read -s sudo_pass; [[ -n $sudo_pass ]] && ssh $host "echo $sudo_pass | sudo -p '' -S tar cvfz - $remote_dirpath" > $filename.tar.gz
[sshpass ssh] sshpass -p $PASSWORD@ ssh $HOST
[sshpass scp] sshpass -p $PASSWORD@ scp $HOST
# [Run Remote ssh command with Full Login Shell \- Super User]( https://superuser.com/questions/306530/run-remote-ssh-command-with-full-login-shell )
[ssh run command with full login shell] ssh $HOST@ -t 'bash -l -c "env"'

# compile
[gcc llvm-config] llvm-config --cxxflags --ldflags --libs --system-libs

# ffmpeg
[silent sound file] ffmpeg -ar 48000 -t 0:01:00 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero -acodec libmp3lame -aq 4 silent.mp3

# ubuntu for 32bit apps
[ubuntu 32bit] sudo dpkg --add-architecture i386 && sudo apt-get update && && sudo apt-get install -y gcc-multilib g++-multilib && sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386

# dpkg
[dpkg] dpkg -l
[dpkg] dpkg -L $PACKAGE
[dpkg package name only] dpkg-query --show -f '${Package}\n'
[dpkg package size] dpkg-query --show -f '${Installed-Size}KB (${Package})\n'
[ubuntu filepath to apt-get package] dpkg -S $FILEPATH

# so files
[so lib path search] ldconfig -p | grep $LIB_NAME

# sha
[hash sha256] shasum -a 256 @
[hash sha256 mac] gsha256sum @
[hash md5sum] md5sum @
[hash md5sum mac] gmd5sum @

# kernel
[load kernel module] insmod @.ko
[load kernel module (with dependency resolution)] modprobe @
[unload kernel] modprobe -r @
[kernel module list of fs] modprobe -lt fs
[list kernel module] lsmod

# losf
[lsof] sudo lsof -i:@

# proxy
[proxy npm] sudo -E npm install -g @
[proxy pip] sudo -E pip install @

# dns
[dns Google Public DNS] 8.8.8.8
[dns Google Public DNS] 8.8.4.4
[dns NTT America Technical Operations] 129.250.35.250
[dns NTT America Technical Operations] 129.250.35.251

[dns] dig
[dns] nslookup $TARGET $DNS_SERVER
[netstat] netstat antu

[ping NIC ] ping -I $NIC @

# apt-get
[指定したpackageのみupgrade] sudo apt-get install @ # don't use upgrade command
[apt-get error solution]  sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock

[apt-get under proxy env] sudo -E apt-get install @
[apt-get under proxy env] sudo apt-get -o Acquire::http::proxy="${HTTP_PROXY:-$http_proxy}" install @ # http_proxyがセットしてあればsudo -EでOK

[apt official repo source list file] /etc/apt/sources.list
[apt unofficial repo source list directory] /etc/apt/sources.list.d/

[apt-get remove ppa repo] sudo add-apt-repository --remove ppa:@ # xxx/yyy
[apt-get installed ppa list] dpkg -l | grep -E "ppa[0-9]+"
[apt-get remove package] sudo apt-get remove @
[apt-get force reinstall repo] REPO=@ && sudo apt-get remove -y $REPO && sudo apt-get install -y $REPO # for delete ppa and reinstall

[add update-alternatives   ] sudo update-alternatives --install $LINK_PATH $CONFIG_NAME $REAL_CMD_PATH $PRIORITY
[switch update-alternatives] sudo update-alternatives --config $CMD

# at docker
[install lsof at docker] sudo apt-get install lsof

# sed
[delete end of line] sed -i '$d' $FILEPATH # for gsed
[add next line of regexp] sed -i -e '/$REGEX/a $ADD_LINE_STR' $FILAPTH
[add  pre line of regexp] sed -i -e '/$REGEX/i $ADD_LINE_STR' $FILAPTH

# ruby
[json to yaml one liner] ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'

# ansible
[ansible man] ansible-doc

# time
[unix timestamp] date +%s

# pgrep
[pgrep with user info 1] ps wup $(pgrep -f @)
[pgrep with user info 2] ps aux | grep -v grep | grep -i @

# vagrant
[vagrant for proxy] vagrant plugin install vagrant-proxyconf
[vagrant ubuntu14.04 box download] vagrant box add ubuntu/trusty64
[vagrant ubuntu16.04 box download] vagrant box add ubuntu/xenial64
[vagrant init ubuntu14.04] vagrant init ubuntu/trusty64
[vagrant init ubuntu16.04] vagrant init ubuntu/xenial64
[vagrant up (run)] vagrant up
[vagrant ssh (connect, exec, attach)] vagrant ssh
[vagrant status] vagrant status
[vagrant stop] vagrant suspend
[vagrant force shutdown] vagrant halt
[vagrant ssh config] vagrant ssh-config > ssh.config
[vagrant scp] scp -F ssh.config $SRC_PATH@ vagrant$(echo -n "\\x40")default:$DST_PATH
[vagrant ssh] ssh -F ssh.config default
[add vagrant proxy setting] sed -i -e "/^end$/i \\  if Vagrant.has_plugin?("vagrant-proxyconf") && ENV['HTTP_PROXY']\\n      puts '# - Proxy Setting ----------------------------------'\\n      puts '# ' + ENV['HTTP_PROXY']\\n      config.proxy.http     = ENV['HTTP_PROXY']\\n      config.proxy.https    = ENV['HTTP_PROXY']\\n      config.proxy.no_proxy = "localhost,127.0.0.1"\\n      puts '# --------------------------------------------------'\\n  end" Vagrantfile

# python
[python unittest] python -m unittest $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest verbose] python -m unittest -v $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest recursively] python -m unittest discover
[python unittest recursively verbose] python -m unittest -v discover
[python touch init file] touch __init__.py

# ros
[ros kinetic source bash] source /opt/ros/kinetic/setup.bash # Wily(Ubuntu 15.10), Xenial(Ubuntu 16.04), Jessie(Debian 8)
[ros kinetic source zsh ] source /opt/ros/kinetic/setup.zsh
[ros init] mkdir -p ~/catkin_ws/src && cd ~/catkin_ws && catkin_make && cd src && echo "catkin_create_pkg!!"

[rosnode list] rosnode list
[rostopic list] rostopic list
[rostopic list] rostopic list -v
[rostopic list] rostopic list -p
[rostopic list] rostopic list -s
[ros] rostopic info $TOPIC_OR_NODE
[ros] rostopic echo $TOPIC # /hoge/piyo
[ros] rostopic echo --noarr $TOPIC # for big topic output
[ros] rostopic hz   $TOPIC
[ros node graph] rosrun rqt_graph rqt_graph
[ros tf tree GUI] rosrun rqt_tf_tree rqt_tf_tree
[ros tf tree pdf] rosrun tf view_frames
[ros tf echo] rosrun tf tf_echo $TF1 $TF2
[ros echo] rostopic echo /@
[ros 3d gui] rosrun rviz rviz # in docker use nvidia-docker1(not nvidia-docker2)
[ros console] rosrun rqt_console rqt_console
[ros show type] rostopic type /@
[ros show field of type] rosmsg show @
[ros show field of type] rostopic type /@ | rosmsg show
[ros find] rospack find @
[ros ls] rosls @
[ros cd] roscd @
[ros cp] roscp @
[ros depends] rospack depends @ # all nest
[ros depends1] rospack depends1 @ # only nest 1
[ros publish] rostopic pub -1 /@ $TYPE -- '{$KEY: $VAL}' # '{header: {seq: 0, stamp: now, frame_id:sample_id}, data: [], position: {x: 0.0, y: 0.0, z: 0.0}}'
[ros echo publish (pipe)] rostopic echo /@ | rostopic pub /@ $TYPE

[ros catkin_create_pkg] catkin_create_pkg $PACAKGE_NAME pcl_conversions pcl_ros roscpp sensor_msgs # dependency packages...
[rostest run tests] catkin_make run_tests # for 1st?
[rostest run tests] catkin_make tests # for 2nd or later?

[roscore daemon start by screen] pgrep roscore >/dev/null 2>&1 || screen -dmS "roscore" roscore
[roscore restart by screen] pkill roscore && screen -dmS "roscore" roscore

[rosbag] rosbag compresss
[rosbag] rosbag decompresss
[rosbag] rosbag filter
[rosbag] rosbag play
[rosbag play with rename topic] rosbag play @ $FROM_TOPIC:=$TO_TOPIC# from:=to
[rosbag csv] rostopic echo -b $BAG_FILEPATH -p /$TOPIC_NAME
[rosbag rqt_bag viewer] rqt_bag # <bag file>

[catkin_make] catkin_make --pkg $PACAKGE_NAME
[catkin_make clean] catkin_make clean
[catkin_make install] catkin_make install

[catkin build all clean] [[ -d src ]] && rm -rf build devel install || echo "\\033[0;31m"'here is not catkin workspace'"\\033[0m"

[ros info reload] rospack profile

# NOTE: 引数の数で判定している?
# rosrun tf static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms
# rosrun tf static_transform_publisher x y z qx qy qz qw    frame_id child_frame_id period_in_ms
[ros Fixed Frame map does not exist] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 $ROOT_FRAME $CHILD_FRAME 100 # /map /xxx
[ros tf sample] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 base_link map 100

[roslog] $HOME/.ros/log/
[rosclean] rosclean check
[rosclean] rosclean purge
[roscore url] export ROS_HOSTNAME=$IP_ADDRESS@ && export ROS_MASTER_URI=http://$ROS_HOSTNAME:11311/

# gitignore
# FYI: [gitignore\.ioのススメ \- Qiita]( https://qiita.com/dhun/items/adcae139b5ba1da56c81 )
[ros gitignore] curl -L http://www.gitignore.io/api/ros

[show char code] hexdump -C @

[replace c2a0 to space (e.g. for tree)] sed "s/$(echo -e "\\xc2\\xa0")/ /g"

[tree show hidden file] tree -a -I "\\.git" @

# kill
[kill SIGKILL] sudo kill -KILL @ # same meaning as sudo kill -9

# user
[add group to user usermod] sudo usermod -aG $GROUPS@ $USER
[add group to user gpasswd] sudo gpasswd -a $USER $GROUP@
[add group to user adduser(ubuntu)] sudo adduser $USER $GROUP@

# stdin/out/errr
[devnull] >/dev/null 2>&1

# login shell
[set zsh as login shell] command which zsh >/dev/null 2>&1 && sudo chsh -s $(command which zsh) $(whoami)
[relogin zsh > bash] command which zsh >/dev/null 2>&1 && exec $(command which zsh) -l
[relogin] exec $SHELL -l
# really?
# [clean relogin] exec sudo su $(whoami) - # NOTE: don't miss type sudo password

[fix perl local warning] sudo apt-get install -y locales && sudo locale-gen $LANG
[enable emoji] sudo apt-get install -y language-pack-ja && sudo update-locale LANG=ja_JP.UTF-8

[zsh function list] print -l ${(ok)functions}

# sudo
[enter root as user env] sudo su
[enter root as root env] sudo su -

# echo
[echo  x char] echo -e "\\x61"
[echo unicode] echo -e "\\U1F363"

[unexport] unset @ # remove export

[test x window system] xset q
[x window app install] sudo apt-get install x11-apps

# crontab
[crontab confirm] crontab -l
[crontab edit] crontab -e
[crontab update file] crontab $FILEPATH

# direnv
[direnv allow] direnv allow
[reload .envrc] direnv allow
[direnv file] touch .envrc

# vim
[vim init cmake] vim CMakeLists.txt
[vim init docker file] vim Dockerfile
[vim init README.md] vim README.md

# shell tips
[shell to ext] $(basename ${0##-}) # without fish(bash,csh,zsh,sh ok)

# cpp environment variables
[cpp include file path] export CPATH="@:$CPATH"
[cpp library file path] export LIBRARY_PATH="@:$LIBRARY_PATH"

# yaml
[yaml to inline yaml] json2yaml -d 1 <(yaml2json @.yaml) # npm install yamljs

# network
[show arp table] arp -a # same network? ip addr and MAC address pair list

# compile_commands.json
[list -I dirs] cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\\n' ':'
[add -I dirs list to CPATH] export CPATH="$(cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\\n' ':'):$CPATH"

# dev usb
[dev usb0] /dev/ttyUSB0
[dev usb1] /dev/ttyUSB1
[dev usb2] /dev/ttyUSB2
[dev usb3] /dev/ttyUSB3

# tags
[rtags: run rdm server by screen] pgrep rdm >/dev/null 2>&1 || screen -dmS "rdm" rdm
[rtags: register build dir for rtags] pgrep rdm >/dev/null 2>&1 || (screen -dmS "rdm" rdm && sleep 0.2); rc -J .

[webcatd run by screen] pgrep gotty >/dev/null 2>&1 || screen -dmS "webcatd" webcatd
[any command run by screen] CMD=@ && pgrep "$CMD" >/dev/null 2>&1 || screen -dmS "$CMD" $CMD

# shell
[extract filepath ~] sed "s:^~:$HOME:g"

# date
[mac date] date +'%Y-%m-%d %H:%M:%S'
[date for log] date +'%Y-%m-%d-%H-%M-%S'

[mac logger] logger 'hello world'
[mac cat log] log show --style syslog --predicate 'processImagePath endswith "logger"' --start $(date +"%Y-%m-%d")
[linux cat log] cat /var/log/messages

[ubuntu mother board info] sudo dmidecode -t baseboard
[ubuntu memory info] sudo dmidecode -t memory
[ubuntu memory info] cat /proc/meminfo
[ubuntu cpu info] cat /proc/cpuinfo
[ubuntu gpu info] lspci | grep VGA
[ubuntu nvidia gpu info] nvidia-smi
[ubuntu partition info] sudo parted -l
[ubuntu block device info] lsblk # you can use without sudo
[ubuntu network device info] lspci | grep Ethernet
[ubuntu network device info] sudo lshw -class network
[ubuntu hardware info] sudo lshw
[ubuntu disk info] sudo lshw -c disk
[ubuntu disk read/write speed performance check] sudo hdparm -Tt /dev/sda
# e.g.
# /dev/sda:
#  Timing cached reads:   27416 MB in  1.99 seconds = 13761.56 MB/sec
#  Timing buffered disk reads: 600 MB in  3.00 seconds = 199.80 MB/sec

# [linux \- How to know if a disk is an SSD or an HDD \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/65595/how-to-know-if-a-disk-is-an-ssd-or-an-hdd )
[hdd or ssd] echo 'SSD HDD' | cut -d" " -f$(($(cat /sys/block/sda/queue/rotational)+1))

[confirm zsh cached comand type] builtin which @

[confirm fonts list at ubuntu] fc-list

[how to know image size] file
[how to know image size] identify

# [bash \- Removing a newline character at the end of a file \- Stack Overflow]( https://stackoverflow.com/questions/16365155/removing-a-newline-character-at-the-end-of-a-file )
[removing a newline character at the end of a file] perl -0pe 's/\n\Z//'

[encrypt text with password] echo "$TEXT" | openssl enc -e -aes-256-cbc -base64 -k $PASSWORD
[decrypt text with password] openssl enc -d -aes-256-cbc -base64 -k $PASSWORD

[mac volume path] cd /Volumes/
[mac disk unmount] diskutil unmount /Volumes/$DISK_NAME
# iso to usb(disk)
[0. mac disk list] diskutil list
[1. mac disk format] echo 'diskutil eraseDisk MS-DOS UNTITLED /dev/disk2'
[2. mac disk unmount] diskutil unmountDisk /dev/disk2
[3. mac iso to disk] echo 'sudo dd if=xxx.iso of=/dev/disk2 bs=2m'
[4. mac disk eject] diskutil eject /dev/disk2
[mac check dd progress] sudo pkill -INFO "^dd"
[ubuntu check dd progress?] sudo pkill -USR1 "^dd"

[repeat command] watch -n $SEC "$CMD"

[mac base64 encode] base64 @
[mac base64 decode] base64 -D @

[ubuntu base64 encode] base64 -w 0 @
[ubuntu base64 decode] base64 -d @

[ubuntu disk unmount] sudo umount /dev/sdb?

[ubuntu japanese home dirs to english] LANG=C xdg-user-dirs-gtk-update

[xdotool text] xdotool type "hello"
[xdotool tab] xdotool key Tab # xdotool type "$(echo -e "\x09")"
[xdotool enter] xdotool key Return

[login message] figlet 'Hello Underworld!' | sand "$YELLOW" | text_center | sudo tee /etc/motd # my original command is included

[mac You have new mail.] mail

[filter file by < size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size -1M@
[filter file by > size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size +1M@

[shutdown] sudo shutdown -h now

[ninja build] ninja
[ninja clean] ninja -t clean
[ninja build.ninja file] touch build.ninja
[ninja compile_commands.json] ninja -t compdb $RULE_NAMES # e.g. app obj lib

[version python] python --version
[version go] go version
[version tmux] tmux -V
[version zsh] zsh --version
[version bash] bash --version
[version screen] screen -v
[version vim] vim -v
[version sed] sed --version
[version git] git --version

# lzz
# space + `#` -> parse as comment
# 'hogehoge''piyopiyo' -> "hogehoge'piyopiyo"
# 'hogehoge'""'piyopiyo' -> "hogehogepiyopiyo"
[c++ split hpp to cpp: lzz .hpp to .lzz] FILENAME=@ && cat $FILENAME | sed -e '/^#include/i '""'#hdr' | sed -e '/^#include/a '""'#end' | tee ${FILENAME%.*}.lzz # do lzz <lzz filepath> -> xxx.cpp xxx.h

[clang-format replace file] clang-format -i $FILEPATH

# bash
[shell var regexp] ${FILEPATH@%./} # dirname(dirpath)
[shell var regexp] ${FILEPATH@%.*} # without ext
[shell var regexp] ${FILEPATH@##*/} # basename
[shell var regexp] ${FILEPATH@##*.} # ext

[complete relogin  zsh] su $(whoami) -s env zsh
[complete relogin bash] su $(whoami) -s env bash

# diff
[diff ignore space(blank)] diff -b @
[diff directory] diff -r @ # DIR_A DIR_B
[diff directory only filepath] diff -rq @ # DIR_A DIR_B

# mac
[mac sshpass install] brew install http://git.io/sshpass.rb

# heredoc
[heredoc to filename] cat > $FILEPATH@ << 'EOF'

[linux: check shared lib path objdump -p] objdump -p @

# nkf
[nkf guess] nkf -g @
[nkf auto conv] nkf -w @

# symbolic link
[ln symbolic link file      overwrite] ln -sf $LINK_FILE_DST $LINK_FILE_SRC
[ln symbolic link directory overwrite] ln -sfn $LINK_DIR_DST $LINK_DIR_SRC
[namei ubuntu] namei @

# time
# [shell \- How can I redirect the output of the "time" command? \- Stack Overflow]( https://stackoverflow.com/questions/2408981/how-can-i-redirect-the-output-of-the-time-command )
[time command redirect tips] (time @) # |& tee $FILEPATH
[time command redirect tips] {time @} # |& tee $FILEPATH

# unbuffer command
# [shell \- Turn off buffering in pipe \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe )
[unbuffer command] unbuffer @
[unbuffer command] script -c "$COMMAND@" /dev/null # |& tee $FILEPATH
