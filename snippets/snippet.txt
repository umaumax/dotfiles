#!/usr/bin/env bash
# [easy\-oneliner/easy\-oneliner\.txt at master · b4b4r07/easy\-oneliner]( https://github.com/b4b4r07/easy-oneliner/blob/master/easy-oneliner.txt )
# find
[current dir find] find . -name="@" -exec grep --color=auto -H -n {} +
[root dir find] sudo find / -name="@" -exec grep --color=auto -H -n {} +
# fg
[vim] fg.vim "@" | pecovim
[vim] fg.my.vim "@" | pecovim
[vim] fg.md "@" | pecovim
[vim] fg.my.md "@" | pecovim
[vim] fg.cpp-all "@" | pecovim
[vim] fg.vim "@"
[vim] fg.my.vim "@"
[vim] fg.md "@"
[vim] fg.my.md "@"
[vim] fg.cpp-all "@"

# ubuntu
# ubuntu vim /etc files
[hosts] vim /etc/hosts !
[network/interfaces] vim /etc/network/interfaces !
[resolv.conf] vim /etc/resolv.conf !
# ubuntu cd
[GUI app autostart] cd ~/.config/autostart !
[apps] cd /usr/share/applications !
# ubuntu network
[network reboot] sudo service networking restart !
[ip flush] sudo ip addr flush !
[ip down up] NIC=@ && sudo ifdown $NIC && sudo ifup $NIC
# ubuntu *.deb install
[gdebi] sudo gdebi # sudo gdebi ./google-chrome-stable_current_amd64.deb

# tar
[解凍] tar zxvf # tar zxvf xxxx.tar.gz
[圧縮] tar zcvf # tar zcvf xxxx.tar.gz directory

# filter
[filter 数字のみ] perl -nle '$_=~/([0-9]+)/;print $1;'

[IP address -> PID] netstat -p tcp | peco | perl -nle '$_=~/\.([0-9]+)/;print $1;' | xargs -IXXX lsof -i:XXX

# size
[size] du -s * # fils size
[size] df -h # disk size

# docker
[build] docker build -t "@" .
[run] docker run --rm -it "@" /bin/bash
[stty size] stty rows $(stty size | awk '{print $1}') cols $(stty size | awk '{print $2}') # run command at docker shell

# cmake
[cmake with clang-tidy] cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*" ..
[cmake] cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 # compile_commands.json

# make
[make debug] make VERBOSE=1 # made by autotoools or cmake
[make debug] make SHELL='sh -x' # made by yourself

# timeout
[timeout] timeout -sKILL # timeout -sKILL 5 bash -c 'while true; do date;sleep 1;done'

# git
[commit] git commit -m '@'
[push] git push -u origin master # normal push
[push] git push -u --force origin master # force push
[diff] git diff --cached # <file> # addしたファイルの差分表示
[unstage file] git reset HEAD # <file>
[unstage all] git reset
# [git 上のいろんなことをなかったことにする \- Qiita]( https://qiita.com/mdstoy/items/6de0aaa06dcd0cc46102 )
[commit rest（編集内容はそのまま）] git reset --soft HEAD^
[amend reset] git reset HEAD@{1}
[merge reset] git reset --hard ORIG_HEAD
[merge all conflict(adopt upper one)] git checkout --ours .
[merge all conflict(adopt lower one)] git checkout --theirs .
[merge retry all conflict] git checkout -m .
[git stash pop reset] git checkout --ours . && git reset && git checkout . # NOTE: git stash pop で content が起きたときにはstashはdropしない
[reset deleted files] git checkout HEAD -- @ # <file>
[force update of author and email for all commits] git filter-branch -f --env-filter "GIT_AUTHOR_NAME='"$(git config user.name)"'; GIT_AUTHOR_EMAIL='"$(git config user.email)"'; GIT_COMMITTER_NAME='"$(git config user.name)"'; GIT_COMMITTER_EMAIL='"$(git config user.email)"';" HEAD
[commit without hook] git commit --no-verify
[reload git hooks]  rm -rf .git/hooks && git init # NOTE: don't delete local git hooks
[first empty commit] git commit --allow-empty -m "first commit"
[git submodule int and update] git submodule update -i

[lsとsedによる簡易treeコマンド] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

# shell one liner
[space まとめる] sed -e 's/\s\+/ /g'
[line join with keyword] awk '{l=l (NR==1?"":"@") $0}END{print l}'
[sed template :] sed -e 's:@::g'
[sed template /] sed -e 's/@//g'

# g++
[c++11] g++ -std=c++11 

# rename
[rename] find . -name "@" | xargs -L1 -IXXX echo "mv -i XXX XXX" | vim -

# line filter
[line filter] sed -n @,p # index starts with 1

# patch
[patch] # git diff | c && cd xxx && p | patch -p1

# http server
[python2 http server] python -m SimpleHTTPServer
[python3 http server] python3 -m http.server

# log
[realtime log viewer] tail -f

# mac
[brew clean cache] brew clean -s

# export proxy
[proxy env] PROXY="@" && export http_proxy="$PROXY" && export https_proxy="$PROXY" && export HTTP_PROXY="$PROXY" && export HTTPS_PROXY="$PROXY"
[noproxy env] NO_PROXY="127.0.0.1,loacalhost@" && export no_proxy="$NO_PROXY" && export NO_PROXY="$no_proxy"

# rm
[rm files startwith '-' ] rm -- -
[rm files startwith '-' ] rm ./-

# wc
[count japanese chars] wc -m

# ssh key
[ssh id_rsa] ssh-keygen -t rsa -f @_id_rsa

# one liners
[args checker] python -c "import sys; print(sys.argv)" @
