# vim: set filetype=log :
#
# [easy\-oneliner/easy\-oneliner\.txt at master · b4b4r07/easy\-oneliner]( https://github.com/b4b4r07/easy-oneliner/blob/master/easy-oneliner.txt )
# find
[find current dir] find . -name "\%#" -exec grep --color=auto -H -n {} +
[find root dir] sudo find / -name "\%#" -exec grep --color=auto -H -n {} +
[find some ext file] find . -name "*.\%#"

[find remove tu] find . \( -name "*.tu" -o -name "*.tu-[0-9a-zA-Z]*" \) -type f -ls -delete
[find remove core] find . -name "core.*" -type f -ls -delete
[find remove object/archives] find . \( -name "*.a" -o -name "*.so" -o -name "*.o" \) -type f -ls -delete
[find remove orig] find . -name "*.orig" -type f -ls -delete
[find executable mac] find \%# -type f -perm +ugo+x -print
[find executable linux] find \%# -executable -type f

[find file object fils and archives] find . -name "*.a" -o -name "*.o" -exec file {} \;
[find extract files] $(find . -type f -mindepth 1 -maxdepth 1)
[find extract directories] $(find . -type f -mindepth 1 -maxdepth 1)

# fg
[vim] fg.vim "\%#" | pecovim
[vim] fg.my.vim "\%#" | pecovim
[vim] fg.md "\%#" | pecovim
[vim] fg.my.md "\%#" | pecovim
[vim] fg.cpp-all "\%#" | pecovim
[vim] fg.vim "\%#"
[vim] fg.my.vim "\%#"
[vim] fg.md "\%#"
[vim] fg.my.md "\%#"
[vim] fg.cpp-all "\%#"
[vim git modified] vim -p `git status -s | awk '{print $2}'`

# ubuntu
# ubuntu vim /etc files
[ubuntu hosts] vim /etc/hosts !
[ubuntu network/interfaces] vim /etc/network/interfaces !
[ubuntu resolv.conf] vim /etc/resolv.conf !
# ubuntu cd
[ubuntu GUI app autostart] cd ~/.config/autostart !
[ubuntu apps] cd /usr/share/applications !
# ubuntu network
[ubuntu network reboot] sudo service networking restart
[ubuntu ip flush] sudo ip addr flush
[ubuntu ip down up] NIC=\%# && sudo ifdown $NIC && sudo ifup $NIC
# ubuntu *.deb install
[ubuntu gdebi] sudo gdebi # sudo gdebi ./google-chrome-stable_current_amd64.deb
[ubuntu mdfind] locate # updatedb
# FYI: [https://www\.kernel\.org/doc/Documentation/sysctl/vm\.txt]( https://www.kernel.org/doc/Documentation/sysctl/vm.txt ) see at drop_caches
[ubuntu drop file page cache size confirm] free -m
[ubuntu drop file page cache] sync; sudo sh -c "echo \%# > /proc/sys/vm/drop_caches" # 1:pagecache, 2:reclaimable slab objects (includes dentries and inodes), 3:slab objects and pagecache
[ubuntu screen recoder(movie capture)] kazam # sudo apt-get install kazam

[lsusb tree] lsusb -t

# tar
# [tar 解凍(extract)  .tar.gz] tar zxvf \%# -C .
[tar 解凍(extract)  .tar.?   ] tar  xvf \%# -C .
[tar 圧縮(compress) .tar.gz] tar zcvf \%# # [tar.gz] [dir]
[tar 圧縮(compress) .tar.  ] tar  cvf \%# # [.tar] [dir]
[tar 圧縮(compress) .tar.gz] DIRECTORY=\%# && tar zcvf $DIRECTORY.tar.gz $DIRECTORY
[tar 圧縮(compress) .tar   ] DIRECTORY=\%# && tar  cvf $DIRECTORY.tar    $DIRECTORY
# [findの結果をtarでアーカイブしたい \- 浦安市在住＋デジカメ]( https://fei-yen.jp/maya/wordpress/blog/2013/01/15/find%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92tar%E3%81%A7%E3%82%A2%E3%83%BC%E3%82%AB%E3%82%A4%E3%83%96%E3%81%97%E3%81%9F%E3%81%84/ )
[tar find print0 pipe to file] tar -cvz -T - --null -f \%#.tar.gz
[tar find print0 pipe to pipe] tar -cvz -T - --null | \%#
[tar find ssh] find \%# -print0 | tar -c -T - --null | ssh $host "tar -C $DIR -xv -"

[zip compress] zip -r \%# # [.zip] [dir]
[zip unzip broken file] zip -FF $SRC\%# --output $DST

[IP address -> PID] netstat -p tcp | peco | perl -nle '$_=~/\.([0-9]+)/;print $1;' | xargs -IXXX lsof -i:XXX

# size
## h: human readable
[file size] du -sh * # for zsh (setopt GLOB_DOTS)
[file size for bash] du -sh .[^.]* *
[disk size] df -h
[disk size (only local mounted file)] df -hl

# docker
[docker build] docker build -t $tag\%# .
[docker run] docker run --rm -it $tag\%# /bin/bash
[docker stty size] stty rows $(stty size | awk '{print $1}') cols $(stty size | awk '{print $2}') # run command at docker shell
[docker cp  host -> guest] docker cp $HOST_FILEPATH\%# $CONTAINER_ID:$GUEST_FILEPATH # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & guest側では~が使用できない
[docker cp guest ->  host] docker cp $CONTAINER_ID:$GUEST_FILEPATH $HOST_FILEPATH\%# # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & guest側では~が使用できない
[docker force rebuild flag] --no-cache
[docker volume list] docker volume ls
[docker each container disk usage] docker system df -v
[docker cleaning] docker system prune
[docker container name xargs exec] docker ps --format "{{.Names}}" | xargs -L 1 -I{} bash -c "echo {}\%#"


# cmake
[cmake with clang-tidy] cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*" ..
[cmake compile_commands] cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 # compile_commands.json
[cmake install preifx] cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/local
[cmake verbose] cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake compile_commands arg] -DCMAKE_EXPORT_COMPILE_COMMANDS=1
[cmake verbose arg] -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake auto create build dir & cmake] [[ $(basedirname $PWD) != "build" ]] && mkdir -p build && cd build; cmake ..
[cmake out of build dir] cmake -H. -Bbuild # -GNinja
[cmake out of build dir] cmake --build build/
[cmake find modules help] cmake --help-module \%# # use tab completion
[cmake find modules] cmake --help-module-list | grep -e '^Find' | sed 's/Find//'
[cmake confirm make install files] cmake -DCMAKE_INSTALL_PREFIX=$(mktemp -d install) .. # using by tmp dir way
[cmake gui tool(edit cache var)] ccmake # sudo apt-get install -y cmake-curses-gui
[cmake option list] cmake -LH ..
[cmake option list] cmake .. && ccmake

# make
[make debug verbose] make VERBOSE=1 \%# # made by autotoools or cmake
[make debug verbose] make SHELL='sh -x' \%# # made by yourself
[make debug verbose] make --debug=j \%# # made by yourself
[make set -ex] make SHELL='sh -ex' \%# # made by yourself
## [makeの並列オプションは何を指定するべきか \- よーる]( http://lpha-z.hatenablog.com/entry/2018/12/30/231500 )
[make -j max cpu] make -j$(($(nproc --all)+1)) \%# # or simply only -j option
[make build and install with prefix]make -j$(nproc --all) prefix=$HOME/local && make install prefix=$HOME/local
[make variables debug] make -p -f/dev/null
[make good looking color output] make SHELL='sh -ex' \%# | ccze -A -o nolookups
# FYI: [linux \- How do you force a makefile to rebuild a target \- Stack Overflow]( https://stackoverflow.com/questions/816370/how-do-you-force-a-makefile-to-rebuild-a-target )
[make force phony] make -B \%## --always-make
[make dry-run] make -n \%# # -n=--dry-run

# ctest
# FYI: [cmake \- Can ctest display googletest console colors \- Stack Overflow]( https://stackoverflow.com/questions/34253579/can-ctest-display-googletest-console-colors )
# 強制的に色がつく(パイプしても色付き)
[ctest] GTEST_COLOR=yes ctest --output-on-failure
[ctest verbose] ctest -V # -VV, --debug
[ctest filter] ctest -V -R $REGEX

# timeout
[timeout] timeout -sKILL # timeout -sKILL 5 bash -c 'while true; do date;sleep 1;done'

# git
[git init, add files, and commit] git init && git add -A -f . && git commit --no-verify
[git undo init commit] git update-ref -d HEAD
[git commit] git commit -m '\%#'
[git push] git push -u origin master # normal push
[git push] git push -u --force origin master # force push
[git push dry-run] git push -n \%#
[git push current branch] git push origin $(git rev-parse --abbrev-ref HEAD)
[git push specific commit hash id] git push origin $COMMIT_SHA\%#:refs/heads/master
[git staged file diff] git diff --cached # <file>
[git unstaged file diff] git diff
[git unstage file] git reset $FILE
[git unstage all] git reset
[git rename branch] git branch -m \%#
# [git 上のいろんなことをなかったことにする \- Qiita]( https://qiita.com/mdstoy/items/6de0aaa06dcd0cc46102 )
[git uncommit reset（編集内容はそのまま）] git log --pretty=oneline --abbrev-commit "HEAD^..HEAD" && git reset --soft "HEAD^" && git reset # to move commit to stash or easy to amend...
[git commit reset] git reset --soft "HEAD^"
[git amend reset] git reset --soft "HEAD@{1}" # WARN: use this comand just after wrong amend
[git merge reset] git reset --hard ORIG_HEAD
[git merge all conflict(adopt upper one)] git checkout --ours .
[git merge all conflict(adopt lower one)] git checkout --theirs .
[git merge retry all conflict] git checkout -m .
[git stash pop reset] git checkout --ours . && git reset && git checkout . # NOTE: git stash pop で content が起きたときにはstashはdropしない
[git stash list] git stash list
[git stash list src] git stash show "stash@{0}" -p
[git stash with name] git stash save "\%#"
[git stash with untracked-files] git stash save --include-untracked "\%#"
[git stash] git stash pop "stash@{\%#}"
[git stash not staged] git stash --keep-index
# FYI: [git stash \- Stashing only staged changes in git \- is it possible? \- Stack Overflow]( https://stackoverflow.com/questions/14759748/stashing-only-staged-changes-in-git-is-it-possible )
[git stash staged] git stash save --keep-index "tmp stash" && git stash save "\%#" && git stash apply 'stash@{1}' && { git stash show -p | git apply -R; } && git stash drop 'stash@{1}'; git status
[git stash interactive] git stash push --patch
[git reset deleted files] git checkout HEAD -- \%# # <file>
[git force update of author and email for all commits] git filter-branch -f --env-filter "GIT_AUTHOR_NAME='"$(git config user.name)"'; GIT_AUTHOR_EMAIL='"$(git config user.email)"'; GIT_COMMITTER_NAME='"$(git config user.name)"'; GIT_COMMITTER_EMAIL='"$(git config user.email)"';" HEAD
[git commit without hook (force commit)] git commit --no-verify
[git reload git hooks]  (cd $(git rev-parse --show-toplevel) >/dev/null 2>&1 && rm -rf ".git/hooks" && git init) # WARN: It's possible to delete local git hooks
[git first empty commit] git commit --allow-empty -m "first commit"
[git submodule init and update] git submodule update --init --recursive
[git submodule force add] git submodule add -f \%#
[git Another git process seems to be running in this repository...]  rm -f $(git rev-parse --show-toplevel)/.git/index.lock
[git tag with message] git tag -a $TAG -m "$MESSAGE"
[git tag old to new] git tag --sort=taggerdate
[git latest named tag] git tag --sort=taggerdate | tail -n1
[git 特定のtag(commit)の特定のファイルのcat] git show $TAG_OR_COMMIT:$FILEPATH
[git keep] touch \%#.gitkeep
[git remove all git files and .git] echo 'cd $(git rev-parse --show-toplevel) && git ls-files | xargs git rm && rm -rf .git' !
[git root] git rev-parse --show-toplevel
[git checkout root]  git checkout $(git rev-parse --show-toplevel)
[git 間違えてmasterにcommit(1個)したので，他のブランチに移したい] git checkout master && git branch $NEW_BRANCH\%# && git reset --hard "HEAD~1"
[git grep example] git grep -E -e '(^|\s+)//' --and --not -e 'NOTE|TODO' -e '(^|\s+)#' --and --not -e 'NOTE|TODO' -- . ':!*.md'
[git man grep] man git-grep
[git man diff] man git-diff
[git grep submodule] git grep --recurse-submodules \%#
[git grep submodule peco vim] ggpv --recurse-submodules \%#
[git grep ext ok filter] git grep "\%#" -- '*.'
[git grep ext ng filter] git grep "\%#" -- ':!*.'
[git grep cpp ext filter] git grep "\%#" -- '*.cpp' '*.hpp' '*.c' "*.h" '*.cc' '*.cxx'
[git grep filename example] git grep -H "c++11" -- "*[Mm]akefile" # include and with hit line
[git grep filename example] git grep -L "c++11" -- "*[Mm]akefile" # not include
[git clone rename] git clone \%# $NEW_NAME
[git clone with submodule] git clone --recursive \%#
[git commit log grep] git log --stat -S "\%#"
[git is commit hash?] git rev-parse --verify \%# >/dev/null 2>&1
[git repository name] basename `git rev-parse --show-toplevel`

[git copy file/dir from another branch] git checkout \%# #$BRANCH $FILE_PATH

[git rebase interactive] git rebase -i HEAD~$NUM\%#
[git rebase continue] git rebase --continue

[git overwrite another commit file] git checkout $COMMIT_HASH $REL_FILE_PATH
[git overwrite another branch file] git checkout $BRANCH_NAME $FILE_PATH_FROM_GIT_ROOT
[git show another commit file] git show $COMMIT_ID:$FILE_PATH_FROM_GIT_ROOT
[git only one commit log] COMMIT_ID=\%# && git log $COMMIT_ID...$COMMIT_ID~
[git diff from current branch] git diff $BRANCH\%# $REL_FILEPATH
[git diff between branches] git diff $OLD_BRANCH:$REL_FILEPATH $NEW_BRANCH:$REL_FILEPATH
[git diff grep] git diff -G \%#
[git diff staged] git diff --staged
# FYI: [version control \- How to see the changes in a Git commit? \- Stack Overflow]( https://stackoverflow.com/questions/17563726/how-to-see-the-changes-in-a-git-commit )
[git diff one commit] git diff "$COMMIT\%#^!"
[git diff one commit] git diff-tree -p $COMMIT\%#

[git follow file (find some file at log)] git log --follow --stat $REL_FILE_PATH\%# # you can use dir path

[git list ignored files] git ls-files --other --ignored --exclude-standard
[git remove untracked files and dirs] git clean -d --dry-run
[git remove untracked and ignored files and dirs] git clean -x -d --dry-run
[git remove only ignored files and dirs] git clean -X -d --dry-run
# あくまでも，指定したブランチからのpull(任意に設定可能)
[git pull origin current branch] git pull origin $(git rev-parse --abbrev-ref HEAD)
[git pull rebase master] git pull --rebase origin master
[git log without modified files] git log --stat --name-status | grep -v "^M" | less
[git log with marge commit diff] git log -p -m
[git relative modified files] git status -s | cut -c4-
[git status without untracked-files] git status --untracked-files=no
[git without cd] REPO_DIRPATH=$(realpath \%#) && git --git-dir "$REPO_DIRPATH/.git" -C "$REPO_DIRPATH" 

[git discard staged changes in working directory] git checkout -- . # dangerous
[git fetch remote branches] git fetch –all
[git checkout remote branch as local] git checkout -t origin/\%#BRANCH_NAME

[git find detached commits] git fsck --lost-found

[git apply patch even it has conflict] git apply --3way \%#
[git apply dry-run] git apply --check \%#
[git apply patch stat] git apply --stat \%#
[git patch apply] git apply $PATCH_FILEPATH # <(p)
[git patch] cd $(git rev-parse --show-toplevel) && patch -p1

[git current branch name] git rev-parse --abbrev-ref HEAD
[git current commit id] git rev-parse HEAD # or git rev-parse --short HEAD or git show -s --format=%H

[git find file] git ls-files "*\%#"

[git clone only HEAD] git clone --depth 1 $URL

[git abspath to git relative path] git ls-files --full-name \%#

[git check remote branch exist] git show-ref --quiet --verify -- "refs/remotes/origin/\%#"

[git sed makefile example] git sed "s/\.a/\.so/g" "*/[m|M]akefile" # convert .a to .so

[git archive master] git archive master --format=zip --output=master.zip
[git local page] git instaweb --port=11111

[git xargs] git ls-files -z | xargs -0 -I{} echo {}

[git own author name] git config --get user.name
[git list all authors] git shortlog -s | cut -c8-

[git tag push] git push origin $TAG\%#
[git tag push(all)] git push origin --tags

[git amend unstage file] git rm --cached \%#

[git show diff codes with file filtering] git show $SHA\%# -p -- "*"

[git empty tree SHA] 4b825dc642cb6eb9a060e54bf8d69288fbee4904
[git empty tree SHA] git hash-object -t tree /dev/null

[git format-patch for am] git format-patch -o $DIR\%# $SHA_START..${SHA_END:HEAD}
[git am for format-patch] git am *.patch
[git tmp copy repo step] echo 'SRC:git format-patch -> git diff, DST:git am, git apply'

[git get relative fullpath] git rev-parse --show-prefix \%# | tr -d '\n'
[git get relative rev fullpath] git rev-parse --show-cdup

# tig
[tig file history] tig $FILE
[tig blame] tig blame $FILE
[tig stash] tig stash! # or press y
[tig commit log grep] tig -S"\%#"
[tig commit log grep] tig log -S"\%#"

# gerrit
[git gerrit review push certain branch] git push origin HEAD:refs/for/$BRANCH_NAME # without origin/
[git gerrit review push  master branch] git push origin HEAD:refs/for/master
[git gerrit review push  master branch (drafts)] git push origin HEAD:refs/drafts/master
[git gerrit base64 patch] cat \%# | base64 -d | (pushd $(git rev-parse --show-toplevel) >/dev/null 2>&1; patch -p1; popd >/dev/null 2>&1) # if mac use base64 -D

# github
[github user public key] curl -L https://github.com/$USER_NAME\%#.keys

# tree
# [tree by ls and sed] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
# FYI: [tree コマンドが無い環境で tree コマンドを実現 \- Qiita]( https://qiita.com/yone098\%#github/items/bba8a42de6b06e40983b )
[tree not found] pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'
[tree depth] tree -L $DEPTH

# shell one liner
[ol ls -a without . and ..] ls -A
[ol ls -a without . and ..] ls -a | tail -n +3
[ol ls -a without . and ..] ls -a | grep -v -e '^.$' -e '^..$'
[ol show only non-uniq lines] sort | uniq -d
[ol show only uniq lines] sort | uniq -u
[ol show n~ lines] tail -n +\%# # n行目以降
[ol filter only number] perl -pe 's/[^\d]*(\d+\.\d+|\d+)[^\d]*/ (0+$1)." " /ge; print "\n"' | awk 'NF' | sed -E 's/ $//g'
[ol compact space] sed -e 's/\s\+/ /g'
[ol line join with keyword] awk '{l=l (NR==1?"":"\%#") $0}END{print l}'
[ol join n-block line] awk -v n=\%# -v delim=":" 'NR%n!=1{printf "%s", delim;} {printf "%s", $0;} NR%n==0{printf "\n";}'
[ol sed template :] sed -e 's:\%#::g'
[ol sed template /] sed -e 's/\%#//g'
[ol join line with char] awk '{printf "%s\%#", $0}'
[ol join block to one line] awk '!/^$/{printf "%s", $0;} /^$/{print "";}'
[ol filter before and after line like grep -C ] awk -v base=\%# -v range= -v pre_line=0 '(pre_line+base-range)<=NR && NR<=(pre_line+base+range)' # if 'bat' assign pre_line=3
[ol awk sum] awk 's+=$0{}END{print s}' # NOTE: one line one number
[ol awk ave] awk 's+=$0{}END{print s/NR}' # NOTE: one line one number
# [ソートしないで重複行を削除する \- Qiita]( https://qiita.com/arcizan/items/9cf19cd982fa65f87546 )
[ol awk uniq without sort] awk '!a[$0]++'
[ol awk drop blank line] awk 'NF'
[ol awk RMSE] awk 'NF>=2{s+=($1-$2)*($1-$2);n++;} NF==1 || NF>2 {printf "[WARN] wrong format\n", $0;} function out(){rmse=sqrt(s/n);printf"RMSE of %d data=%f\n", n, rmse;s=0;n=0;} NF==0&&n>=1{out()} END{out()}'
[ol cut] cut -d' ' -f \%#
[ol awk cut] awk '{ print $\%#; }'
[ol awk unbuffer] '{fflush()}'
[ol each N lines to one line] awk -v N=\%# '{printf "%s", $0; } (NR%N==0){print ""}'
[ol remove last blank line] perl -pe "chomp if eof"
[ol repeat text] printf '$TEXT\%#%.0s' {1..$N}
[ol grep mail address] grep -o -E "[-_a-zA-Z0-9\.+]+\%#[-a-zA-Z0-9\.]+"
[ol word count ranking] awk 'map[$0]++{} END{for(k in map){print map[k],k;}}' | sort -nr
# random
[ol random texts ruby] ruby -e 'puts ((0..9).to_a + ("a".."z").to_a + ("A".."Z").to_a).sample((ARGV[0].nil?)?8:ARGV[0].to_i).join' # length
[ol random texts dev] LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 32\%#
[ol random texts dev] LC_CTYPE=C tr -dc A-Za-z0-9_\!\#\$\%\^\&\*\(\)-+=@ < /dev/urandom | head -c 32
[ol abspath] python2 -c 'import os; import sys; x=os.path.abspath(sys.argv[1]); print x' \%#
[ol abspath] python3 -c 'import os; import sys; x=os.path.abspath(sys.argv[1]); print(x)' \%#
# FYI: [zsh \- Portable way to get script's absolute path? \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/76505/portable-way-to-get-scripts-absolute-path )
[ol abspath] perl -MCwd -le 'for (@ARGV) { if ($p = Cwd::abs_path $_) { print $p; } else { warn "abs_path: $_: $!\n"; $ret = 1;}} exit $ret' \%#
[ol shuffle lines] perl -MList::Util=shuffle -e 'print shuffle(<>)'
[ol median perl] perl -e'@lines = sort {$a <=> $b} <>; print $lines[int($#lines/2)]'
[ol median awk] sort | awk '{v[i++]=$1;}END {x=int((i+1)/2); if(x<(i+1)/2) print (v[x-1]+v[x])/2; else print v[x-1];}'
[ol hex] python3 -c 'import sys; [print(hex(int(v)).upper()) for v in list(sys.argv)[1:]]' \%#
[ol binary num] python3 -c 'import sys; [print(bin(int(v))) for v in list(sys.argv)[1:]]' \%#
[ol octal num] python3 -c 'import sys; [print(oct(int(v))) for v in list(sys.argv)[1:]]' \%#
[ol dump binary hex] python3 -c 'import sys; [print(bytes(v, encoding="utf-8")) for v in list(sys.argv)[1:]]' \%# # xargs bash -c 'echo -e $0'
[time bomb at mac] sleep $(( $(gdate -d "\%#" "+%s") - $(gdate "+%s") )) && echo BOMB # 12:34, 01/23 12:34, 1 min, 1 day
[time bomb at ubuntu] sleep $(( $(date -d "\%#" "+%s") - $(date "+%s") )) && echo BOMB # 12:34, 01/23 12:34, 1 min, 1 day

[shuffle line] shuf

[ls sort version(number)] ls -v

[number of CPU] nproc --all # linux only

# g++
## g++ not clang++
[cpp c++11 verbose help] g++ -v --help
[cpp c++11 compile] g++ -std=c++11 \%#
[cpp c++11 compile] clang++ -std=c++11 \%#
[cpp c++11 compile ignore library order] -Wl,--no-as-needed
[cpp pch] PCH_HEADER=\%# && [[ -n $PCH_HEADER ]] && clang++ -Xclang -emit-pch -x c++-header -std=c++11 $PCH_HEADER -o $PCH_HEADER.pch
[cpp pch gen] CPPFILE=\%# && [[ -n $CPPFILE ]] && cat "$CPPFILE" | grep -E -o '^#include.*' > ".${CPPFILE%.*}.hpp" && echo ".${CPPFILE%.*}.hpp"
[cpp demangle] echo "\%#" | c++filt
[cpp c++11 compile shared library] g++ -std=c++11 -shared -fPIC \%#
[g++ warning options] -Wall -Wextra -Wformat=2 -Wstrict-aliasing=2 -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wfloat-equal -Wpointer-arith -Wswitch-enum # by binary-hacks book
[g++ extract macro] TARGET_FILE=\%#; g++ -CC -E $TARGET_FILE | awk '/^# [0-9]*/ { FLAG=0; } /^# [0-9]* "'"$TARGET_FILE"'"/ { FLAG=1; } { if(FLAG) print $0;}'
[g++ asm] g++ -S -fno-asynchronous-unwind-tables -g \%# # -fno-asynchronous-unwind-tables: disable CFI directive
[g++ arch native] -march=native \%#
[32bit arm-linux-gnueabihf-g++] arm-linux-gnueabihf-g++ \%#
[alias 32bit arm-linux-gnueabihf-g++] alias g++=arm-linux-gnueabihf-g++ !
[64bit arm-linux-gnueabihf-g++] aarch64-linux-gnu-g++ \%#
[alias 64bit arm-linux-gnueabihf-g++] alias g++=aarch64-linux-gnu-g++ !

# rename
[find and rename] find . -name "\%#" | xargs -L1 -IXXX echo "mv -i XXX XXX" | vim -

# line filter
[sed add header] sed '1i\%#'
[sed line filter] sed -n $START\%#,${END}p # index starts with 1
[sed line filter] sed -n \%#P # only line (index starts with 1)
[sed (before) <= some line] sed -n '1,/\%#/p'
[sed (after)  >= some line] sed -n '/\%#/,$p'
[sed remove BOM UTF-8] sed "s|\xef\xbb\xbf||g"
[sed convert CR] tr '\n' $(echo -e "\x1E") | sed 's/'$(echo -e "\x1E")'/\\n/g'

# patch
[patch] echo 'git diff | c && cd $(git rev-parse --show-toplevel) && p | patch -p1' !
[patch] p\%# | patch -p1'
[revert patch] cat \%# | patch -R

# http server
[python2 http server] python -m SimpleHTTPServer
[python3 http server] python3 -m http.server $PORT

# log
[realtime log viewer] tail -f

# mac
[brew clean cache] brew cleanup -s
[brew clean cache dry-run] brew cleanup -n
[check SIP status] csrutil status
[brew install local formula] brew install $FORMULA_FILEPATH
[brew install without tap] brew install $GIT_AUTHOR/$REPO_NAME/$FORMULA
# linux
[linuxbrew clean cache] brew cleanup -s && rm -rf $HOME/.cache/Homebrew/
[linuxbrew formula dirpath] ~/.linuxbrew/Library/Taps/homebrew/homebrew-core/Formula

# export proxy
[proxy env] PROXY="\%#" && export http_proxy="$PROXY" && export https_proxy="$PROXY" && export HTTP_PROXY="$PROXY" && export HTTPS_PROXY="$PROXY"
[noproxy env] NO_PROXY="127.0.0.1,loacalhost\%#" && export no_proxy="$NO_PROXY" && export NO_PROXY="$no_proxy"

# rm
[rm files startwith '-' ] rm -- -
[rm files startwith '-' ] rm ./-
[rm avoid 10sec wait at zsh]  bash -c "rm -rf *\%#" # BE CAREFUL!!!!

# wc
[count japanese chars] wc -m
[count line] wc -l | awk '{print $1}'
[count line] grep -c '^'

# ssh key
[ssh id_rsa] ssh-keygen -t rsa -f \%#_id_rsa
[ssh delete finger print] ssh-keygen -R $IP_ADDRESS
[ssh local port forwarding] ssh -N -f -L $local_port\%#:$dst_ip:$dst_port $host
[ssh remote port forwarding] ssh -N -f $from_remote_host -R $from_remote_port:$to_remote_ip:$to_remote_port
[ssh remote port forwarding example (run at remote host)] ssh -N -f $this_pc_ip_addr -R 10022:localhost:22 # reverse ssh tunnel(ssh remote_user\%#127.0.0.1 -p 10022)
[ssh avoid warning] ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \%#
[ssh print configuration] ssh -G $HOST
[sshfs mount] sshfs \%# # $REMOTE_HOST_AND_DIR $LOCAL_DIR
[sshfs mount read only] sshfs -o ro \%# # $REMOTE_HOST_AND_DIR $LOCAL_DIR
[sshuttle vpn] sshuttle -r \%# # 192.168.0.1/24
[ssh key finger print] ssh-keygen -E md5 -l -f \%#

[scp dir] command tar -C $SRC_DIR\%# -cf - . | ssh $HOST tar -C "$REMOTE_DST_DIR" -xvf - # SRC_DIR/* to REMOTE_DST_DIR/*
[rsync        ] rsync -auvzh $SRC_DIR/ \%# # set dst with dirname
[rsync dry-run] rsync -auvzhn $SRC_DIR/ \%# # set dst with dirname
# [rsync: how can I configure it to create target directory on server? \- Stack Overflow]( https://stackoverflow.com/questions/1636889/rsync-how-can-i-configure-it-to-create-target-directory-on-server )
[rsync same dir] [[ -z $TARGET_HOST ]] && selhost; \%#rsync -auvzh --rsync-path="mkdir -p $(pwd) && rsync" . $TARGET_HOST:$(pwd)
[rsync cp only dir with    src dir] rsync -avz --include "*/" --exclude "*" $SRC  $DST
[rsync cp only dir without src dir] rsync -avz --include "*/" --exclude "*" $SRC/ $DST

# one liners
[args checker] python -c "import sys; print(sys.argv)" \%#

# python
[pip upgrade] pip install --upgrade \%#
[pip list] pip freeze
[pip updatable package list] pip list -o
[pip3 error recover at ubuntu] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall
[pip install from github] pip install https://github.com/$USER_NAME/$REPO_NAME/archive/master.tar.gz
[pip Installing collected packages: UNKNOWN] pip install setuptools --upgrade
[pip show] pip show \%# # e.g. Location
[pip show with files] pip show -f \%#
[python venv] python -m venv $PROJECT_PATH\%#
[pip(2) recover] sudo python -m pip uninstall pip && sudo apt install python-pip --reinstall
[pip3 recover] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall
[python3 test run test] python -m unittest discover tests # last arg is dirname
[python3 test run coverage] coverage run --source='.' --omit='*/tests/*' -m unittest discover tests # last arg is dirname
[python3 test report coverage] coverage report
[python3 test gen html report] coverage html
[python3 test color output] green # pip install green
[pip install with some version] pip install "$PACKAGE\%#==$VERSION"
[pip reinstall another version] pip uninstall "$PACKAGE\%#" && pip install "$PACKAGE==$VERSION"
[pip search cui (fullmatch)] pip search
[pip search gui] open "https://pypi.org/search/?q=\%#"

# g++
[g++ macro defines] g++ -dM -E - < /dev/null | sort \%#
[g++ include header dir list] g++ -E -v - </dev/null
[g++ include header fullpath list] g++ -std=c++11 -H $CPP_FILEPATH
[clang dump] clang-check $SRC\%# -ast-dump -ast-dump-filter=main --


# network manager
[nmcli config files dir] /etc/NetworkManager/system-connections/
[nmcli connection] nmcli connection
[nmcli connection show] nmcli connection show
[nmcli device status] nmcli device status
[nmcli device show] nmcli device show
[nmcli general status] nmcli general status
[nmcli network reboot] echo "sudo nmcli networking off; sudo nmcli networking on" !
[nmcli network reboot] echo "sudo service network-manager restart" !
# [nmcli nic reboot] $CONNECTIONNAME=\%# && (sudo nmcli connection down $CONNECTION_NAME; sudo nmcli connection up $CONNECTION_NAME)
[nmcli nic reboot] sudo nmcli connection up $CONNECTION_NAME\%# # you can adopt setting only up command (without down)
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes                 ipv4.dns ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway "" ipv4.dns ""
[nmcli add device ] sudo nmcli connection add type ethernet ifname "$DEVICE_NAME" con-name "$CONNECTION_NAME"
[nmcli list unmanaged interfaces] nmcli d
[nmcli add gateway] sudo nmcli connection modify "Wired connection \%#" ipv4.gateway ""
[nmcil add dns    ] sudo nmcli connection modify "Wired connection \%#" ipv4.dns "137.153.66.28" # 空白区切りで複数指定可能
[nmcli set dhcp   ] sudo nmcli connection modify "Wired connection \%#" ipv4.method auto
[nmcli wi-fi info list] sudo nmcli d w
[nmcli remote dump] ssh \%# "nmcli device show"

[search ip address range] nmap -sP 192.168.0.0/24
[search ip address range by nbstat (NetBIOS)] sudo nmap -sU --script nbstat.nse -p137 '192.168.0.*'
[renew DHCP release] sudo dhclient -r; sudo dhclient

# id
[USER at Mac OS X] id -F
[USER] whoami
[UID] id -u
[GID] id -g

# curl
[curl with user-agent] curl -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36' \%#
[curl json example] curl -X POST -H "Content-Type: application/json" -d '{"id":"1","name":"nameuser","age":"10"}'\%# $URL
[curl dump response header] curl --dump-header - $URL
[curl check SSL expire date] curl --verbose \%# 2>&1 | grep 'expire date'
[curl sh with arg] curl \%# | sh -s -- # args
[curl bash with arg] curl \%# | bash -s -- # args

# FYI: [ちょっとだけ便利なワンライナー集 \| bacchi\.me]( https://bacchi.me/linux/bash-oneliner/ )
[ssl check date] : | openssl s_client -connect \%#:443 2>/dev/null | openssl x509 -dates -noout

# dmesg
[dmesg with human readable time] dmesg -T \%#

# ufw
[ufw status] sudo ufw status verbose
[ufw reload] sudo ufw reload

# serial
[serial communication cu] sudo cu -l /dev/ttyUSB0 -s 115200\%#
[serial communication screen] sudo screen /dev/ttyUSB0 115200\%#

# screenshot of ubuntu
[ubuntu screenshot (all)] gnome-screenshot # PrintScreen
[ubuntu screenshot (area)] gnome-screenshot --area # Shift + PrintScreen
[ubuntu screenshot (window)] gnome-screenshot --window # Alt + PrintScreen
[ubuntu screenshot {delay} ] gnome-screenshot --delay=5
[ubuntu screenshot (area with delay)] sleep 3\%# && gnome-screenshot --area # both --area and --delay flag is forbidden

# screen
[screen list  ] screen -ls
[screen attach] screen -r \%#
[screen run command] screen -dmS $tag $commands # don't surround command by ""
[screen run clip-share] [[ -z $TARGET_HOST ]] && selhost; \%#screen -dmS clip-share-$TARGET_HOST clip-share $TARGET_HOST # use selhost to set $TARGET_HOST

# vim
[vim force save by sudo] :call feedkeys(":w !sudo tee > /dev/null %\<CR> :e!\<CR>", 'n') # use at vim cmdline
[vim open tmp file from pipe input] | { local tmpfile=$(mktemp).log; cat > $tmpfile; vim $tmpfile; } \%#

# one liner
[for one liner] for i in $(seq \%#); do echo $i; done

# mnt
[mount nfs] sudo mount -t nfs "$NFS_SERVER_IP:$NFS_DIR_PATH" $LOCAL_DIR_PATH # wrong fs type? ===> sudo apt-get install nfs-common
[mount cifs(samba?)] sudo mount -t cifs -o username=$USER $REMOTE_TARGET $LOCAL_DIR_PATH
[nfsd status] nfsstat -c
[confirm filetype of system] mount
[nfs setting file] /etc/exports
# FYI: [exportfsコマンド：exportsファイルでのNFSの設定を反映する \| Step On Board]( http://www.lesstep.jp/step_on_board/linux/1106/ )
[nfs update] sudo exportfs -ra
[nfs show] sudo exportfs -v

# read
[read] read -s sudo_pass

# ssh
[ssh sudo tar command which is alternative for sudo scp] [[ -z $sudo_pass ]] && echo "Remote Server Password:🔑" && read -s sudo_pass; [[ -n $sudo_pass ]] && ssh $host "echo $sudo_pass | sudo -p '' -S tar cvfz - $remote_dirpath" > $filename.tar.gz
[sshpass ssh] sshpass -p $PASSWORD\%# ssh $HOST
[sshpass scp] sshpass -p $PASSWORD\%# scp $HOST
[sshpass rsync] sshpass -p $PASSWORD\%# rsync $HOST
# [Run Remote ssh command with Full Login Shell \- Super User]( https://superuser.com/questions/306530/run-remote-ssh-command-with-full-login-shell )
[ssh run command with full login shell] ssh $HOST\%# -t 'bash -l -c "env"'

# compile
[gcc llvm-config] llvm-config --cxxflags --ldflags --libs --system-libs

# ffmpeg
[silent sound file] ffmpeg -ar 48000 -t 0:01:00 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero -acodec libmp3lame -aq 4 silent.mp3

# ubuntu for 32bit apps
[ubuntu 32bit] sudo dpkg --add-architecture i386 && sudo apt-get update && && sudo apt-get install -y gcc-multilib g++-multilib && sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386

# dpkg
[dpkg] dpkg -l
[dpkg] dpkg -L $PACKAGE
[dpkg package name only] dpkg-query --show -f '${Package}\n'
[dpkg package size] dpkg-query --show -f '${Installed-Size}KB (${Package})\n'
[ubuntu filepath to apt-get package] dpkg -S $FILEPATH
# FYI: [software installation \- How can I check dependency list for a deb package \- Ask Ubuntu]( https://askubuntu.com/questions/80655/how-can-i-check-dependency-list-for-a-deb-package )
[apt-cache search] apt-cache search \%#
[apt-cache check dependency] apt-cache depends \%#
[apt-cache check dependency(detail)] apt-cache show \%# # with version
[dpkg check dependency] dpkg -I \%#

[ubuntu code name] lsb_release -cs # 16.04: xenial

[ubuntu usb rules directory] /etc/udev/rules.d

# so files
[so lib path search] ldconfig -p | grep $LIB_NAME

# sha
[hash sha256] shasum -a 256 \%#
[hash sha256 mac] gsha256sum \%#
[hash md5sum] md5sum \%#
[hash md5sum mac] gmd5sum \%#

# kernel
[load kernel module] insmod \%#.ko
[load kernel module (with dependency resolution)] modprobe \%#
[unload kernel] modprobe -r \%#
[kernel module list of fs] modprobe -lt fs
[list kernel module] lsmod

# losf
[lsof port to process] sudo lsof -i:\%#
[lsof port to PID] lsof -i :8080 | awk '{l=$2} END {print l}'
[lsof listening ports] lsof -Pan -i tcp -i udp
[lsof port to process (kill)] sudo kill $(sudo lsof -t -i:\%#)
[lsof process name to ports] lsof -Pan -i tcp -i udp -c \%# | grep -v NAME | awk '{print $9;}' | cut -d':' -f2
[lsof process name to ports] pgrep \%# | xargs -L 1 lsof -Pan -i tcp -i udp -p | grep -v NAME | awk '{print $9;}' | cut -d':' -f2

# proxy
[proxy npm] sudo -E npm install -g \%#
[proxy pip] sudo -E pip install \%#

# npm
[npm list package version] npm list -g --depth=0

# dns
[dns Google Public DNS] 8.8.8.8
[dns Google Public DNS] 8.8.4.4
[dns NTT America Technical Operations] 129.250.35.250
[dns NTT America Technical Operations] 129.250.35.251

[dns] dig
[dns] nslookup $TARGET $DNS_SERVER
[netstat] netstat antu

[ping NIC ] ping -I $NIC \%#

# apt-get
[apt-get install] sudo apt-get install \%#
[apt-get upgrade certain package only] sudo apt-get install \%# # don't use upgrade command
[apt-get error solution]  sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock

[apt-get under proxy env] sudo -E apt-get install \%#
[apt-get under proxy env] sudo apt-get -o Acquire::http::proxy="${HTTP_PROXY:-$http_proxy}" install \%# # http_proxyがセットしてあればsudo -EでOK

[apt official repo source list file] /etc/apt/sources.list
[apt unofficial repo source list directory] /etc/apt/sources.list.d/

[apt-get remove ppa repo] sudo add-apt-repository --remove ppa:\%# # xxx/yyy
[apt-get installed ppa list] dpkg -l | grep -E "ppa[0-9]+"
[apt-get remove package] sudo apt-get remove \%#
[apt-get force reinstall repo] REPO=\%# && sudo apt-get remove -y $REPO && sudo apt-get install -y $REPO # for delete ppa and reinstall

[add update-alternatives   ] sudo update-alternatives --install $LINK_PATH $CONFIG_NAME $REAL_CMD_PATH $PRIORITY
[switch update-alternatives] sudo update-alternatives --config $CMD

# at docker
[install lsof at docker] sudo apt-get install lsof

# sed
[sed delete end of line] sed -i '$d' $FILEPATH # for gsed
[sed add next line of regexp] sed -i -e '/$REGEX/a $ADD_LINE_STR' $FILAPTH
[sed add  pre line of regexp] sed -i -e '/$REGEX/i $ADD_LINE_STR' $FILAPTH
[sed fixed string replace] rpl \%# # $OLD $NEW $FILE # sudo apt-get install rpl || brew install rpl
[sed cut before] sed -E 's/^([^ ]+?( )+?){\%#}//'

# json,yaml
[json to yaml one liner] ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'
[yaml to json one liner] python3 -c "import sys; import yaml; import json; print(json.dumps(yaml.load(sys.stdin.read()), indent=2))"
[yaml to inline yaml] json2yaml -d 1 <(yaml2json \%#.yaml) # npm install yamljs
# FYI: [unix \- How can I pretty\-print JSON in a shell script? \- Stack Overflow]( https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script )
[json format] cat \%# | jq .
[json format] cat \%# | python -m json.tool

# ansible
[ansible man] ansible-doc

# time
[unix timestamp] date +%s
[unix timestamp with millsec] date +%s%3N

# pgrep
[pgrep with user info 1] ps wup $(pgrep -f \%#)
[pgrep with user info 2] ps aux | grep -v grep | grep -i \%#

# vagrant
[vagrant for proxy] vagrant plugin install vagrant-proxyconf
[vagrant ubuntu14.04 box download] vagrant box add ubuntu/trusty64
[vagrant ubuntu16.04 box download] vagrant box add ubuntu/xenial64
[vagrant init ubuntu14.04] vagrant init ubuntu/trusty64
[vagrant init ubuntu16.04] vagrant init ubuntu/xenial64
[vagrant up (run)] vagrant up
[vagrant ssh (connect, exec, attach)] vagrant ssh
[vagrant status] vagrant status
[vagrant stop] vagrant suspend
[vagrant force shutdown] vagrant halt
[vagrant ssh config] vagrant ssh-config > ssh.config
[vagrant scp] scp -F ssh.config $SRC_PATH\%# vagrant@default:$DST_PATH
[vagrant ssh] ssh -F ssh.config default
[add vagrant proxy setting] sed -i -e "/^end$/i \\  if Vagrant.has_plugin?("vagrant-proxyconf") && ENV['HTTP_PROXY']\n      puts '# - Proxy Setting ----------------------------------'\n      puts '# ' + ENV['HTTP_PROXY']\n      config.proxy.http     = ENV['HTTP_PROXY']\n      config.proxy.https    = ENV['HTTP_PROXY']\n      config.proxy.no_proxy = "localhost,127.0.0.1"\n      puts '# --------------------------------------------------'\n  end" Vagrantfile

# python
[python unittest] python -m unittest $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest verbose] python -m unittest -v $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest recursively] python -m unittest discover
[python unittest recursively verbose] python -m unittest -v discover
[python touch init file] touch __init__.py

# ros
[ros kinetic source bash] source /opt/ros/kinetic/setup.bash # Wily(Ubuntu 15.10), Xenial(Ubuntu 16.04), Jessie(Debian 8)
[ros kinetic source zsh ] source /opt/ros/kinetic/setup.zsh
[ros init] mkdir -p ~/catkin_ws/src && cd ~/catkin_ws && catkin_make && cd src && echo "catkin_create_pkg!!"

[rosnode list] rosnode list
[rostopic list] rostopic list
[rostopic list] rostopic list -v
[rostopic list] rostopic list -p
[rostopic list] rostopic list -s
[rosparam] rosparam dump
[rostopic] rostopic info $TOPIC_OR_NODE
[rostopic] rostopic echo $TOPIC # /hoge/piyo
[rostopic] rostopic echo --noarr $TOPIC # for big topic output
[rostopic] rostopic hz $TOPIC
[ros node graph] rosrun rqt_graph rqt_graph
[ros tf tree GUI] rosrun rqt_tf_tree rqt_tf_tree
[ros tf tree pdf] rosrun tf view_frames
[ros tf echo] rosrun tf tf_echo $TF1 $TF2
[ros echo] rostopic echo /\%#
[ros 3d gui] rosrun rviz rviz # in docker use nvidia-docker1(not nvidia-docker2)
[ros console] rosrun rqt_console rqt_console
[ros show type] rostopic type /\%#
[ros show field of type] rosmsg show \%#
[ros show field of type] rostopic type /\%# | rosmsg show
[ros find] rospack find \%#
[ros ls] rosls \%#
[ros cd] roscd \%#
[ros cp] roscp \%#
[ros depends] rospack depends \%# # all nest
[ros depends1] rospack depends1 \%# # only nest 1
[ros publish] rostopic pub -1 /\%# $TYPE -- '{$KEY: $VAL}' # '{header: {seq: 0, stamp: now, frame_id:sample_id}, data: [], position: {x: 0.0, y: 0.0, z: 0.0}}'
[ros echo publish (pipe)] rostopic echo /\%# | rostopic pub /\%# $TYPE

[ros catkin_create_pkg] catkin_create_pkg $PACAKGE_NAME pcl_conversions pcl_ros roscpp sensor_msgs # dependency packages...
[rostest run tests] catkin_make run_tests # for 1st?
[rostest run tests] catkin_make tests # for 2nd or later?
[rostest run results] catkin_test_results

[roscore daemon start by screen] pgrep roscore >/dev/null 2>&1 || screen -dmS "roscore" roscore
[roscore restart by screen] pkill roscore && screen -dmS "roscore" roscore

[rosbag] rosbag compresss
[rosbag] rosbag decompresss
[rosbag] rosbag filter
[rosbag] rosbag play
[rosbag play with rename topic] rosbag play \%# $FROM_TOPIC:=$TO_TOPIC# from:=to
[rosbag csv] rostopic echo -b $BAG_FILEPATH -p /$TOPIC_NAME
[rosbag rqt_bag viewer] rqt_bag # <bag file>
# default is TERM signal
[rosbag timeout] timeout -sINT rosbag record -O \%# # xxx.bag /xxx/yyy
# [rosbag file cannot be made // \.bag\.active \- ROS Answers: Open Source Q&A Forum]( https://answers.ros.org/question/40116/rosbag-file-cannot-be-made-bagactive/ )
[rosbag fix] rosbag reindex *.bag.active && rosbag fix *.bag.active repaired.bag

[roslaunch output screen] roslaunch --screen \%#

[catkin_make] catkin_make --pkg $PACAKGE_NAME
[catkin_make clean] catkin_make clean
[catkin_make install] catkin_make install

[catkin build all clean] [[ -d src ]] && rm -rf build devel install || echo "\\033[0;31m"'here is not catkin workspace'"\\033[0m"

[ros info reload] rospack profile

# NOTE: 引数の数で判定している?
# rosrun tf static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms
# rosrun tf static_transform_publisher x y z qx qy qz qw    frame_id child_frame_id period_in_ms
[ros Fixed Frame map does not exist] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 $ROOT_FRAME $CHILD_FRAME 100 # /map /xxx
[ros tf sample] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 base_link map 100

[roslog cat] cat $HOME/.ros/log/latest/
[roslog file] $HOME/.ros/log/
[rosclean] rosclean check
[rosclean] rosclean purge
# FYI: [ROS 複数台での通信時の問題点：clientからmasterへと情報送信できない \- Qiita]( https://qiita.com/ossyaritoori/items/b2336451583ce40d1b9a )
[ros set rosmaster on slave] pkill rosmaster; pkill roscore; export ROS_HOSTNAME=$SLAVE_IP_ADDRESS\%# && export ROS_MASTER_URI=http://$ROS_MASTER_HOSTNAME:11311/ # ROS_HOSTNAME is high priority over ROS_IP
# NOTE: default ROS_MASTER_URI is localhost (which has IP restriction)
[ros publish rosmaster on master] pkill rosmaster; export ROS_HOSTNAME=$IP_ADDRESS\%# && export ROS_MASTER_URI=http://$ROS_HOSTNAME:11311/; roscore # ROS_HOSTNAME is high priority over ROS_IP

[ros log] ~/.ros/log/latest/master.log
[ros log] ~/.ros/log/latest/$ROS_NODE_NAME\%#-1-stdout.log

# gitignore
# FYI: [gitignore\.ioのススメ \- Qiita]( https://qiita.com/dhun/items/adcae139b5ba1da56c81 )
[ros gitignore] curl -L http://www.gitignore.io/api/ros
[git repo local gitignore open] vim $(git rev-parse --show-toplevel)/.git/info/exclude !

[show char code] hexdump -C \%#
[hexdump -C] od -t x1z -A x
[od next line] od -t x1c -A x
[file to c++ array] od -A n -v -t x1 \%# | awk -v var_name=data 'BEGIN{ printf("const unsigned char %s[] = {\n", var_name); } { for (i=1;i<NF;i++) printf("0x%s,", $i); print ""; } END{ print "};"; }'
[binary diff] cmp -l $FILE1\%# $FILE2 | gawk '{printf "%08X %02X %02X\n", $1, strtonum(0$2), strtonum(0$3)}'
[binary overwrite] printf '\\x31\\xc0\\xc3'\%# | dd of=$BIN_FILE bs=1 seek=$START count=$LENGTH conv=notrunc

[replace c2a0 to space (e.g. for tree)] sed "s/$(echo -e "\\xc2\\xa0")/ /g"

[tree show hidden file] tree -a -I "\\.git" \%#

# kill
[kill SIGKILL] sudo kill -KILL \%# # same meaning as sudo kill -9

# user
[add new user] NEW_USER=\%# && sudo adduser $NEW_USER
[add new sudo user] NEW_USER=\%# && sudo adduser $NEW_USER && sudo gpasswd -a $NEW_USER sudo
[add group to user usermod] sudo usermod -aG $GROUP\%# $USER
[add group to user gpasswd] sudo gpasswd -a $USER $GROUP\%#
[add group to user adduser(ubuntu)] sudo adduser $USER $GROUP\%#
[create new group (ubuntu)] sudo addgroup $GROUP\%#
[group list] cat /etc/group

[list users with ldap user] getent passwd

# stdin/out/errr
[devnull stderr       ] 2>/dev/null \%#
[devnull stdout       ] >/dev/null \%#
[devnull stdout/stderr] >/dev/null 2>&1 \%#
[stderr > stdout      ] 2>&1 \%#
# [linux \- Pipe only STDERR through a filter \- Stack Overflow]( https://stackoverflow.com/questions/3618078/pipe-only-stderr-through-a-filter )
[pipe only stderr] 3>&1 1>&2 2>&3 3>&- \%# # in zsh do setopt nomultios

# login shell
# you can check login shell easily by ssh localhost
## chsh: PAM authentication failed
## [Personal Memos: CHSHコマンドで失敗して]( https://takeshinho-24.blogspot.com/2011/04/chsh.html )
## > 現在のユーザのシェルをチェックして
## > 存在しないとchshを実行させないようになっているようです。
[login shell: set new zsh shell to /etc/shells] { cat /etc/shells | grep -q $(command which zsh); } || command which zsh | sudo tee -a /etc/shells
[login shell: set zsh as login shell] command which zsh >/dev/null 2>&1 && sudo chsh -s $(command which zsh) $(whoami)
[relogin zsh > bash] command which zsh >/dev/null 2>&1 && exec $(command which zsh) -l
[relogin] exec $SHELL -l # WARN same env
# really?
[clean relogin (completely)] exec sudo su - $(whoami) # NOTE: don't miss type sudo password

[fix perl local warning] sudo apt-get install -y locales && sudo locale-gen $LANG
[enable emoji] sudo apt-get install -y language-pack-ja && sudo update-locale LANG=ja_JP.UTF-8

[zsh function list] print -l ${(ok)functions}
[zsh key bind list] bindkey \%#
[zsh completion bug fix] rm -rf ~/.zcompdump ~/.zcompcache # HINT: command not found

# sudo
[enter root as user env] sudo su
[enter root as root env] sudo su -
[sudoable or not] sudo -n true >/dev/null 2>&1

# echo
[echo  x char] echo -e "\\x61"
[echo unicode] echo -e "\\U1F363"

[unexport] unset \%# # remove export

[test x window system] xset q
[x window app install] sudo apt-get install x11-apps

# crontab
[crontab confirm] crontab -l
[crontab edit] crontab -e
[crontab update file] crontab $FILEPATH
[crontab visualization] crontab -l | cronv -w 200 -d 24h # go get -u github.com/takumakanari/cronv/...

# direnv
[direnv allow] direnv allow
[reload .envrc] direnv allow
[direnv file] touch .envrc

# vim
[vim init cmake] vim CMakeLists.txt
[vim init docker file] vim Dockerfile
[vim init README.md] vim README.md

# shell tips
[shell to ext] $(basename ${0##-}) # without fish(bash,csh,zsh,sh ok)
# PS1='\[\e[1;33m\]\u\%#\h \w ->\n\[\e[1;36m\]\$\[\e[m\] '
[bash PS1] echo -n "PS1="; echo J1xbXGVbMTszM21cXVx1QFxoIFx3IC0+XG5cW1xlWzE7MzZtXF1cJFxbXGVbbVxdICc= | python -c "import base64; import sys; sys.stdout.write(base64.b64decode(sys.stdin.read()).decode('utf-8'))" !

# cpp environment variables
[cpp include file path] export CPATH="\%#:$CPATH"
[cpp library file path] export LIBRARY_PATH="\%#:$LIBRARY_PATH"

# network
[show arp table] arp -a # same network? ip addr and MAC address pair list

# compile_commands.json
[list -I dirs] cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\n' ':'
[add -I dirs list to CPATH] export CPATH="$(cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\n' ':'):$CPATH"

# dev usb
[dev usb0] /dev/ttyUSB0
[dev usb1] /dev/ttyUSB1
[dev usb2] /dev/ttyUSB2
[dev usb3] /dev/ttyUSB3

# tags
[rtags: run rdm server by screen] pgrep rdm >/dev/null 2>&1 || screen -dmS "rdm" rdm
[rtags: register build dir for rtags] pgrep rdm >/dev/null 2>&1 || (screen -dmS "rdm" rdm && sleep 0.2); rc -J .

[webcatd run by screen] pgrep gotty >/dev/null 2>&1 || screen -dmS "webcatd" webcatd
[any command run by screen] CMD=\%# && pgrep "$CMD" >/dev/null 2>&1 || screen -dmS "$CMD" $CMD

# shell
[extract filepath ~] sed "s:^~:$HOME:g"
[single quote] '"'"'

# date
[mac date] date +'%Y-%m-%d %H:%M:%S'
[date for log] date +'%Y-%m-%d-%H-%M-%S'

[mac logger] logger 'hello world'
[mac cat log] log show --style syslog --predicate 'processImagePath endswith "logger"' --start $(date +"%Y-%m-%d")
[mac hardware info] system_profiler SPHardwareDataType
[mac cpu core info] sysctl -a | egrep -e "hw.ncpu*|hw.activecpu*|hw.logicalcpu*|hw.physicalcpu*" # or sysctl -n hw.ncpu
[python cpu core info] python -c 'import multiprocessing as m; print(m.cpu_count());' # with hyper threads
[linux cat log] cat /var/log/messages

[ubuntu mother board info] sudo dmidecode -t baseboard
[ubuntu memory info] sudo dmidecode -t memory
[ubuntu memory info] cat /proc/meminfo
[ubuntu cpu info] cat /proc/cpuinfo
[ubuntu gpu info] lspci | grep VGA
[ubuntu nvidia gpu info] nvidia-smi
[ubuntu partition info] sudo parted -l
[ubuntu block device info] lsblk # you can use without sudo
[ubuntu network device info] lspci | grep Ethernet
[ubuntu network device info] sudo lshw -class network
[ubuntu hardware info] sudo lshw
[ubuntu disk info] sudo lshw -c disk
[ubuntu disk read/write speed performance check] sudo hdparm -Tt /dev/sda
# e.g.
# /dev/sda:
#  Timing cached reads:   27416 MB in  1.99 seconds = 13761.56 MB/sec
#  Timing buffered disk reads: 600 MB in  3.00 seconds = 199.80 MB/sec

# [linux \- How to know if a disk is an SSD or an HDD \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/65595/how-to-know-if-a-disk-is-an-ssd-or-an-hdd )
[hdd or ssd] echo 'SSD HDD' | cut -d" " -f$(($(cat /sys/block/sda/queue/rotational)+1))

[confirm zsh cached comand type] builtin which \%#

# font
[confirm fonts list at ubuntu(mac)] fc-list
[pygame font] python3 -c 'import pygame; print(pygame.font.get_fonts())'


[how to know image size] file
[how to know image size] identify

# [bash \- Removing a newline character at the end of a file \- Stack Overflow]( https://stackoverflow.com/questions/16365155/removing-a-newline-character-at-the-end-of-a-file )
[removing a newline character at the end of a file] perl -0pe 's/\n\Z//'

[encrypt text with password] echo "$TEXT" | openssl enc -e -aes-256-cbc -base64 -k $PASSWORD
[decrypt text with password] openssl enc -d -aes-256-cbc -base64 -k $PASSWORD

[mac volume path] cd /Volumes/
[mac disk unmount] diskutil unmount /Volumes/$DISK_NAME
# iso to usb(disk)
[0. mac disk list] diskutil list
[1. mac disk format] echo 'diskutil eraseDisk MS-DOS UNTITLED /dev/disk2'
[2. mac disk unmount] diskutil unmountDisk /dev/disk2
[3. mac iso to disk] echo 'sudo dd if=xxx.iso of=/dev/disk2 bs=2m'
[4. mac disk eject] diskutil eject /dev/disk2
[mac check dd progress] sudo pkill -INFO "^dd"
[ubuntu check dd progress?] sudo pkill -USR1 "^dd"

[repeat command] watch -n $SEC "$CMD"

# base64
[mac base64 encode] base64 \%#
[mac base64 decode] base64 -D \%#
[ubuntu base64 encode] base64 -w 0 \%#
[ubuntu base64 decode] base64 -d \%#
[python base64 encode] python -c "import base64; import sys; x = base64.b64encode(sys.stdin.read() if sys.version_info[0] < 3 else sys.stdin.buffer.read()); sys.stdout.write(x) if sys.version_info[0] < 3 else sys.stdout.buffer.write(x)"
[python base64 decode] python -c "import base64; import sys; x = base64.b64decode(sys.stdin.read()); sys.stdout.write(x) if sys.version_info[0] < 3 else sys.stdout.buffer.write(x)"

[python binary stdin.read()] sys.stdin.read() if sys.version_info[0]<3 else sys.stdin.buffer.read()
[python version branch ? :] $PY2 if sys.version_info[0]<3 else $PY3

[ubuntu disk unmount] sudo umount /dev/sdb?

[ubuntu japanese home dirs to english] LANG=C xdg-user-dirs-gtk-update

[xdotool text] xdotool type "hello"
[xdotool tab] xdotool key Tab # xdotool type "$(echo -e "\x09")"
[xdotool enter] xdotool key Return

[login message] figlet 'Hello Underworld!' | sand "$YELLOW" | text_center | sudo tee /etc/motd # my original command is included

[mac You have new mail.] mail

[filter file by < size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size -1M\%#
[filter file by > size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size +1M\%#

[shutdown] sudo shutdown -h now

[ninja build] ninja
[ninja clean] ninja -t clean
[ninja build.ninja file] touch build.ninja
[ninja compile_commands.json] ninja -t compdb $RULE_NAMES # e.g. app obj lib

[version python] python --version
[version go] go version
[version tmux] tmux -V
[version zsh] zsh --version
[version bash] bash --version
[version screen] screen -v
[version vim] vim -v
[version sed] sed --version
[version git] git --version

# lzz
# space + `#` -> parse as comment
# 'hogehoge''piyopiyo' -> "hogehoge'piyopiyo"
# 'hogehoge'""'piyopiyo' -> "hogehogepiyopiyo"
[c++ split hpp to cpp: lzz .hpp to .lzz] FILENAME=\%# && cat $FILENAME | sed -e '/^#include/i '""'#hdr' | sed -e '/^#include/a '""'#end' | tee ${FILENAME%.*}.lzz # do lzz <lzz filepath> -> xxx.cpp xxx.h
[lzz] lzz $LZZFILE\%# # gen xxx.cpp xxx.h NOTE: overwrite

# clang-format
[clang-format replace file] clang-format -i $FILEPATH
[clang-format all (find)] find . \( -name "*.c" -o -name "*.cc" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" \) -print0 | xargs -0 -L 1 -I{} bash -cx "clang-format -i '{}'"
[clang-format all (git)] git ls-files -z -- ':*.cpp' ':*.hpp' ':*.cxx' ':*.cc' ':*.c' ':*.h' | xargs -0 -L 1 -I{} bash -cx "clang-format -i '{}'"

# bash
[shell var regexp] ${FILEPATH\%#%./} # dirname(dirpath)
[shell var regexp] ${FILEPATH\%#%.*} # without ext
[shell var regexp] ${FILEPATH\%###*/} # basename
[shell var regexp] ${FILEPATH\%###*.} # ext

[complete relogin] su -l $(whoami)
[complete relogin  zsh(linux)] su $(whoami) -s $(which zsh)
[complete relogin bash(linux)] su $(whoami) -s $(which bash)

# diff
[diff ignore space(blank)] diff -b \%#
[diff directory] diff -r \%# # DIR_A DIR_B
[diff directory only filepath] diff -rq \%# # DIR_A DIR_B
[diff multifiles] \\diff --from-file=$SRC\%# $CMP1 $CMP2 # ... # for diff or colordiff
## FYI: [How to get diff working like git\-diff? \- Stack Overflow]( https://stackoverflow.com/questions/4857310/how-to-get-diff-working-like-git-diff )
[git style diff at out of repo] git diff --no-index -- \%#

# mac
[mac sshpass install] brew install http://git.io/sshpass.rb
[brew switch version] brew switch $formula\%# $version

# heredoc
[heredoc to filename] cat > $FILEPATH\%# << 'EOF'

[linux: check shared lib path objdump -p] objdump -p \%# # readelf -d

# nkf
[nkf guess] nkf -g \%#
[nkf auto conv] nkf -w \%#
[nkf add UTF-8 BOM] nkf --oc=UTF-8-BOM
[nkf drop(remove,delete) UTF-8 BOM] nkf --oc=UTF-8

# symbolic link
[ln symbolic link file      overwrite] ln -sf $LINK_FILE_DST $LINK_FILE_SRC
[ln symbolic link directory overwrite] ln -sfn $LINK_DIR_DST $LINK_DIR_SRC
[namei ubuntu] namei \%#

# time
# [shell \- How can I redirect the output of the "time" command? \- Stack Overflow]( https://stackoverflow.com/questions/2408981/how-can-i-redirect-the-output-of-the-time-command )
[time command redirect tips] (time \%#) # |& tee $FILEPATH
[time command redirect tips] {time \%#} # |& tee $FILEPATH

# unbuffer command
# [shell \- Turn off buffering in pipe \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe )
[unbuffer command] unbuffer \%#
[unbuffer command] script -c "$COMMAND\%#" /dev/null # |& tee $FILEPATH

# gdb
[gdb bind process] gdb -p $PID # bt detach quit
[gdb with args] gdb --args # [exec command] [args...]

# perf
[git clone FlameGraph] cd ~/local/bin && git clone https://github.com/brendangregg/FlameGraph
[perf frame graph] perf script -i \%# | ~/local/bin/FlameGraph/stackcollapse-perf.pl | ~/local/bin/FlameGraph/flamegraph.pl > perf.data.flame_graph.svg

# TERM
[TERM tmux] export TERM=screen-256color
[TERM xterm] export TERM=xterm-256color

[cmd repeat like watch] while true; do sleep 1; \%#; done
[pseudo watch command] while true; do sleep 1; bash -c "clear; \%#"; done

[stopwatch] time cat # stop:c-c

[fork bomb] echo ':(){ :|:& };:' !

[from when] uptime

[elf: elf header] readelf -h \%#
[elf: program header] readelf -l \%#
[elf: section header] readelf -S \%#
[elf: elf/program/section header] readlef -e \%#
[read section] readelf -x\%# # -x25 # FYI: readelf -S
[elf: symbol header] readelf -s \%#
[show string table] FILE_PATH=\%# && readelf -S $FILE_PATH | grep -A 1 strtab | tr -d '\n' | xargs bash -c 'od --skip-bytes 0x$4 --read-bytes 0x$5 -t x1z '"$FILE_PATH"
[show string table] FILE_PATH=\%# && readelf -S $FILE_PATH | grep strtab | grep -o '\[[0-9]*\]' | sed 's/\[\|\]//g' | xargs -I{} readelf -x{} $FILE_PATH

[static library: list objects] ar tv \%#

# route
[route add default gateway] sudo route add default gw \%# # FYI: for permanent setting, /etc/network/interfaces or /etc/network/if-up.d/static-routes or /etc/rc.local

[ldd tree] lddtree -a \%# # sudo apt-get install pax-utils
[ldd] LD_TRACE_LOAADED_OBJECTS=1 \%# # exec command
[ldd] readelf -d \%#

[nm: with object filename] nm -A \%#
[nm: dynamic symbol] nm -D \%# # e.g. calloc, free
[nm: demangle] nm --demabgle \%# # FYI: c++filt
[nm: find all    -D] find . -name "\%#" -exec nm -AD {} \; 2>/dev/null #     include dynamic symbol table
[nm: find all no -D] find . -name "\%#" -exec nm -A  {} \; 2>/dev/null # not include dynamic symbol table

[awk args] awk -v var=\%# '{print var}'

[LD] LD_PRELOAD=\%#
[LD] LD_LIBRARY_PATH=\%#
[LD] LD_TRACE_LOADED_OBJECTS=1 \%#
[LD] LD_SHOW_AUXV=1 \%#
[LD] LD_DEBUG=help /bin/echo \%#
[LD_PRELOAD in mac] DYLD_FORCE_FLAT_NAMESPACE=1 DYLD_INSERT_LIBRARIES=\%# # there is no LD_PRELOAD in mac

[malloc free check] MALLOC_CHECK_=1\%# # 1:print stderr and continue, 2:abort

# root
[fakeroot] fakeroot

# man
[man ld] man ld.so!
[man ascii] man ascii!
[man seach] man -k \%#
[man shell builtin command] man n \%#

# grep
[grep without message] grep -sq \%#
[grep fixed string] grep -F \%# # no regex '$' -> '\$', '\' -> '\\'
[grep japanese (gnu grep)] grep -n -P '[\p{Hiragana}\p{Katakana}\p{Han}]'

# linux
[segmentation backtrace] catchsegv \%# # command
[segmentation backtrace] export LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so

[ltrace in mac] sudo dtrace -l \%#

[check PIE or not in linux] hardening-check \%#
[check PIE or not in mac] otool -hv \%#

[tput cols(terminal width)] tput cols
[tput lines(terminal height)] tput lines
[tput color list] echo "tput setaf <val>"; for ((i = 0; i <= 255; i++)); do printf "%s%03d " $(tput setaf $i) $i; done # echo $(tput setaf 1) RED $(tput sgr0) DEFAULT

[process tree hint for linux] ps x -o  "%p %r %y %x %c"
[pstree on ubuntu] ps -e f ww
[pstree with args ubuntu] ps -e f
[pstree on mac] pstree -p $(pgrep \%#) # with parent # brew install pstree
[kill process tree for ubuntu] kill -TERM -- $PID # how to find process: ps x -o "%p %r %y %x %c"
[kill process tree for mac] kill -TERM -- -$PID
[list process which use some lib for linux] ps $(sudo grep \%# /proc/*/maps | cut -d / -f 3 | sort -n | uniq | grep -v self)
[ubuntu process environment] strings /proc/$(pgrep \%#)/environ
[ubuntu process environment sudo] sudo strings /proc/$(pgrep \%#)/environ

# performance
[gprof: gmon.out call graph] gprof $EXEC_FILE_PATH\%# | gprof2dot | dot -Tsvg -o output.svg

# copy
[copy with progress] cp -v \%#
[copy] cp -R \%# # src/ dst/src # Do not use -r: symbolic link -> no symbolic link
[show copy progress] watch -n 0.1 progress -q

[restart xbindkeys] pkill xbindkeys && xbindkeys

# [bash \- How to solve the issue that a Terminal screen is messed up? \(usually after a resizing\) \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/61584/how-to-solve-the-issue-that-a-terminal-screen-is-messed-up-usually-after-a-res )
[fix terminal] stty sane; resize; reset

# nohup
[nohup] nohup \%# </dev/null &> $(echo $(mktemp) | tee $(tty)) &
[nohup] nohup \%# </dev/null 1>/dev/null 2>/dev/null &

# vmstat
[vmstat to csv] grep -v '^procs' | grep -v '^ r' | sed -E 's/ +/,/g' | sed -E 's/^,//g'

# image
[image convert extend] convert $IMAGE\%# -append -background none -gravity center -extent 320x320 $OUTPUT
[image resize] mogrify -resize 160x $IMAGE\%# # e.g. 160x or 160x160
[image white noise] convert -size 128x128 xc:gray +noise random -colorspace gray noise.png
[image black] convert -size 128x128 xc:black black.png
[image white] convert -size 128x128 xc:white white.png
# FYI: [linux \- How to view raw binary data as an image with given width and height? \- Super User]( https://superuser.com/questions/294270/how-to-view-raw-binary-data-as-an-image-with-given-width-and-height )
[image convert raw to png] find . -name "*\%#.raw" | xargs -L 1 -I{} convert -depth 8 -size 1024x1024+0 gray:{} {}.png
[image convert raw to png] find . -name "*\%#.raw" | parallel --no-notice -a - convert -depth 8 -size 1024x1024+0 gray:{} {}.png
[image convert png to raw] convert white.png -depth 8 -size 1000x1000 gray:white.raw
[image gen gif] convert -fuzz 10% -delay 1x8 *.png animation.gif
[image convert gif to png] convert -verbose -coalesce $IN.gif\%# $OUT.png
[image convert concat vertical] convert *.png\%# -append $OUT.png
[image convert concat horizontal] convert *.png\%# +append $OUT.png



[getconf 32 bits or 64 bits] getconf LONG_BIT

# glob examples
[glob without] ^\%#
[glob sub] *~\%# # multi ok: *~hoge~fuga
[glob mv all files except some dir] mv ^$DIR $DIR
[glob mv all files except some dir] mv *~$DIR $DIR

[hostname to ip] dig +short \%#

# argcheck
[argcheck bash] command echo -n \%#
[argcheck python3] python3 -c 'import sys; print(sys.argv[1:])' \%#
[argcheck python2] python2 -c 'import sys; print sys.argv[1:] ' \%#

[parallel] parallel --no-notice \%#

# cmds
[pup: Parsing HTML at the command line] pup

# cd
[cd symbolic link dst dir] cd -P \%#

# ar
# FYI: [linux \- How to merge two "ar" static libraries into one? \- Stack Overflow]( https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one )
[ar archive archives(libtool)] libtool -static -o $NEW.a\%# # archives... WARN: order of .o load order is important
[ar archive archives] ls *.a | xargs -L 1 ar -x ; ar -qc $NEW.a\%# *.o # non-safe use tmp dir WARN: order of .o load order is important

# FYI: [macOS Mojave の WiFi をコマンドからオン・オフする \- Qiita]( https://qiita.com/KEINOS/items/21c9ca07664a641620eb )
[wi-fi mac on] networksetup -setairportpower en0 on
[wi-fi mac off] networksetup -setairportpower en0 off
[wi-fi device name mac] networksetup -listallhardwareports | grep -A 1 "Wi-Fi" | grep '^Device:' | sed 's/^Device: //'
[wi-fi dhcp update mac] networksetup -setdhcp Wi-Fi

# dummy file
[dummy file : linux] fallocate -l \%# # 10(without B), 10K, 10M, 10G
[dummy file : mac] mkfile -v \%# # 10(without B), 10K, 10M, 10G

# vscode
[vscode install extension] code --install-extension \%#

# icon
[icon icns(mac) extract] iconutil --convert iconset \%#
[icon icns(mac) compress] iconutil --convert icns \%#
[icon ico(windows)] convert \%#.png -define icon:auto-resize icon.ico

[svg to pdf] rsvg-convert -f pdf -o test.pdf test.svg

[plantuml png] plantuml test.uml # test.png
[plantuml svg] plantuml -tsvg test.uml
[plantuml atxt] plantuml -ttxt test.uml # test.atxt
[plantuml utxt] plantuml -utxt test.uml # test.utxt
[plantuml pdf] plantuml -tpdf test.uml
[plantuml pdf] plantuml -tpdf test.uml && rsvg-convert -f pdf -o test.pdf test.svg
[plantuml html] plantuml -thtml test.uml

[binary editor] bed \%# # go get -u github.com/itchyny/bed/cmd/bed
[hexdump color] hexyl # cargo install hexyl

[is binary file] { file --mime \%# | grep -q "charset=binary"; }

[xmllint format check] xmllint --noout --valid \%#
[xmllint format output] xmllint --format \%# # use export XMLLINT_INDENT=" " to control indent
[xml tidy format output] tidy -xml -i -q \%#

# FYI:
# [Linux系OSにおいてディスクが読み込み専用\(readonly\)になりました。どう対処すればよいですか？ \| クラウド・エヌ・インフォメーション]( https://www.cloudn-service.com/faq/4028 )
# [リカバリーモードでrootユーザーなのにReadOnlyだと怒られる時の対処法 \- Qiita]( https://qiita.com/ironsand/items/f40581705a7bb402c01d )
[remount rootfs] mount -o rw,remount /

# csv
[csv2markdown] cat \%# | mdt # go get github.com/monochromegane/mdt/...
[csv2markdown] cat \%# | tty-table # npm install -g tty-table
[csv2markdown] csvtomd \%# # pip3 install csvtomd
[csv2svg] csv2svg \%# # go get -u github.com/umaumax/csv2svg/...

# yum
[yum whatprovides (search so dependency)] yum whatprovides \%#
[apt-get whatprovides (search so dependency)] dpkg -S $FILEPATH

# pkg-config
[pkg-config confirm opencv version] pkg-config --modversion opencv
[confirm opencv version] opencv_version

# dot graphviz
[dot graphviz gen] find . -name '*.dot' | xargs -L1 -I{} dot -Kdot -Tsvg "{}" "-o{}.svg"

# bash
[shell expand number] {0..9} # 0 1 ... 9
[shell expand number] {00..10} # 00 01 ... 09 10
[bash seq mkdir] for i in $DIR\%#_{00..9}; do mkdir ./$i; done # no zsh

# rust
[cargo install from github] cargo install --git $GIT_URL # e.g. https://github.com/jameysharp/static-ldd

[shared library search path] ldconfig -v 2>/dev/null | grep -v $'\t' | cut -d: -f1 | tr '\n' ':'

# fzf
[fzf without some word] echo '!some_word (e.g. !utest)'
