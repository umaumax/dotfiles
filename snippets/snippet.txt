# vim: set filetype=log :
# \%#: cursor
# \%$: \n

# find
[find exec snippet with md5sum or xargs] find . -name \%# | xargs -L1 md5sum
[find root without home/docker dir (ubuntu)] sudo find / \( -path "$HOME" -o -path '/var/lib/docker' -o -path '/tmp' -o -path '/proc' -o -path '/run' -o -path '/dev' -o -path '/opt' \) -prune -false -o -name '\%#'
[find root without home/docker dir    (mac)] sudo find / \( -path "$HOME" -o -path '/Library' -o -path '/System/Library' -o -path '/System/Volumes' -o -path '/private/var/folders' -o -path '/tmp'  -o -path '/private/tmp' -o -path '/proc' -o -path '/run' -o -path '/dev' \) -prune -false -o -name '\%#'
[find current dir] find . -name "\%#" -exec grep '' --color=auto -H -n {} +
[find root dir] sudo find / -name "\%#" -exec grep '' --color=auto -H -n {} +
[find grep exec option] -exec grep '\%#' --color=auto -H -n {} +
[find some ext file] find . -name "*.\%#"
[find Don't descend directories on other filesystems. option] -xdev
[find depth(BSD)] find . -depth 1 -type f
[find depth(common)] find . -mindepth 1 -maxdepth 1 -type f
[find size] find .\%# -size +1G -print
[find size] find .\%# -size +1G -exec ls -lh {} \;

[find remove empty directory] find . -type d -empty -delete
[find remove tu] find . \( -name "*.tu" -o -name "*.tu-[0-9a-zA-Z]*" \) -type f -ls -delete
[find remove core] find . -name "core.*" -type f -ls -delete
[find remove object/archives] find . \( -name "*.a" -o -name "*.so" -o -name "*.o" \) -type f -ls -delete
[find remove orig] find . -name "*.orig" -type f -ls -delete
[find remove .DS_Store] find . -name ".DS_Store" -type f -ls -delete

[find executable (mac)] find \%# -type f -perm +ugo+x -print
[find executable (linux)] find \%# -executable -type f

[find file object fils and archives] find . -name "*.a" -o -name "*.o" -exec file {} \;
[find extract files] $(find . -type f -mindepth 1 -maxdepth 1)
[find extract directories] $(find . -type f -mindepth 1 -maxdepth 1)

[find files that have been modified] sudo find / -mmin 60 -type f

[find only directory symbolic link at ubuntu] find . -type l -xtype d -ls

# grep
[grep for ps or with header output] { head -n 1; grep \%#; }
[color grep] grep -e '^' -e '\%#'
[grep unbuffer option] --line-buffered

# fg
[vim git modified] vim -p `git status -s | awk '{print $2}'`

# ubuntu
# ubuntu vim /etc files
[ubuntu hosts] vim /etc/hosts !
[ubuntu network/interfaces] vim /etc/network/interfaces !
[ubuntu resolv.conf] vim /etc/resolv.conf !
# ubuntu cd
[ubuntu GUI app autostart] cd ~/.config/autostart !
[ubuntu apps settings] cd /usr/share/applications !
# ubuntu network
[ubuntu network reboot] sudo service networking restart
[network reboot] sudo /etc/init.d/networking restart
[ubuntu ip flush] sudo ip addr flush
[ubuntu ip down up] NIC=\%# && sudo ifdown $NIC && sudo ifup $NIC
# ubuntu *.deb install
[ubuntu gdebi] sudo gdebi # e.g. sudo gdebi ./google-chrome-stable_current_amd64.deb
[extract deb file] ar x # xxx.deb
[ubuntu mdfind] locate # you need to run 'updatedb' command previously
# FYI: [https://www\.kernel\.org/doc/Documentation/sysctl/vm\.txt]( https://www.kernel.org/doc/Documentation/sysctl/vm.txt ) see at drop_caches
[ubuntu check drop file page cache size] free -m
[ubuntu drop file page cache] sync; sudo sh -c "echo \%# > /proc/sys/vm/drop_caches" # 1:pagecache, 2:reclaimable slab objects (includes dentries and inodes), 3:slab objects and pagecache
[check dirty page size] grep "Dirty" /proc/meminfo
[flush dirty page] sync # You can confirm by grep "Dirty" /proc/meminfo
[ubuntu screen recoder(movie capture)] kazam # for install: sudo apt-get install kazam

[lsusb mac] system_profiler SPUSBDataType
[lsusb tree] lsusb -t
[lsusb /dev/ttyUSB check] ls /dev/ttyUSB* | xargs -L 1 -I{} udevadm info --name={} | grep -e "DEVPATH.*" -e "ID_MODEL_FROM_DATABASE" -e "ID_MODEL_ID"  -e "ID_VENDOR_FROM_DATABASE" -e "ID_VENDOR_ID"; lsusb

# tar
# [untar 解凍(extract)  .tar.gz] tar zxvf \%# -C .
[untar 解凍(extract)  .tar.* ] tar  xvf \%# -C .
[tar 圧縮(compress) .tar.gz] tar zcvf \%# # [tar.gz] [dir]
[tar 圧縮(compress) .tar.  ] tar  cvf \%# # [.tar] [dir]
[tar 圧縮(compress) .tar.gz] DIRECTORY=\%# && tar zcvf $DIRECTORY.tar.gz $DIRECTORY
[tar 圧縮(compress) .tar   ] DIRECTORY=\%# && tar  cvf $DIRECTORY.tar    $DIRECTORY
# [findの結果をtarでアーカイブしたい \- 浦安市在住＋デジカメ]( https://fei-yen.jp/maya/wordpress/blog/2013/01/15/find%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92tar%E3%81%A7%E3%82%A2%E3%83%BC%E3%82%AB%E3%82%A4%E3%83%96%E3%81%97%E3%81%9F%E3%81%84/ )
[tar find print0 pipe to file] tar -cvz -T - --null -f \%#.tar.gz # use with find -print0 command for stdin
[tar find print0 pipe to pipe] tar -cvz -T - --null | \%# # use with find -print0 command for stdin
[tar find ssh] find \%# -print0 | tar -c -T - --null | ssh $host "tar -C $DIR -xv -"

[zip compress] zip -r \%# # [.zip] [dir]
[unzip at dir] unzip \%# -d $DIR
[zip unzip broken file] zip -FF $SRC\%# --output $DST

[IP address -> PID] netstat -p tcp | fzf | perl -nle '$_=~/\.([0-9]+)/;print $1;' | xargs -IXXX lsof -i:XXX

# size
## h: human readable
[file size(GUI)] ncdu # sudo apt-get install -y ncdu
[file size(CUI)] du -sh $(find . -maxdepth 1 -not -name '.')
# [file size] du -sh * # for zsh (setopt GLOB_DOTS)
# [file size for bash] du -sh *
# [file size for bash] du -sh .[^.]* * # both
[disk size] df -h
[confirm only root filesystem disk usage] df -h /
[disk size (only local mounted file)] df -hl

[list blocks with filesystem] lsblk -f
[check filesystem] dh -Th

# docker
[docker build] docker build -t $tag\%# .
[docker run] docker run --rm -it $tag\%# /bin/bash
[docker stty size] stty rows $(stty size | awk '{print $1}') cols $(stty size | awk '{print $2}') # run command at docker shell
[docker cp  host -> docker] docker cp $HOST_FILEPATH\%# $CONTAINER_ID:$GUEST_FILEPATH # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & docker側ではユーザ指定がないので~が使用できない
[docker cp docker ->  host] docker cp $CONTAINER_ID:$GUEST_FILEPATH $HOST_FILEPATH\%# # シンボリックリンクがそのままコピーされてしまう(use readlink or -L option) & docker側ではユーザ指定がないので~が使用できない
[docker force rebuild flag] --no-cache
[docker volume list] docker volume ls
[docker each container disk usage] docker system df -v
[docker cleaning] docker system prune
[docker container name xargs exec] docker ps --format "{{.Names}}" | xargs -L 1 -I{} bash -c "echo {}\%#"
[remote host docker exec list] docker ps; docker ps --format "{{.Names}}" | xargs -L1 -I{} echo docker exec -it {} bash
[docker ps format] docker ps --format "{{.Names}}"
[docker compose update(rebuild)] docker-compose build && docker-compose stop && docker-compose up # you can build at running containers
[docker info] docker inspect \%#
[docker root login option] -u root
[docker disk usage] sudo docker ps --format '{{.Names}}' | sudo xargs -L 1 -I{} docker exec {} bash -c "cd /home; echo {}; du -sh *"
[show docker container ip address] docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $INSTANCE_ID
[docker rename container] docker rename \%# # $SRC $DST # you can rename on running
[docker log] docker logs --timestamps $CONTAINER_ID
[docker mount dirpath] docker ps --format "{{.Names}}" | xargs -L 1 -I{} bash -c "echo {}; docker inspect -f '{{ .Mounts }}' {}"

# cmake
[cmake with clang-tidy] cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=*" ..
[cmake compile_commands] cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 # compile_commands.json
[cmake install preifx] cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/local
[cmake verbose] cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake compile_commands arg] -DCMAKE_EXPORT_COMPILE_COMMANDS=1
[cmake verbose arg] -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
[cmake auto create build dir & cmake] [[ $(basedirname $PWD) != "build" ]] && mkdir -p build && cd build; cmake ..
[cmake out of build dir] cmake -H. -Bbuild # -GNinja
[cmake out of build dir] cmake --build build/
[cmake find modules help] cmake --help-module \%# # use tab completion
[cmake find modules] cmake --help-module-list | grep -e '^Find' | sed 's/Find//'
[cmake confirm make install files] cmake -DCMAKE_INSTALL_PREFIX=$(mktemp -d install) .. # using by tmp dir way
[cmake gui tool(edit cache var)] ccmake # sudo apt-get install -y cmake-curses-gui
[cmake option list(text)] cmake -LA -N ..
[cmake option list(GUI)] ccmake ..
[cmake find_package debug] -DCMAKE_FIND_DEBUG_MODE=1 # 3.17~
[find installed files by make install by cmake] find . -name "install_manifest.txt" -exec grep '\%#' --color=auto -H -n {} +

# make
[make debug verbose] make VERBOSE=1 \%# # made by autotoools or cmake
[make debug verbose] make SHELL='sh -x' \%# # made by yourself
[make debug verbose] make --debug=j \%# # made by yourself
[make set -ex] make SHELL='sh -ex' \%# # made by yourself
## [makeの並列オプションは何を指定するべきか \- よーる]( http://lpha-z.hatenablog.com/entry/2018/12/30/231500 )
[make -j max cpu] make -j$(($(nproc --all)+1)) \%# # or simply only -j option
[make build and install with prefix]make -j$(nproc --all) prefix=$HOME/local && make install prefix=$HOME/local
[make variables debug] make -p -f/dev/null
[make good looking color output] make SHELL='sh -ex' \%# | ccze -A -o nolookups
# FYI: [linux \- How do you force a makefile to rebuild a target \- Stack Overflow]( https://stackoverflow.com/questions/816370/how-do-you-force-a-makefile-to-rebuild-a-target )
[make force phony] make -B \%## --always-make
[make dry-run] make -n \%# # -n=--dry-run

# ctest
# FYI: [cmake \- Can ctest display googletest console colors \- Stack Overflow]( https://stackoverflow.com/questions/34253579/can-ctest-display-googletest-console-colors )
# 強制的に色がつく(パイプしても色付き)
[ctest] GTEST_COLOR=yes ctest --output-on-failure
[ctest verbose] ctest -V # -VV, --debug
[ctest filter] ctest -V -R $REGEX
[ctest show tests list] ctest -N
[ctest gtest filter] GTEST_FILTER='TestCaseName\%#' ctest -V -R $TEST

# timeout
[timeout] timeout -sKILL # timeout -sKILL 5 bash -c 'while true; do date;sleep 1;done'

# git
[git init, add files, and commit] git init && git add -A -f . && git commit --no-verify
[git no verify option ] --no-verify
[git undo init commit] git update-ref -d HEAD
# [git commit] git commit -m '\%#'
[git push] git push -u origin master # normal push
[git push] git push -u --force origin master # force push
[git push dry-run] git push -n \%#
# [git push current branch] git push origin $(git rev-parse --abbrev-ref HEAD) # same local and remote name
[git push any local branch to any remote] git push origin $LOCAL_BRANCH:$REMOTE_BRANCH
[git push current local branch to remote] git push origin $(git symbolic-ref --short HEAD) # same local and remote name
[git pull current local branch] git pull origin $(git symbolic-ref --short HEAD)
[git push specific commit hash id] git push origin $COMMIT_SHA\%#:refs/heads/master
[git delete remote branch] git push --delete origin $branch_name
[git delete local branch] git branch --delete $branch_name # -D = --delete
[git staged file diff] git diff --cached # <file>
[git unstaged file diff] git diff
[git both staged and unstaged file diff] git diff HEAD
[git unstage file] git reset $FILE
[git unstage all] git reset
[git rename branch] git branch -m \%#
# [git 上のいろんなことをなかったことにする \- Qiita]( https://qiita.com/mdstoy/items/6de0aaa06dcd0cc46102 )
[git uncommit reset（編集内容はそのまま）] git log --pretty=oneline --abbrev-commit "HEAD^..HEAD" && git reset --soft "HEAD^" && git reset # to move commit to stash or easy to amend...
[git commit reset] git reset --soft "HEAD^"
[git amend reset] git reset --soft "HEAD@{1}" # WARN: use this comand just after wrong amend
[git merge reset] git reset --hard ORIG_HEAD
[git change old commit message with rebase] git-change-commit-message-rebase-peco # original command
[git split old commit message with rebase] git-split-commit-rebase-peco # original command
[git merge all conflict(adopt upper one)] git checkout --ours .
[git merge all conflict(adopt lower one)] git checkout --theirs .
[git merge retry all conflict] git checkout -m .
[git stash pop reset] git checkout --ours . && git reset && git checkout . # NOTE: git stash pop で content が起きたときにはstashはdropしない
[git stash list] git stash list
[git stash list src] git stash show "stash@{0}" -p
[git stash including with untrack files] git stash -u
[git stash force pop] git stash show -p | git -C $(git rev-parse --show-toplevel) apply
# WARN: git stash save is deprecated use git stash push -m
# FYI: [git stash \- Stashing only staged changes in git \- is it possible? \- Stack Overflow]( https://stackoverflow.com/questions/14759748/stashing-only-staged-changes-in-git-is-it-possible )
[git stash staged] git-stash-staged
[git stash not staged(unstaged)] git-stash-unstaged
[git clear staged file change] git -C $(git rev-parse --show-toplevel) apply <(git diff --staged -R) && git reset HEAD
[git clear unstaged file change] git -C $(git rev-parse --show-toplevel) apply <(git diff -R)
[git stash with name] git stash save "\%#"
[git stash with untracked-files] git stash save --include-untracked "\%#"
[git stash] git stash pop "stash@{\%#}"
[git stash interactive] git stash push --patch
[git stash pop with staged info] git stash pop --index
[git stash apply with staged info] git stash apply --index
[git stash specific files] git stash -- \%# # 2.13 or later
[git reset deleted files] git checkout HEAD -- \%# # <file>
[git force update of author and email for all commits] git filter-branch -f --env-filter "GIT_AUTHOR_NAME='"$(git config user.name)"'; GIT_AUTHOR_EMAIL='"$(git config user.email)"'; GIT_COMMITTER_NAME='"$(git config user.name)"'; GIT_COMMITTER_EMAIL='"$(git config user.email)"';" HEAD
[git show author(default) and commit date] git log --pretty=fuller
[git one line log] git log --oneline
[git change both date] git commit --amend --date="$(date)" # normal amend changes CommitDate only
[git change both date(old commit)] git-rebase-peco --ignore-date # original command
[git commit without hook (force commit)] git commit --no-verify
[git reload git hooks]  (cd $(git rev-parse --show-toplevel) >/dev/null 2>&1 && rm -rf ".git/hooks" && git init) # WARN: It's possible to delete local git hooks
[git first empty commit] git commit --allow-empty -m "first commit"
[git submodule init and update] git submodule update --init --recursive
[git submodule force add] git submodule add -f \%#
[git Another git process seems to be running in this repository...]  rm -f $(git rev-parse --show-toplevel)/.git/index.lock
[git tag to specific commit] git tag $TAG $COMMIT
[git tag delete (local)] git tag -d $TAG
[git tag delete (remote)] git push --delete origin $TAG # required: 'git tag -d $TAG' in advance
[git tag with message] git tag -a $TAG -m "$MESSAGE"
[git tag old to new] git tag --sort=taggerdate
[git latest named tag] git tag --sort=taggerdate | tail -n1
[git remote tag delete/remove] git push --delete origin $TAG
[git update tags] git fetch --force --tags
[git cat file(interactive)] git show HEAD:$(git ls-files -- $(git rev-parse --show-toplevel) | fzf -m 1)
[git cat specific commit] git show $TAG_OR_COMMIT:$FILEPATH # or use git cat
[git diff specific commit file] git show $COMMIT\%# -- $FILEPATH
[git get relative filepath] git ls-files -- $(git rev-parse --show-toplevel)
[git filtered file log] git log -p HEAD -- $RELPATH
[git filtered file log(interactive)] git log -p HEAD -- $(git ls-files -- $(git rev-parse --show-toplevel) | fzf -m)
[git keep] touch \%#.gitkeep
[git remove all git files and .git] echo 'cd $(git rev-parse --show-toplevel) && git ls-files | xargs git rm && rm -rf .git' !
[git root] git rev-parse --show-toplevel
[git checkout root]  git checkout $(git rev-parse --show-toplevel)
[git show head commit hash id] git show -s --format=%H
[git 間違えてmasterにcommit(1個)したので，他のブランチに移したい] git checkout master && git branch $NEW_BRANCH\%# && git reset --hard "HEAD~1"
[git grep example] git grep -E -e '(^|\s+)//' --and --not -e 'NOTE|TODO' -e '(^|\s+)#' --and --not -e 'NOTE|TODO' -- . ':!*.md'
[git man grep] man git-grep
[git man diff] man git-diff
[git grep submodule] git grep --recurse-submodules \%#
[git grep submodule peco vim] ggpv --recurse-submodules \%#
[git grep ext ok filter] git grep "\%#" -- '*.'
[git grep ext ng filter] git grep "\%#" -- ':!*.'
[git grep cpp ext filter] git grep "\%#" -- '*.cpp' '*.hpp' '*.c' "*.h" '*.cc' '*.cxx'
[git grep filename example] git grep -H "c++11" -- "*[Mm]akefile" # include and with hit line
[git grep filename example] git grep -L "c++11" -- "*[Mm]akefile" # not include
[git grep crossing over multiple repo] git xgrep \%# # my command
[git grep exclude long line(e.g. .min.js)] git grep -E -e '^.{,512}$' --and -e 
[git clone rename] git clone \%# $NEW_NAME
[git clone with submodule] git clone --recursive \%#
[git commit log grep(stat)] git log --stat -S "\%#" # add -m if yout want to include merge commit
[git commit log grep(diff)] git log -p -S "\%#" # add -m if yout want to include merge commit
[git commit log grep only deleted files] git log --diff-filter=D -S "\%#" # add -m if yout want to include merge commit
[git search deleted files] git log --diff-filter=D --summary '*/*\%#'
[git is commit hash?] git rev-parse --verify \%# >/dev/null 2>&1
[git repository local name] basename $(git rev-parse --show-toplevel)
[git repository remote name] basename $(git remote show origin -n | grep "Fetch URL:" | sed 's/.*://;s/.git$//')

[git list untracked files(includes ignored files)] git ls-files --other
[git list ignored files] git ls-files -io --exclude-standard

[git copy file/dir from another branch] git checkout \%# #$BRANCH $FILE_PATH

[git rebase interactive] git rebase -i HEAD~$NUM\%#
[git rebase continue] git rebase --continue
[git rebase change editor] export GIT_SEQUENCE_EDITOR=interactive-rebase-tool

[git overwrite another commit file] git checkout $COMMIT_HASH $REL_FILE_PATH
[git overwrite another branch file] git checkout $BRANCH_NAME $FILE_PATH_FROM_GIT_ROOT
[git show another commit file] git show $COMMIT_ID:$FILE_PATH_FROM_GIT_ROOT
[git show merge commit] git show -m 
[git only one commit log] COMMIT_ID=\%# && git log $COMMIT_ID...$COMMIT_ID~
[git diff number of lines] git diff --stat
[git diff stat with full filepath] git diff --stat=999 --color=always
[git diff from current branch] git diff $BRANCH\%# $REL_FILEPATH
[git diff between branches] git diff $OLD_BRANCH:$REL_FILEPATH $NEW_BRANCH:$REL_FILEPATH
[git diff grep] git diff -G \%#
[git diff staged] git diff --staged
# FYI: [version control \- How to see the changes in a Git commit? \- Stack Overflow]( https://stackoverflow.com/questions/17563726/how-to-see-the-changes-in-a-git-commit )
[git diff one commit] git diff "$COMMIT\%#^!"
[git diff one commit] git diff-tree -p $COMMIT\%#
[git vim diff files] git difftool --tool=vimdiff --no-prompt --trust-exit-code HEAD -- \%#
[git diff side-by-side] ydiff -s # pip3 install --upgrade ydiff

[git file edit log with patterns] git log --stat '*/\%#'

[git follow file (find some file at log)] git log --follow --find-renames=100% --stat $REL_FILE_PATH\%# # you can use dir path

[git commit-base diff like pull request] git log --no-merges # $pr_dst..$pr_src e.g. master..topic_branch

[git list ignored files] git ls-files --other --ignored --exclude-standard
[git remove untracked files and dirs] git clean -d --dry-run
[git remove untracked and ignored files and dirs] git clean -x -d --dry-run
[git remove only ignored files and dirs] git clean -X -d --dry-run
[git pull rebase master] git pull --rebase origin master
[git log without modified files] git log --stat --name-status | grep -v "^M" | less
[git log with marge commit diff] git log -p -m
[git log of specific function] git log -L :$FUNC_NAME\%#:$FILEPATH
[git relative modified files] git status -s | cut -c4-
[git status without untracked-files] git status --untracked-files=no
[git without cd] REPO_DIRPATH=$(realpath \%#) && git --git-dir "$REPO_DIRPATH/.git" -C "$REPO_DIRPATH" 

[git common root of master and current branch] git show-branch | tail -n1 | perl -nle '$_=~/\[([^[\]]+)\]/;print $1;'

[git discard staged changes in working directory] git checkout -- . # dangerous
[git fetch remote branches] git fetch –all
[git checkout remote branch as local] git checkout -t origin/\%#BRANCH_NAME # use git-checkout-local(gcl)

[git find detached commits] git fsck --lost-found

[git apply patch even it has conflict] git -C $(git rev-parse --show-toplevel) apply --3way \%#
[git apply dry-run] git -C $(git rev-parse --show-toplevel) apply --check \%#
[git apply patch stat] git -C $(git rev-parse --show-toplevel) apply --stat \%#
[git patch apply] git -C $(git rev-parse --show-toplevel) apply $PATCH_FILEPATH # <(p)
[git patch force] git -C $(git rev-parse --show-toplevel) apply --reject \%# # rejected file generates xxx.rej at same directory of the file
[git patch] cd $(git rev-parse --show-toplevel) && patch -p1
[git diff for patch command] git diff $FILE\%# > p1.patch # cat p1.patch | patch -p1

[git search commit from derived branch] git show-branch --merge-base master\%# HEAD
[git branch diff from derived branch] git diff $(git show-branch --merge-base master\%# HEAD) HEAD

[git sed] git sed "s/\%#//g"

[git dump tag with date] git tags # oreore command

[git check if the commit exists] $(git cat-file -t "$commit\%#") != "commit"

[git cat file] git cat-file -p HEAD:$FILE\%#

# WARN: return 'HEAD' on remote branch
# [git current branch name] git rev-parse --abbrev-ref HEAD
# [git current branch name] git name-rev --name-only HEAD --exclude 'tags*'
[git current branch name] git symbolic-ref --short HEAD
[git current tag name] git describe --tags
[git current commit id] git rev-parse HEAD # or git rev-parse --short HEAD or git show -s --format=%H
[git checkout local(create local branch)] git checkout -b $(git name-rev --name-only HEAD --exclude 'tags*' | sed 's:^remotes/origin/::' | sed -E 's/~.*$//') # use git-checkout-local(gcl)

[git find file] git ls-files "*\%#"

[git ls dirs] git ls-files | sed -e '/^[^\/]*$/d' -e 's/\/[^\/]*$//g' | awk '!a[$0]++'

[git clone only HEAD] git clone --depth 1 $URL

[git absfilepath to git relative path] git ls-files --full-name \%#
[git absfilepath to git relative path (from anywhere)] ABS_FILEPATH=\%# ;git -C $(dirname $ABS_FILEPATH) ls-files --full-name $ABS_FILEPATH
[git absfilepath to git repopath] git -C $(dirname $absfilepath\%#) rev-parse --show-toplevel
[git absfilepath show] ABS_FILEPATH=\%# ;git -C $(dirname $ABS_FILEPATH) show HEAD:$(basename $ABS_FILEPATH)

[git check remote branch exist] git show-ref --quiet --verify -- "refs/remotes/origin/\%#"

[git sed makefile example] git sed "s/\.a/\.so/g" "*/[m|M]akefile" # convert .a to .so

[git archive master] git archive master --format=zip --output=master.zip
[git local page] git instaweb --port=11111

[git xargs] git ls-files -z | xargs -0 -I{} echo {}

[git own author name] git config --get user.name
[git list all authors] git shortlog -s | cut -c8-

[git tag push] git push origin $TAG\%#
[git tag push(all)] git push origin --tags

[git amend unstage file] git rm --cached \%#

[git show diff codes with file filtering] git show $SHA\%# -p -- "*"

[git empty tree SHA] 4b825dc642cb6eb9a060e54bf8d69288fbee4904
[git empty tree SHA] git hash-object -t tree /dev/null

[git current HEAD format-patch] git format-patch -1
[git format-patch for am] git format-patch -o $DIR\%# $SHA_START..${SHA_END:-HEAD}
[git am for format-patch] git am *.patch
[git am for format-patch (same sha)] git am --committer-date-is-author-date *.patch
[git tmp copy repo step] echo 'SRC:git format-patch -> git diff, DST:git am, git apply'

[git get relative fullpath] git rev-parse --show-prefix \%# | tr -d '\n'
[git get relative rev fullpath] git rev-parse --show-cdup

[git copy local repo to local] git clone --local $SRC_DIRPATH $DST_DIRPATH
[git clone from local] git clone $LOCAL_GIT_DIRPATH # local xxx.git is obtained by using git clone --mirror

[git fetch grafted repo] git fetch --unshallow

[git public on web temporary] git instaweb -p 12345
[git public on web temporary] git webui --no-browser --port 12345

[git execute command on each commit when rebasing] git rebase HEAD~\%# --exec "ls"

[git get the number (count) of commits across all branches] git rev-list --all --count

[git log even if merge commits] git log --stat -c
[git log same format of stdout even if using pipe] log --pretty=oneline --decorate

[git overwrite remote url] git remote set-url origin \%#

[git simple file size search(HEAD)] git ls-tree -r -t -l --full-name HEAD | sort -n -k 4 | tail -n 10
[git find large files] GIT_FIND_BIG_N=10\%# git_find_big # see [Maintaining a Git Repository \- Atlassian Documentation]( https://confluence.atlassian.com/bitbucket/maintaining-a-git-repository-321848291.html )

[git checkout all remote branch to local] for branch in $(git branch -r --no-merged | grep -v HEAD | sed -e "s/origin\///"); do echo ${branch}; git checkout -b ${branch} origin/${branch}; done

[git config with url attr(subsection)] git config # section.subsection.name value # see https://git-scm.com/docs/git-config#_syntax
[git repo url] git@github.com:user/repo.git
[git repo url] ssh://git@github.com:22/user/repo.git

[git checkout -b at commit] git checkout -b $NEW_BRANCH\%# $COMMIT

[git is detached head or not] git rev-parse --abbrev-ref --symbolic-full-name HEAD # this gives me HEAD for a detached head, or the branch name on the other case.
[git retag(local/remote)] TAG=\%#; git tag --delete "$TAG" && git push --delete origin "$TAG" && git tag "$TAG" && git push origin "$TAG" # or use git retag

[git log my commit] git log --author="$(git config --get user.name)"
[git log my commit(all)] git log --all --author="$(git config --get user.name)"

[git no stage/unstaged files] git diff-index --quiet HEAD # untracked files are ignored
[git no stage/unstaged files] [ -z "$(git status --untracked-files=no --porcelain)" ] # untracked files are ignored
[git is clean status?] [ -z "$(git status --porcelain)" ] # includes untracked files
[git convert commit text to commit sha] git rev-parse --short "HEAD\%#"

[git tag dump with commit sha] git tag | grep "^\%#" | xargs -L 1 -I{} bash -c "git rev-parse --short {} | tr -d '\n'; echo :{};"

[git list branch includes specific commit] git branch --contains 
[git list tag includes specific commit] git tag --contains 

# hub
[show pull request] hub pr list
[create pull request with reviewer] hub pull-request --reviewer $USER_NAME1,$USER_NAME2 # WARN: don't use mail address

# tig
[tig file history] tig $FILE
[tig blame] tig blame $FILE
[tig stash] tig stash! # or press y
[tig commit log grep] tig -S"\%#"
[tig commit log grep] tig log -S"\%#"

# gerrit
[git gerrit review push certain branch] git push origin HEAD:refs/for/$BRANCH_NAME # without origin/
[git gerrit review push  master branch] git push origin HEAD:refs/for/master
[git gerrit review push  master branch (drafts)] git push origin HEAD:refs/drafts/master
[git gerrit base64 patch] cat \%# | { [[ $(uname) == "Darwin" ]] && base64 -D || base64 -d; } | (pushd $(git rev-parse --show-toplevel) >/dev/null 2>&1; patch -p1; popd >/dev/null 2>&1) # if mac use base64 -D

# github
[github user public key] curl -L https://github.com/$USER_NAME\%#.keys

# tree
# [tree by ls and sed] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
# FYI: [tree コマンドが無い環境で tree コマンドを実現 \- Qiita]( https://qiita.com/yone098\%#github/items/bba8a42de6b06e40983b )
[tree not found] pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'
[tree depth] tree -L $DEPTH
[any text to tree style] sort | forest # cargo install --git https://github.com/KoharaKazuya/forest

# shell one liner
[tab] $'\\t'
[ol get line number of pattern] awk '/\%#/{ print NR; exit }'
[ol tac] perl -e 'print reverse<>'
[ol cr2lf] sed "s/\r/\n/g"
[ol crlf2lf] td -d '\r'
[ol unix(lf) to windos crlf] sed -z "s/\n/\r\n/g"
[ol unix(lf) to windos crlf] perl -p -e 's/\n/\r\n/'
[ol ls -a without . and ..] ls -A
[ol ls -a without . and ..] ls -a | tail -n +3
[ol ls -a without . and ..] ls -a | grep -v -e '^.$' -e '^..$'
[ol show only non-unique(common/same item) lines] sort | uniq -d
[common line without sort] grep -Fxf $FILE1\%# $FILE2
[ol upper case only first character] awk '{print toupper(substr($1,1,1))substr($1,2)}'
[ol show only uniq lines] sort | uniq -u
[ol show only uniq lines] sort -u
[ol show n~ lines] tail -n +\%# # n行目以降
[ol filter only number] perl -pe 's/[^\d]*(\d+\.\d+|\d+)[^\d]*/ (0+$1)." " /ge; print "\n"' | awk 'NF' | sed -E 's/ $//g'
[ol compact space] sed -e 's/\s\+/ /g'
[ol line join with keyword] awk '{l=l (NR==1?"":"\%#") $0}END{print l}'
[ol join n-block line] awk -v n=\%# -v delim=":" 'NR%n!=1{printf "%s", delim;} {printf "%s", $0;} NR%n==0{printf "\n";}'
[ol sed template :] sed -e 's:\%#::g'
[ol sed template /] sed -e 's/\%#//g'
[ol join line with char] awk '{printf "%s\%#", $0}'
[ol join block to one line] awk '!/^$/{printf "%s", $0;} /^$/{print "";}'
[ol filter before and after line like grep -C ] awk -v base=\%# -v range= -v pre_line=0 '(pre_line+base-range)<=NR && NR<=(pre_line+base+range)' # if 'bat' assign pre_line=3
[ol awk sum] awk 's+=$0{}END{print s}' # NOTE: one line one number
[ol awk ave] awk 's+=$0{}END{print s/NR}' # NOTE: one line one number
[ol awk max] awk '{if(max<$0) max=$0} END{print max}'
[ol awk min] awk 'BEGIN{min="null"}{if(min=="null" || min>$0) min=$0} END{print min}'
[ol awk variance] awk '{d[NR]=$1;avg+=$1}END{a=avg/NR;for(i in d)s+=(d[i]-a)^2;print s/(NR-1)}'
[ol awk standard deviation] awk '{d[NR]=$1;avg+=$1}END{a=avg/NR;for(i in d)s+=(d[i]-a)^2;print sqrt(s/(NR-1))}'
[ol awk grep regex range] awk '/\%#/,//' # '/BEGIN_STRING/,/END_STRING/'
[ol awk display blocks between patterns] awk '/\%#/,//' # '/$start_pattern\%#/,/$stop_pattern/'
# [ソートしないで重複行を削除する \- Qiita]( https://qiita.com/arcizan/items/9cf19cd982fa65f87546 )
[ol awk uniq without sort] awk '!a[$0]++'
[ol perl uniq without sort] perl -ne 'print unless $count{$_}++'
[ol perl uniq -u without sort] perl -ne '$count{$_}++; $line_no{$_}=$.; END{foreach(sort{$line_no{$a}<=>${line_no{$b}}} keys %line_no){if ($count{$_}==1){print "$_";}}}'
[ol awk drop blank line] awk 'NF'
[ol awk RMSE] awk 'NF>=2{s+=($1-$2)*($1-$2);n++;} NF==1 || NF>2 {printf "[WARN] wrong format\n", $0;} function out(){rmse=sqrt(s/n);printf"RMSE of %d data=%f\n", n, rmse;s=0;n=0;} NF==0&&n>=1{out()} END{out()}'
[ol cut] cut -d' ' -f \%#
[ol awk cut] awk '{ print $\%#; }'
[ol awk last field] awk '{print $NF}'
[ol awk unbuffer] '{fflush()}'
[ol each N lines to one line] awk -v N=\%# '{printf "%s", $0; } (NR%N==0){print ""}'
[ol remove last blank line] perl -pe "chomp if eof"
[ol repeat text] printf '$TEXT\%#%.0s' {1..$N}
[ol grep mail address] grep -o -E "[-_a-zA-Z0-9\.+]+\%#[-a-zA-Z0-9\.]+"
[ol word count ranking] awk 'map[$0]++{} END{for(k in map){print map[k],k;}}' | sort -nr
[ol word count ranking] sort | uniq -c | sort -nr # this includes spaces

# random
[ol random texts ruby] ruby -e 'puts ((0..9).to_a + ("a".."z").to_a + ("A".."Z").to_a).sample((ARGV[0].nil?)?8:ARGV[0].to_i).join' # length
[ol random texts dev] LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 32\%#
[ol random texts dev] LC_CTYPE=C tr -dc A-Za-z0-9_\!\#\$\%\^\&\*\(\)-+=@ < /dev/urandom | head -c 32
[ol abspath] python2 -c 'import os; import sys; x=os.path.abspath(sys.argv[1]); print x' \%#
[ol abspath] python3 -c 'import os; import sys; x=os.path.abspath(sys.argv[1]); print(x)' \%#
# FYI: [zsh \- Portable way to get script's absolute path? \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/76505/portable-way-to-get-scripts-absolute-path )
[ol abspath] perl -MCwd -le 'for (@ARGV) { if ($p = Cwd::abs_path $_) { print $p; } }' \%#
[ol abspath(pipe)] perl -MCwd -ne 'if ($p = Cwd::abs_path $_) { print $p; }'
[ol shuffle lines] perl -MList::Util=shuffle -e 'print shuffle(<>)'
[ol median perl] perl -e'@lines = sort {$a <=> $b} <>; print $lines[int($#lines/2)]'
[ol median awk] sort | awk '{v[i++]=$1;}END {x=int((i+1)/2); if(x<(i+1)/2) print (v[x-1]+v[x])/2; else print v[x-1];}'
[ol hex] python3 -c 'import sys; [print(hex(int(v)).upper()) for v in list(sys.argv)[1:]]' \%#
[ol binary num] python3 -c 'import sys; [print(bin(int(v))) for v in list(sys.argv)[1:]]' \%#
[ol octal num] python3 -c 'import sys; [print(oct(int(v))) for v in list(sys.argv)[1:]]' \%#
[ol dump utf-8 args binary hex] python3 -c 'import sys; [print(bytes(v, encoding="utf-8")) for v in list(sys.argv)[1:]]' \%# # xargs bash -c 'echo -e $0'
[ol split by string(cut)] perl -ne '@col=split(/\%#/); print(join(",", @col[0,1,2..$#col]));'
[ol show one line as lines] sed -e 's/\s\+/ /g' | tr ' ' '\n'
[ol realpath] python3 -c 'import sys,os.path; [print(os.path.realpath(v)) for v in list(sys.argv)[1:]]'
[ol realpath get relative filepath] realpath --canonicalize-missing --no-symlinks --relative-to=$SRC\%# $DST
[ol realpath get absolute filepath] realpath --canonicalize-missing --no-symlinks --relative-base=$SRC\%# $DST
[clean relative filepath from current path (based on exist dirs/files)] ruby -e 'require "pathname"; puts Pathname.new(ARGV[0]).expand_path.relative_path_from(Pathname.new(Dir.pwd)).to_s' $EXIST_FILEPATH
[clean relative filepath from path of arg (based on exist dirs/files)] ruby -e 'require "pathname"; puts Pathname.new(ARGV[1]).expand_path.relative_path_from(Pathname.new(ARGV[0]).expand_path).to_s' $EXIST_BASEPATH $EXIST_FILEPATH
[clean file non-exist filepath ok] ruby -e 'require "pathname"; puts Pathname.new(ARGV[0]).cleanpath.to_s' $ANY_FILEPATH
# NOTE: eval echo $filepath: extract ~ to $HOME
[ol expand $HOME] perl -pe 's/(^~\/+)|(^~$)/$ENV{HOME}\/'

[time bomb at mac] sleep $(( $(gdate -d "\%#" "+%s") - $(gdate "+%s") )) && echo BOMB # 12:34, 01/23 12:34, 1 min, 1 day
[time bomb at ubuntu] sleep $(( $(date -d "\%#" "+%s") - $(date "+%s") )) && echo BOMB # 12:34, 01/23 12:34, 1 min, 1 day
[at job list] atq

[shuffle line] shuf
[shuffle args] ruby -e 'puts ARGV.shuffle.join(" ")'

# [ls sort version(number)] ls -v

[number of CPU] nproc --all # linux only

# g++
## g++ not clang++
[g++ pkg-config option] $(pkg-config --cflags \%#) $(pkg-config --libs \%#)
[g++ dynamic library] g++ -shared -fPIC -std=c++11 \%#
[g++ dynamic library flag] -shared -fPIC
[g++ dynamic malloc library flag] -shared -fPIC $SRC -ldl # for correct way to manage default --as-needed option undefined symbol: dlsym
[cpp c++11 verbose help] g++ -v --help
[gcc dump command log(dry run)] g++ '-###'
[c11] g++ -std=c++11 \%#
[cpp c++11 compile] g++ -std=c++11 \%#
[cpp c++11 compile] clang++ -std=c++11 \%#
[cpp c++11 compile ignore library order] -Wl,--no-as-needed
[cpp pch] PCH_HEADER=\%# && [[ -n $PCH_HEADER ]] && clang++ -Xclang -emit-pch -x c++-header -std=c++11 $PCH_HEADER -o $PCH_HEADER.pch
[cpp pch gen] CPPFILE=\%# && [[ -n $CPPFILE ]] && cat "$CPPFILE" | grep -E -o '^#include.*' > ".${CPPFILE%.*}.hpp" && echo ".${CPPFILE%.*}.hpp"
[cpp demangle] echo "\%#" | c++filt
[cpp demangle at dawrin] echo "\%#" | c++filt -n
[cpp c++11 compile shared library] g++ -std=c++11 -shared -fPIC \%#
[check compiled with -fPIC or not] readelf --relocs \%# | egrep '(GOT|PLT|JU?MP_SLOT)'
[g++ warning options] -Wall -Wextra -Wformat=2 -Wstrict-aliasing=2 -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wfloat-equal -Wpointer-arith -Wswitch-enum # by binary-hacks book
[g++ extract macro] TARGET_FILE=\%#; g++ -CC -E $TARGET_FILE | awk '/^# [0-9]*/ { FLAG=0; } /^# [0-9]* "'"$TARGET_FILE"'"/ { FLAG=1; } { if(FLAG) print $0;}'
[g++ asm] g++ -S -fno-asynchronous-unwind-tables -g \%# # -fno-asynchronous-unwind-tables: disable CFI directive
[g++ arch native] -march=native \%#
[32bit arm-linux-gnueabihf-g++] arm-linux-gnueabihf-g++ \%#
[alias 32bit arm-linux-gnueabihf-g++] alias g++=arm-linux-gnueabihf-g++ !
[64bit arm-linux-gnueabihf-g++] aarch64-linux-gnu-g++ \%#
[alias 64bit arm-linux-gnueabihf-g++] alias g++=aarch64-linux-gnu-g++ !
[g++ wrap start and end] -Wl,--start-group \%# -Wl,--end-group

[g++ macro defines] g++ -dM -E - < /dev/null | sort \%#
[g++ include header dir list] g++ -E -v - </dev/null
[g++ include header fullpath list] g++ -std=c++11 -H $CPP_FILEPATH
[clang dump] clang-check $SRC\%# -ast-dump -ast-dump-filter=main --
[g++ save temporary files] g++ -std=c++11 -save-temps=obj \%# # on Mac OS X: a.out,bc,ii,o,s


# rename
[find and rename] find . -name "\%#" | xargs -L1 -IXXX echo "mv -i XXX XXX" | vim -
[interactive rename tool] mmv \%# # go get github.com/itchyny/mmv/cmd/mmv

# line filter
[sed add header] sed '1i\%#'
[insert line to specific range line] sed -e '$START\%#,$ENDs/^/#/g' file # start from 1
[insert line(before) to specification pattern] sed -e '/$PATTERN/i\%#' file # space is ignored after i
[insert line(after)  to specification pattern] sed -e '/$PATTERN/a\%#' file # space is ignored after a
[sed line filter] sed -n $START\%#,${END}p # index starts with 1
[sed line filter] sed -n \%#P # only line (index starts with 1)
[sed (before) <= some line] sed -n '1,/\%#/p'
[sed (after)  >= some line] sed -n '/\%#/,$p'
[sed remove BOM UTF-8] sed "s|\xef\xbb\xbf||g"
[sed convert CR] tr '\n' $(echo -e "\x1E") | sed 's/'$(echo -e "\x1E")'/\\n/g'
[sed increment number example] seq 1 10\%# | sed -E 's/([0-9]+)/echo $((\1 + 1))/e' # you can exec shell command by e flag
[sed insert last line] sed -e '$ a $STR\%#' $FILE

# patch
[patch] echo 'git diff | c && cd $(git rev-parse --show-toplevel) && p | patch -p1' !
[patch] p\%# | patch -p1 # p is original clipboard paste command
[revert patch] cat \%# | patch -R

# http server
[python2 http server] python -m SimpleHTTPServer
[python3 http server] python3 -m http.server $PORT

# log
[realtime log viewer] tail -f

# mac
[mac free command (check memory usage)] vm_stat
[mac os version] sw_vers -productVersion
[brew clean cache] brew cleanup -s
[brew clean cache dry-run] brew cleanup -n
[check SIP status] csrutil status
[brew install local formula] brew install $FORMULA_FILEPATH
[brew install without tap] brew install $GIT_AUTHOR/$REPO_NAME/$FORMULA
[brew check prefix (filepath location)] brew --prefix 
[brew dependecy tree] brew deps --tree 
[brew list reverese dependecy(global)] brew use 
[brew list reverese dependecy(local)] brew use --installed
[brew tap list only] HOMEBREW_NO_AUTO_UPDATE=1 brew tap
[brew tap list with update] unset HOMEBREW_NO_AUTO_UPDATE; brew tap
[brew list tap formulas (without cask)] brew list --full-name | grep '.*/.*'
[brew list cask formulas] brew list --cask
[brew tap all formulas] brew tap-info --json $TAP\%# | jq -r '.[]|(.formula_names[],.cask_tokens[])'
[brew list upgradable formulas] brew outdated
[brew check unused forlumras] brew autoremove --dry-run
[brew installed formula version list] brew list --versions 

# linux
[ubuntu version] lsb_release -r -s
[linuxbrew clean cache] brew cleanup -s && rm -rf $HOME/.cache/Homebrew/
[linuxbrew formula dirpath] ~/.linuxbrew/Library/Taps/homebrew/homebrew-core/Formula

# export proxy
[proxy env] PROXY="\%#" && export http_proxy="$PROXY" && export https_proxy="$PROXY" && export HTTP_PROXY="$PROXY" && export HTTPS_PROXY="$PROXY"
[noproxy env] NO_PROXY="127.0.0.1,loacalhost\%#" && export no_proxy="$NO_PROXY" && export NO_PROXY="$no_proxy"

# rm
[rm files startwith '-' ] rm -- -
[rm files startwith '-' ] rm ./-
[rm avoid 10sec wait at zsh]  bash -c "rm -rf *\%#" # BE CAREFUL!!!!

# wc
[count japanese chars] wc -m
[count line] wc -l | awk '{print $1}'
[count line] grep -c '^'

# ssh key
[ssh id_rsa] ssh-keygen -C "" -t rsa -f \%#_id_rsa # -C: omit hostname comment
[ssh delete finger print] ssh-keygen -R $IP_ADDRESS
[ssh local port forwarding] ssh -N -f -L $local_port\%#:$dst_ip:$dst_port $host
[ssh remote port forwarding] ssh -N -f $from_remote_host -R $from_remote_port:$to_remote_ip:$to_remote_port
[ssh remote port forwarding example (run at remote host)] ssh -N -f $this_pc_ip_addr -R 10022:localhost:22 # reverse ssh tunnel(ssh remote_user\%#127.0.0.1 -p 10022)
[ssh avoid warning] ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \%#
[ssh print configuration] ssh -G $HOST
[sshfs mount] sshfs \%# # $REMOTE_HOST_AND_DIR $LOCAL_DIR
[sshfs mount read only] sshfs -o ro \%# # $REMOTE_HOST_AND_DIR $LOCAL_DIR
[sshuttle vpn] sshuttle -r \%# # 192.168.0.1/24
[ssh key finger print] ssh-keygen -E md5 -l -f \%#
[list ssh public key fingerprint] ls *.pub | xargs -L1 -I{} bash -c "printf '{} ' ; ssh-keygen -l -E md5 -f {} | awk 'NR>=2 {printf \"└──────────────────── \"} {print \$0}'" | column -t
[ssh run multi line command with arg] cat <<'EOF' | ssh localhost bash -s -- \%#\%$echo "$@"\%$EOF
[ssh permission] cd ~/.ssh; chmod 0700 .; chmod 0644 *.pub; chmod 0600 authorized_keys *id_rsa
[ssh search known_hosts] ssh-keygen -H -F $HOSTNAME
[get public key from private key] ssh-keygen -y -f $ID_RSA # chmod 0600 $ID_RSA
[remove key from ssh-agent] ssh-add -d <(ssh-add -L | cut -d" " -f1,2 | awk 'NR==\%#') # line:N?

[scp dir] command tar -C $SRC_DIR\%# -cf - . | ssh $HOST tar -C "$REMOTE_DST_DIR" -xvf - # SRC_DIR/* to REMOTE_DST_DIR/*
[scp between two remote hosts] scp -3 $SRC $DST # hoge:~/src.txt fuga:~/dst.txt
[rsync        ] rsync -auvzh $SRC_DIR \%# # set dst without dirname e.g. src ~/
[rsync dry-run] rsync -auvzhn $SRC_DIR \%# # set dst without dirname e.g. src ~/
[rsync        ] rsync -auvzh $SRC_DIR/ \%# # set dst with dirname e.g. src/ ~/dst
[rsync dry-run] rsync -auvzhn $SRC_DIR/ \%# # set dst with dirname e.g. src/ ~/dst
# [rsync: how can I configure it to create target directory on server? \- Stack Overflow]( https://stackoverflow.com/questions/1636889/rsync-how-can-i-configure-it-to-create-target-directory-on-server )
[rsync same dir] [[ -z $TARGET_HOST ]] && selhost; \%#rsync -auvzh --rsync-path="mkdir -p $(pwd) && rsync" . $TARGET_HOST:$(pwd)
[rsync cp only dir with    src dir] rsync -avz --include "*/" --exclude "*" $SRC  $DST
[rsync cp only dir without src dir] rsync -avz --include "*/" --exclude "*" $SRC/ $DST

# one liners
[args checker] python -c "import sys; print(sys.argv)" \%#

# python
[python list of python path] python -m site
[pip by python] python -m pip
[pip by python3] python3 -m pip
[pip upgrade] pip install --upgrade \%#
[pip list] pip freeze
[pip filelist] pip show -f \%#
[pip exec command filelist] pip show -f \%# | grep bin
[pip updatable package list] pip list -o
[pip3 error recover at ubuntu] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall
[pip install from github] pip install \%#/archive/master.tar.gz # https://github.com/$USER_NAME/$REPO_NAME/archive/master.tar.gz
[pip install from github] pip install git+\%# # http://github.com/user/repo.git
[pip Installing collected packages: UNKNOWN] pip install setuptools --upgrade
[pip show] pip show \%# # e.g. Location
[pip show with files] pip show -f \%#
[python venv] python -m venv $PROJECT_PATH\%#
[pip(2) recover] sudo python -m pip uninstall pip && sudo apt install python-pip --reinstall
[pip3 recover] sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall
[python3 test run test] python -m unittest discover tests # last arg is dirname
[python3 test run coverage] coverage run --source='.' --omit='*/tests/*' -m unittest discover tests # last arg is dirname
[python3 test report coverage] coverage report
[python3 test gen html report] coverage html
[python3 test color output] green # pip install green
[pip install with some version] pip install "$PACKAGE\%#==$VERSION"
[pip reinstall another version] pip uninstall "$PACKAGE\%#" && pip install "$PACKAGE==$VERSION"
[pip search cui (fullmatch)] pip search
[pip search gui] open "https://pypi.org/search/?q=\%#"
[python/pip version check] echo -n 'python :'; python --version; echo -n 'python2:'; python2 --version; echo -n 'python3:'; python3 --version; echo -n 'pip :'; pip --version; echo -n 'pip2:'; pip2 --version; echo -n 'pip3:'; pip3 --version !
[pip install from ithub subdir] pip install "git+ssh://git@github.com/$USER_NAME\%#/${REPO_NAME}.git#egg=$PACKAGE_NAME&subdirectory=$DIR_NAME"
[python dump sys path] python -c "import sys,pprint; pprint.pprint(sys.path)"
[remove pyenv form $PATH] export PATH=$(echo "$PATH" | python -c "import sys, re; print(':'.join(x for x in sys.stdin.read().strip().split(':') if not 'pyenv' in x))")

# network manager
[nmcli config files dir] /etc/NetworkManager/system-connections/
# FYI: [networking \- How to export and migrate NetworkManager settings to new system? \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/351005/how-to-export-and-migrate-networkmanager-settings-to-new-system )
[nmcli export settings] sudo cat /etc/NetworkManager/system-connections/* # there is no perfect export command
[nmcli connection] nmcli connection
[nmcli connection show] nmcli connection show
[nmcli device status] nmcli device status
[nmcli device show] nmcli device show
[nmcli general status] nmcli general status
[nmcli network reboot] echo "sudo nmcli networking off; sudo nmcli networking on" !
[nmcli network reboot] echo "sudo service network-manager restart" !
# [nmcli nic reboot] $CONNECTIONNAME=\%# && (sudo nmcli connection down $CONNECTION_NAME; sudo nmcli connection up $CONNECTION_NAME)
[nmcli nic reboot] sudo nmcli connection up $CONNECTION_NAME\%# # you can adopt setting only up command (without down)
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.route-metric 99 # permanent setting of route add default gw XXX
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes                 ipv4.dns ""
[nmcli modify ipv4] sudo nmcli connection modify "Wired connection \%#" ipv4.method manual ipv4.addresses x.x.x.x/24 connection.autoconnect yes ipv4.gateway "" ipv4.dns ""
[nmcli add device ] sudo nmcli connection add type ethernet ifname "$DEVICE_NAME" con-name "$CONNECTION_NAME"
[nmcli list unmanaged interfaces] nmcli d
[nmcli add gateway] sudo nmcli connection modify "Wired connection \%#" ipv4.gateway ""
[nmcil add dns    ] sudo nmcli connection modify "Wired connection \%#" ipv4.dns "137.153.66.28" # 空白区切りで複数指定可能
[nmcli set dhcp   ] sudo nmcli connection modify "Wired connection \%#" ipv4.method auto
[nmcli wi-fi info list] sudo nmcli d w
[nmcli remote dump] ssh \%# "nmcli device show"
[nmcli dump connection setting] sudo nmcli connection show "Wired connection \%#"
[nmcli dump full settings] nmcli c show --active | awk 'NR>1' | sed -E 's/ *[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}  .*$//' | xargs -L 1 -I{} bash -c 'nmcli c show "{}"; echo'
[nmcli gui like terminal user interface] nmtui

[ifconfig set ip address(temporary)] sudo ifconfig ethX\%# 192.168.1.100 netmask 255.255.255.0

[global ip] curl ifconfig.moe || curl ifconfig.io
[search 1000 ports(tcp)] nmap $IP_ADDRESS
[search port range(tcp)] nmap -p\%# $IP_ADDRESS # -p1-1024
[nmap ping scan (search ip address range)] nmap -sP 192.168.1.0/24
[search ip address range(arp)] nmap -sn 192.168.1.0/24
[ip address range to hostnames] nmap -sL \%# # 10.0.0.0/24
[ip address range ping] nmap -sn \%# # 10.0.0.0/24
[search ip address range by nbstat (NetBIOS)] sudo nmap -sU --script nbstat.nse -p137 '192.168.0.*'
[renew DHCP release] sudo dhclient -r; sudo dhclient

# id
[USER at Mac OS X] id -F
[USER] whoami
[UID] id -u
[GID] id -g

# curl
[curl with user-agent] curl -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.62 Safari/537.36' \%#
[curl json example] curl -X POST -H "Content-Type: application/json" -d '{"id":"1","name":"nameuser","age":"10"}'\%# $URL
[curl dump response header] curl --dump-header - $URL
[curl check SSL expire date] curl --verbose \%# 2>&1 | grep 'expire date'
[curl sh with arg] curl \%# | sh -s -- # args
[curl bash with arg] curl \%# | bash -s -- # args

# FYI: [ちょっとだけ便利なワンライナー集 \| bacchi\.me]( https://bacchi.me/linux/bash-oneliner/ )
[ssl check date] : | openssl s_client -connect \%#:443 2>/dev/null | openssl x509 -dates -noout

# dmesg
[dmesg with human readable time] dmesg -T \%#

# ufw
[ufw status] sudo ufw status verbose
[ufw reload] sudo ufw reload

# serial
[serial communication cu] sudo cu -l /dev/ttyUSB0 -s 115200\%#
[serial communication screen] sudo screen /dev/ttyUSB0 115200\%#
[show tty info for serial port] sudo stty -a -F /dev/ttyUSB0
[serial baudrate list] echo 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000, 256000

# screenshot of ubuntu
[ubuntu screenshot (all)] gnome-screenshot # PrintScreen
[ubuntu screenshot (area)] gnome-screenshot --area # Shift + PrintScreen
[ubuntu screenshot (window)] gnome-screenshot --window # Alt + PrintScreen
[ubuntu screenshot {delay} ] gnome-screenshot --delay=5
[ubuntu screenshot (area with delay)] sleep 3\%# && gnome-screenshot --area # both --area and --delay flag is forbidden
[screenshot] xwd -out /dev/stdout -root -display :0.0 | convert - screenshot.png
[screenshot] DISPLAY=:0 scrot my.png # sudo apt-get install -y scrot

# screen
[screen list  ] screen -ls
[screen attach] screen -r \%#
[screen run command] screen -dmS $tag $commands # don't surround command by ""
[screen run clip-share] [[ -z $TARGET_HOST ]] && selhost; \%#screen -dmS clip-share-$TARGET_HOST clip-share $TARGET_HOST # use selhost to set $TARGET_HOST
[get current screen session list] screen -ls | grep '^'$'\t' | awk '{print $1}'

# vim
[vim force save by sudo] :call feedkeys(":w !sudo tee > /dev/null %\<CR> :e!\<CR>", 'n') # use at vim cmdline
[vim open tmp file from pipe input] | { local tmpfile=$(mktemp).log; cat > $tmpfile; vim $tmpfile; } \%#

# mnt
[mount nfs] sudo mount -t nfs "$NFS_SERVER_IP:$NFS_DIR_PATH" $LOCAL_DIR_PATH # wrong fs type? ===> sudo apt-get install nfs-common
[mount cifs(samba?)] sudo mount -t cifs -o username=$USER $REMOTE_TARGET $LOCAL_DIR_PATH
[nfsd status] nfsstat -c
[confirm filetype of system] mount
[nfs setting file] /etc/exports
# FYI: [exportfsコマンド：exportsファイルでのNFSの設定を反映する \| Step On Board]( http://www.lesstep.jp/step_on_board/linux/1106/ )
[nfs update] sudo exportfs -ra
[nfs show] sudo exportfs -v

[disk partition list] fdisk -l

# read
[read] read -s sudo_pass

# ssh
[ssh sudo tar command which is alternative for sudo scp] [[ -z $sudo_pass ]] && echo "Remote Server Password:🔑" && read -s sudo_pass; [[ -n $sudo_pass ]] && ssh $host "echo $sudo_pass | sudo -p '' -S tar cvfz - $remote_dirpath" > $filename.tar.gz
[sshpass ssh] sshpass -p $PASSWORD\%# ssh $HOST
[sshpass scp] sshpass -p $PASSWORD\%# scp $HOST
[sshpass rsync] sshpass -p $PASSWORD\%# rsync $HOST
# [Run Remote ssh command with Full Login Shell \- Super User]( https://superuser.com/questions/306530/run-remote-ssh-command-with-full-login-shell )
[ssh run command with full login shell] ssh $HOST\%# -t 'bash -l -c "env"'

# compile
[gcc llvm-config] llvm-config --cxxflags --ldflags --libs --system-libs

# ffmpeg
[silent sound file] ffmpeg -ar 48000 -t 0:01:00 -f s16le -acodec pcm_s16le -ac 2 -i /dev/zero -acodec libmp3lame -aq 4 silent.mp3

# ubuntu for 32bit apps
[ubuntu 32bit] sudo dpkg --add-architecture i386 && sudo apt-get update && && sudo apt-get install -y gcc-multilib g++-multilib && sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386

# dpkg
[dpkg] dpkg -l
[apt pkg installed file list] dpkg -L $PACKAGE
[dpkg package name only] dpkg-query --show -f '${Package}\n'
[dpkg package size] dpkg-query --show -f '${Installed-Size}KB (${Package})\n'
[filepath to apt-get package reverse lookup] dpkg -S $FILEPATH # /usr/bin/nproc
# FYI: [software installation \- How can I check dependency list for a deb package \- Ask Ubuntu]( https://askubuntu.com/questions/80655/how-can-i-check-dependency-list-for-a-deb-package )
[apt-cache search] apt-cache search \%#
[apt-cache check dependency] apt-cache depends \%#
[apt-cache check dependency(detail)] apt-cache show \%# # with version
[dpkg check dependency] dpkg -I \%#

[ubuntu code name] lsb_release -cs # 16.04: xenial

[ubuntu usb rules directory] /etc/udev/rules.d

# so files
[so lib path search] ldconfig -p | grep $LIB_NAME

# sha
[hash sha256] shasum -a 256 \%#
[hash sha256 mac] gsha256sum \%#
[hash md5sum] md5sum \%#
[hash md5sum check] echo "$MD5SUM\%# $FILEPATH" | md5sum -c
[hash md5sum mac] gmd5sum \%#

# kernel
[load kernel module] insmod \%#.ko
[load kernel module (with dependency resolution)] modprobe \%#
[unload kernel] modprobe -r \%#
[kernel module list of fs] modprobe -lt fs
[list kernel module] lsmod
[lsmod depenency graph] lsmod | perl -e 'print "digraph \"lsmod\" {";<>;while(<>){@_=split/\s+/; print "\"$_\" -> \"$_[0]\"\n" for split/,/,$_[3]}print "}"' | dot -Tsvg > kernel-module-dependency.svg

# lsof
[lookup pid from filepath] lsof $FILEPATH
[lsof port to process] sudo lsof -i:\%#
[lsof port to PID] lsof -i :8080 | awk '{l=$2} END {print l}'
[fuser port to PID] fuser --namespace tcp 8080
[lsof listening ports] lsof -Pan -i tcp -i udp
[lsof port to process (kill)] sudo kill $(sudo lsof -t -i:\%#)
[lsof process name to ports] lsof -Pan -i tcp -i udp -c \%# | grep -v NAME | awk '{print $9;}' | cut -d':' -f2
[lsof process name to ports] pgrep \%# | xargs -L 1 lsof -Pan -i tcp -i udp -p | grep -v NAME | awk '{print $9;}' | cut -d':' -f2
[lsof open files by process] sudo lsof -p $PID
[fuser kill process from port] fuser -k 8000/tcp

[netstat process name to ports] netstat -anp | grep \%#

# proxy
[proxy npm] sudo -E npm install -g \%#
[proxy pip] sudo -E pip install \%#

# npm
[npm list package version] npm list -g --depth=0

# dns
[dns Google Public DNS] 8.8.8.8
[dns Google Public DNS] 8.8.4.4
[dns NTT America Technical Operations] 129.250.35.250
[dns NTT America Technical Operations] 129.250.35.251

[dns] dig
[dns(ip to hostname)] nslookup $TARGET $DNS_SERVER_OR_PROXY
[netstat] netstat antu

[ping NIC ] ping -I $NIC \%#

# apt-get
[apt-get install] sudo apt-get install \%#
[apt-get upgrade certain package only] sudo apt-get install \%# # don't use upgrade command
[apt-get upgradable package list] sudo apt list --upgradable # don't use apt-get
[apt-get error solution]  sudo rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock

[apt-get under proxy env] sudo -E apt-get install \%#
[apt-get under proxy env] sudo apt-get -o Acquire::http::proxy="${HTTP_PROXY:-$http_proxy}" install \%# # http_proxyがセットしてあればsudo -EでOK

[apt official repo source list file] /etc/apt/sources.list
[apt unofficial repo source list directory] /etc/apt/sources.list.d/

[apt-get remove ppa repo] sudo add-apt-repository --remove ppa:\%# # xxx/yyy
[apt-get installed ppa list] dpkg -l | grep -E "ppa[0-9]+"
[apt-get remove package] sudo apt-get remove \%#
[apt-get force reinstall repo] REPO=\%# && sudo apt-get remove -y $REPO && sudo apt-get install -y $REPO # for delete ppa and reinstall

[add update-alternatives   ] sudo update-alternatives --install $LINK_PATH $CONFIG_NAME $REAL_CMD_PATH $PRIORITY
[switch update-alternatives] sudo update-alternatives --config $CMD

[apt search specific file from remote apt-get packages] apt-file search # sudo apt-get install -y apt-file
[apt search specific file from local apt-get packages] dpkg-query --search "*/\%#"
[apt check dependency] apt-cache rdepends --installed $package

# at docker
[install lsof at docker] sudo apt-get install lsof

# sed
[sed delete end of line] sed -i '$d' $FILEPATH # for gsed
[sed add next line of regexp] sed -i -e '/$REGEX/a $ADD_LINE_STR' $FILAPTH
[sed add  pre line of regexp] sed -i -e '/$REGEX/i $ADD_LINE_STR' $FILAPTH
[fixed string replace (linux)] replace
[sed fixed string replace] rpl \%# # $OLD $NEW $FILE # sudo apt-get install rpl || brew install rpl
[sed fixed string replace] perl -ne 'BEGIN { $src = quotemeta(shift), $dst = shift } s/$src/$dst/; print $_' # $SRC $DST
[sed cut before] sed -E 's/^([^ ]+?( )+?){\%#}//'
# [Rubyやsedで複数行の文章を任意の箇所に挿入する \- grep Tips \*]( https://www.greptips.com/posts/1170/#%E5%88%A5%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%86%85%E5%AE%B9%E3%82%92sed%E3%81%A7%E6%8C%BF%E5%85%A5%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95 )
[sed insert text before n lines at last] FILE=\%# ;cat << 'EOF' | sed -i $(cat $FILE | awk 'END{ n=1; printf "%d",NR-n}')'r '"/dev/stdin" $FILE\%$\%$EOF
[sed dry run] sedry # https://github.com/umaumax/sedry

# json,yaml
[json to yaml one liner] ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'
[yaml to json one liner] python3 -c "import sys; import yaml; import json; print(json.dumps(yaml.load(sys.stdin.read()), indent=2))"
[yaml to inline yaml] json2yaml -d 1 <(yaml2json \%#.yaml) # npm install yamljs
# FYI: [unix \- How can I pretty\-print JSON in a shell script? \- Stack Overflow]( https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script )
[json format] cat \%# | jq .
[json format] cat \%# | python -m json.tool
[gron json grep] gron --colorize \%# | fzf

# jq
[jq slice at 1st] jq '.[:\%#]'
[jq slice at 2nd] jq '.[][:\%#]'

# ansible
[ansible man] ansible-doc

# time
[unix timestamp] date +%s
[unix timestamp with millsec(ubuntu)] date +%s%3N
[unix timestamp with millsec(mac)] gdate +%s%3N
[ubuntu date after or ago] date -d "+90\%# days"
[unixtime stamp to formatted date(ubuntu)] date --date "@\%#" '+%Y/%m/%d %H:%M:%S' # @ is needed
[unixtime stamp to formatted date(mac)] date -r "\%#" '+%Y/%m/%d %H:%M:%S' # with @ and without @ is ok
[mac date x hour ago] date -v -1H

# vagrant
[vagrant for proxy] vagrant plugin install vagrant-proxyconf
[vagrant ubuntu14.04 box download] vagrant box add ubuntu/trusty64
[vagrant ubuntu16.04 box download] vagrant box add ubuntu/xenial64
[vagrant init ubuntu14.04] vagrant init ubuntu/trusty64
[vagrant init ubuntu16.04] vagrant init ubuntu/xenial64
[vagrant up (run)] vagrant up
[vagrant ssh (connect, exec, attach)] vagrant ssh
[vagrant status] vagrant status
[vagrant stop] vagrant suspend
[vagrant force shutdown] vagrant halt
[vagrant ssh config] vagrant ssh-config > ssh.config
[vagrant scp] scp -F ssh.config $SRC_PATH\%# vagrant@default:$DST_PATH
[vagrant ssh] ssh -F ssh.config default
[add vagrant proxy setting] sed -i -e "/^end$/i \\  if Vagrant.has_plugin?("vagrant-proxyconf") && ENV['HTTP_PROXY']\n      puts '# - Proxy Setting ----------------------------------'\n      puts '# ' + ENV['HTTP_PROXY']\n      config.proxy.http     = ENV['HTTP_PROXY']\n      config.proxy.https    = ENV['HTTP_PROXY']\n      config.proxy.no_proxy = "localhost,127.0.0.1"\n      puts '# --------------------------------------------------'\n  end" Vagrantfile

# python
[python unittest] python -m unittest $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest verbose] python -m unittest -v $SCRIPT_NAME_WITHOUT_EXT.$TEST_CLASS_NAME
[python unittest recursively] python -m unittest discover
[python unittest recursively verbose] python -m unittest -v discover
[python touch init file] touch __init__.py

# ros
[ros kinetic source bash] source /opt/ros/kinetic/setup.bash # Wily(Ubuntu 15.10), Xenial(Ubuntu 16.04), Jessie(Debian 8)
[ros kinetic source zsh ] source /opt/ros/kinetic/setup.zsh
[ros init] mkdir -p ~/catkin_ws/src && cd ~/catkin_ws && catkin_make && cd src && echo "catkin_create_pkg!!"

[rosnode list] rosnode list
[rostopic list] rostopic list
[rostopic list] rostopic list -v
[rostopic list] rostopic list -p
[rostopic list] rostopic list -s
[rosparam] rosparam dump
[rostopic] rostopic info $TOPIC_OR_NODE
[rostopic] rostopic echo $TOPIC # /hoge/piyo
[rostopic] rostopic echo --noarr $TOPIC # for big topic output
[rostopic] rostopic hz $TOPIC
[ros node graph] rosrun rqt_graph rqt_graph
[ros tf tree GUI] rosrun rqt_tf_tree rqt_tf_tree
[ros tf tree pdf] rosrun tf view_frames
[ros tf echo] rosrun tf tf_echo $TF1 $TF2
[ros echo] rostopic echo /\%#
[ros 3d gui] rosrun rviz rviz # in docker use nvidia-docker1(not nvidia-docker2)
[ros console] rosrun rqt_console rqt_console
[ros show type] rostopic type /\%#
[ros show field of type] rosmsg show \%#
[ros show field of type] rostopic type /\%# | rosmsg show
[ros find] rospack find \%#
[ros ls] rosls \%#
[ros cd] roscd \%#
[ros cp] roscp \%#
[ros depends] rospack depends \%# # all nest
[ros depends1] rospack depends1 \%# # only nest 1
[ros publish] rostopic pub -1 /\%# $TYPE -- '{$KEY: $VAL}' # '{header: {seq: 0, stamp: now, frame_id:sample_id}, data: [], position: {x: 0.0, y: 0.0, z: 0.0}}'
[ros echo publish (pipe)] rostopic echo /\%# | rostopic pub /\%# $TYPE
[roscore daemon start by screen] pgrep roscore >/dev/null 2>&1 || screen -dmS "roscore" roscore
[roscore restart by screen] pkill roscore; screen -dmS "roscore" roscore

[rosbag] rosbag compresss
[rosbag] rosbag decompresss
[rosbag] rosbag filter
[rosbag] rosbag play
[rosbag save to file] rosbag record -O \%#.bag $TOPIC
[rosbag record all topic] rosbag record -a -O \%#.bag
[rosbag play with rename topic] rosbag play \%# $FROM_TOPIC:=$TO_TOPIC# from:=to
[rosbag csv] rostopic echo -b $BAG_FILEPATH -p /$TOPIC_NAME
[rosbag rqt_bag viewer] rqt_bag # <bag file>
# default is TERM signal
[rosbag timeout] timeout -sINT rosbag record -O \%# # xxx.bag /xxx/yyy
# [rosbag file cannot be made // \.bag\.active \- ROS Answers: Open Source Q&A Forum]( https://answers.ros.org/question/40116/rosbag-file-cannot-be-made-bagactive/ )
[rosbag fix] rosbag reindex *.bag.active && rosbag fix *.bag.active repaired.bag
[roslaunch output screen] roslaunch --screen \%#

[roslaunch file cat] bat -m '*.launch:XML' 

[ros catkin_create_pkg] catkin_create_pkg $PACKAGE_NAME pcl_conversions pcl_ros roscpp sensor_msgs # dependency packages...
[rostest run tests] catkin_make run_tests
[rostest build tests] catkin_make tests
[rostest check results] catkin_test_results # WARN: run at rosroot
[rostest check results verbose] catkin_test_results --verbose # WARN: run at rosroot
[rostest check results with color] catkin_test_results --verbose | bat -pp -l xml # WARN: run at rosroot
[catkin_make] catkin_make --pkg $PACKAGE_NAME
[catkin_make clean] catkin_make clean
[catkin_make install] catkin_make install
[catkin_make without tests] catkin_make -DCATKIN_ENABLE_TESTING=0
[catkin_make ignore building some package] catkin_make -DCATKIN_BLACKLIST_PACKAGES="foo;bar\%#"
[catkin build all clean] [[ -d src ]] && rm -rf build devel install || echo "\\033[0;31m"'here is not catkin workspace'"\\033[0m"

[ros info reload] rospack profile

# NOTE: 引数の数で判定している?
# rosrun tf static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms
# rosrun tf static_transform_publisher x y z qx qy qz qw    frame_id child_frame_id period_in_ms
[ros Fixed Frame map does not exist] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 $ROOT_FRAME $CHILD_FRAME 100 # /map /xxx
[ros tf sample] rosrun tf static_transform_publisher 0.0 0.0 0.0 0 0 0 base_link map 100

[roslog cat] cat $HOME/.ros/log/latest/
[roslog file] $HOME/.ros/log/
[rosclean] rosclean check
[rosclean] rosclean purge
# FYI: [ROS 複数台での通信時の問題点：clientからmasterへと情報送信できない \- Qiita]( https://qiita.com/ossyaritoori/items/b2336451583ce40d1b9a )
[ros set rosmaster on slave] pkill rosmaster; pkill roscore; export export ROS_IP=$SLAVE_IP_ADDRESS\%# && export ROS_HOSTNAME=$ROS_IP && && export ROS_MASTER_URI=http://$ROS_MASTER_HOSTNAME:11311/ # ROS_HOSTNAME is high priority over ROS_IP
# NOTE: default ROS_MASTER_URI is localhost (which has IP restriction)
[ros publish rosmaster on master] pkill rosmaster; export ROS_HOSTNAME=$IP_ADDRESS\%# && export ROS_MASTER_URI=http://$ROS_HOSTNAME:11311/; roscore # ROS_HOSTNAME is high priority over ROS_IP

[ros log] ~/.ros/log/latest/master.log
[ros log] ~/.ros/log/latest/$ROS_NODE_NAME\%#-1-stdout.log

# gitignore
# FYI: [gitignore\.ioのススメ \- Qiita]( https://qiita.com/dhun/items/adcae139b5ba1da56c81 )
[ros gitignore] curl -L http://www.gitignore.io/api/ros
[git repo local gitignore open] vim $(git rev-parse --show-toplevel)/.git/info/exclude !

[hex on bash command] $((0x\%#))
[10base to 16base] printf "%x" \%#
[show char code] hexdump -C \%#
[hexdump -C] od -t x1z -A x
[hexdump -C] hexly
[hexdump range] hexdump -C -s $((0x\%#)) -n $((0x100)) # -s:start, -n:length
[hexdump only hex value] hexdump -ve '16/1 "%.2x " "\n"'
[od range] od -tx1c -Ax --skip-bytes='0x\%#' --read-bytes='0x100'
[od next line] od -t x1c -A x
[file to c++ array] od -A n -v -t x1 \%# | awk -v var_name=data 'BEGIN{ printf("const unsigned char %s[] = {\n", var_name); } { for (i=1;i<NF;i++) printf("0x%s,", $i); print ""; } END{ print "};"; }'
[binary diff] cmp -l $FILE1\%# $FILE2 | gawk '{printf "%08X %02X %02X\n", $1, strtonum(0$2), strtonum(0$3)}'
[binary overwrite] printf '\\x31\\xc0\\xc3'\%# | dd of=$BIN_FILE bs=1 seek=$START count=$LENGTH conv=notrunc

[replace c2a0 to space (e.g. for tree)] sed "s/$(echo -e "\\xc2\\xa0")/ /g"

[tree show hidden file] tree -a -I "\\.git" \%#

# kill
[kill SIGKILL] sudo kill -KILL \%# # same meaning as sudo kill -9

# user
[add new user] NEW_USER=\%# && sudo adduser $NEW_USER
[add new sudo user] NEW_USER=\%# && sudo adduser $NEW_USER && sudo gpasswd -a $NEW_USER sudo
[join user to sudo group] sudo adduser $USER\%# sudo
[add group to user usermod] sudo usermod -aG $GROUP\%# $USER
[add group to user gpasswd] sudo gpasswd -a $USER $GROUP\%#
[add group to user adduser(ubuntu)] sudo adduser $USER $GROUP\%#
[create new group (ubuntu)] sudo addgroup $GROUP\%#
[group list] cat /etc/group

[list users with ldap user] getent passwd

# stdin/out/errr
[devnull stderr       ] 2>/dev/null \%#
[devnull stdout       ] >/dev/null \%#
[devnull stdout/stderr] >/dev/null 2>&1 \%#
[stderr > stdout      ] 2>&1 \%#
[stdout > stderr      ] 1>&2 \%#
[pipe stdout/stderr] 2>&1 | 
[pipe stdout/stderr] |& 
[other devnull way] >&-
[other devnull way with side effect] |:
# [linux \- Pipe only STDERR through a filter \- Stack Overflow]( https://stackoverflow.com/questions/3618078/pipe-only-stderr-through-a-filter )
[pipe only stderr] 3>&1 1>&2 2>&3 3>&- | \%# # in zsh run: setopt nomultios
# [shell \- IO Redirection \- Swapping stdout and stderr \- Stack Overflow]( https://stackoverflow.com/questions/13299317/io-redirection-swapping-stdout-and-stderr )
[swap stdout and stderr] 3>&2 2>&1 1>&3

# login shell
# you can check login shell easily by ssh localhost
## chsh: PAM authentication failed
## [Personal Memos: CHSHコマンドで失敗して]( https://takeshinho-24.blogspot.com/2011/04/chsh.html )
## > 現在のユーザのシェルをチェックして
## > 存在しないとchshを実行させないようになっているようです。
[login shell: set new zsh shell to /etc/shells] { cat /etc/shells | grep -q $(command which zsh); } || command which zsh | sudo tee -a /etc/shells
[login shell: set zsh as login shell] command which zsh >/dev/null 2>&1 && sudo chsh -s $(command which zsh) $(whoami)
[relogin zsh > bash] command which zsh >/dev/null 2>&1 && exec $(command which zsh) -l
[relogin] exec ${SHELL:-$0} -l # WARN same env
# really?
[clean relogin (completely)] sudo true && exec sudo su - $(whoami)

[fix perl local warning] sudo apt-get install -y locales && sudo locale-gen $LANG
[enable emoji] sudo apt-get install -y language-pack-ja && sudo update-locale LANG=ja_JP.UTF-8

[zsh function list] print -l ${(ok)functions}
[zsh key bind list] bindkey \%#
[zsh completion bug fix] rm -rf ~/.zcompdump ~/.zcompcache # HINT: command not found
[zsh completion fielpath search] echo $fpath | tr " " "\n" | xargs -L 1 -I{} find {} -name '\%#'
[zsh completion function reload] cmd_name=\%#; unfunction "_${cmd_name}" && autoload -U "_${cmd_name}"
[zsh completion reset] autoload -U compinit && compinit

# sudo
[enter root as user env] sudo su \%#
[enter root as root env] sudo su - \%#
[sudoable or not] sudo -n true >/dev/null 2>&1

# echo
[echo  x char] echo -e "\\x61\%#"
[echo unicode] echo -e "\\u2020\%#" # UCS-2
[echo unicode] echo -e "\\U0001F363\%#" # UCS-4

[unexport] unset \%# # remove export

[test x window system] xset q
[x window app install] sudo apt-get install -y x11-apps

# crontab
[crontab confirm] crontab -l
[crontab edit] crontab -e
[crontab update file] crontab $FILEPATH
[crontab visualization] crontab -l | cronv -w 200 -d 24h # go get -u github.com/takumakanari/cronv/...

# direnv
[direnv allow] direnv allow
[reload .envrc] direnv allow
[direnv file] touch .envrc

# vim
[vim init cmake] vim CMakeLists.txt
[vim init docker file] vim Dockerfile
[vim init README.md] vim README.md

# shell tips
[get shell name] $(basename ${0##-}) # (ok:bash/zsh/sh, ng:fish/csh)
# PS1='\[\e[1;33m\]\u\%#\h \w ->\n\[\e[1;36m\]\$\[\e[m\] '
[echo bash PS1 example] echo -n "PS1="; echo J1xbXGVbMTszM21cXVx1QFxoIFx3IC0+XG5cW1xlWzE7MzZtXF1cJFxbXGVbbVxdICc= | python -c "import base64; import sys; sys.stdout.write(base64.b64decode(sys.stdin.read()).decode('utf-8'))" !
[bash version check] echo $BASH_VERSION # or use $BASH_VERSINFO
[bash template enigne] envsubst
[bash environment variable list] bash -c 'for char in {A..Z} ; do vars=($(eval echo \$\{\!${char}*\})) ; echo "${char}: (${#vars[*]}) ${vars[*]}" ; done'

# cpp environment variables
[cpp include file path] export CPATH="\%#:$CPATH"
[cpp library file path] export LIBRARY_PATH="\%#:$LIBRARY_PATH"

# network
[show arp table] arp -a # same network? ip addr and MAC address pair list
[realtime network conmmunication] sudo env PATH="$PATH" bandwhich # cargo install bandwhich
[port bind address/port check] ss -antu

# compile_commands.json
[list -I dirs] cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\n' ':'
[add -I dirs list to CPATH] export CPATH="$(cat compile_commands.json| grep -o "\-I[^ ]*" | sort | uniq | sed 's/^-I//' | tr '\n' ':'):$CPATH"
[add header information to compile_commands.json] compdb list > ../compile_commands.json

# dev usb
[dev usb0] /dev/ttyUSB0
[dev usb1] /dev/ttyUSB1
[dev usb2] /dev/ttyUSB2
[dev usb3] /dev/ttyUSB3

# tags
[rtags: run rdm server by screen] pgrep rdm >/dev/null 2>&1 || screen -dmS "rdm" rdm
[rtags: register build dir for rtags] pgrep rdm >/dev/null 2>&1 || (screen -dmS "rdm" rdm && sleep 0.2); rc -J .

[webcatd run by screen] pgrep gotty >/dev/null 2>&1 || screen -dmS "webcatd" webcatd
[any command run by screen] CMD=\%# && pgrep "$CMD" >/dev/null 2>&1 || screen -dmS "$CMD" $CMD

# shell
[extract filepath ~] sed "s:^~:$HOME:g"
[single quote] '"'"'
[get command filepath] which -p \%#
[get other user's home dir] ~\%# # e.g. ~root
[get set options] $- # e.g. you can see set -x or +x and other options

# date
[mac date] date +'%Y-%m-%d %H:%M:%S'
[date for log] date +'%Y-%m-%d-%H-%M-%S'

[mac logger] logger 'hello world'
[mac cat log] log show --style syslog --predicate 'processImagePath endswith "logger"' --start $(date +"%Y-%m-%d")
[mac hardware info] system_profiler SPHardwareDataType
[mac cpu core info] sysctl -a | egrep -e "hw.ncpu*|hw.activecpu*|hw.logicalcpu*|hw.physicalcpu*" # or sysctl -n hw.ncpu
[python cpu core info] python -c 'import multiprocessing as m; print(m.cpu_count());' # with hyper threads
[linux cat log] cat /var/log/messages
[show syslog] cat /var/log/syslog
[syslog force rotate manually] sudo logrotate -f /etc/logrotate.conf

[ubuntu mother board info (hint for machine model or maker)] sudo dmidecode -t baseboard
[ubuntu memory info] sudo dmidecode -t memory
[ubuntu memory info] sudo lshw -class memory
[ubuntu memory info] cat /proc/meminfo
[ubuntu buddy memory info] awk 'BEGIN{printf "%21s",""; v=4; for(i=0;i<15;i++) {if(v<1024){printf "%5dKB",v}else{printf "%5dMB",v/1024}; v*=2}; printf"\n"}'; cat /proc/buddyinfo
[ubuntu cpu info] cat /proc/cpuinfo
[ubuntu gpu info] lspci | grep VGA
[ubuntu nvidia gpu info] nvidia-smi
[ubuntu partition info] sudo parted -l
[ubuntu block device info] lsblk # you can use without sudo
[ubuntu network device info] lspci | grep Ethernet
[ubuntu network device info] sudo lshw -class network
[ubuntu hardware info] sudo lshw
[ubuntu disk info] sudo lshw -c disk
[ubuntu disk read/write speed performance check] sudo hdparm -Tt /dev/sda
# e.g.
# /dev/sda:
#  Timing cached reads:   27416 MB in  1.99 seconds = 13761.56 MB/sec
#  Timing buffered disk reads: 600 MB in  3.00 seconds = 199.80 MB/sec

# [linux \- How to know if a disk is an SSD or an HDD \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/65595/how-to-know-if-a-disk-is-an-ssd-or-an-hdd )
[hdd or ssd at linux] for name in $(ls /sys/block); do\%$ echo -n "$name is "\%$ echo 'SSD HDD' | cut -d" " -f$(($(cat /sys/block/$name/queue/rotational) + 1))\%$done

[confirm zsh cached comand type] builtin which \%#

# font
[confirm fonts list at ubuntu(mac)] fc-list
[pygame font] python3 -c 'import pygame; print(pygame.font.get_fonts())'
[update fonts at ubuntu] fc-cache -f -v

[how to know image size] file
[how to know image size] identify

# [bash \- Removing a newline character at the end of a file \- Stack Overflow]( https://stackoverflow.com/questions/16365155/removing-a-newline-character-at-the-end-of-a-file )
[removing a newline character at the end of a file] perl -0pe 's/\n\Z//'

[encrypt text with password] echo "$TEXT" | openssl enc -e -aes-256-cbc -base64 -k $PASSWORD
[decrypt text with password] openssl enc -d -aes-256-cbc -base64 -k $PASSWORD

[mac volume path] cd /Volumes/
[mac disk unmount] diskutil unmount /Volumes/$DISK_NAME
# iso to usb(disk)
[0. mac disk list] diskutil list
[1. mac disk format] echo 'diskutil eraseDisk MS-DOS UNTITLED /dev/disk2'
[2. mac disk unmount] diskutil unmountDisk /dev/disk2
[3. mac iso to disk] echo 'sudo dd if=xxx.iso of=/dev/disk2 bs=2m'
[4. mac disk eject] diskutil eject /dev/disk2
[mac check dd progress] sudo pkill -INFO "^dd"
[ubuntu check dd progress?] sudo pkill -USR1 "^dd"

[iso usb image ubuntu] usb-creator-gtk # sudo apt-get install usb-creator-gtk

# base64
[mac base64 encode] base64 \%#
[mac base64 decode] base64 -D \%#
[ubuntu base64 encode] base64 -w 0 \%#
[ubuntu base64 decode] base64 -d \%#
[common base64 encode] { [[ $(uname) == "Darwin" ]] && base64 || base64 -w; } \%#
[common base64 decode] { [[ $(uname) == "Darwin" ]] && base64 -D || base64 -d; } \%#
[python base64 encode] python -c "import base64; import sys; x = base64.b64encode(sys.stdin.read() if sys.version_info[0] < 3 else sys.stdin.buffer.read()); sys.stdout.write(x) if sys.version_info[0] < 3 else sys.stdout.buffer.write(x)"
[python base64 decode] python -c "import base64; import sys; x = base64.b64decode(sys.stdin.read()); sys.stdout.write(x) if sys.version_info[0] < 3 else sys.stdout.buffer.write(x)"

[python binary stdin.read()] sys.stdin.read() if sys.version_info[0]<3 else sys.stdin.buffer.read()
[python version branch ? :] $PY2 if sys.version_info[0]<3 else $PY3

[ubuntu disk unmount] sudo umount /dev/sdb?

[ubuntu japanese home dirs to english] LANG=C xdg-user-dirs-gtk-update

[xdotool text] xdotool type "hello"
[xdotool tab] xdotool key Tab # xdotool type "$(echo -e "\x09")"
[xdotool enter] xdotool key Return

[login message] figlet 'Hello Underworld!' | sand "$YELLOW" | text_center | sudo tee /etc/motd # my original command is included

[mac You have new mail.] mail

[filter file by < size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size -1M\%#
[filter file by > size] xargs -L 1 -IXXX find XXX -type f -maxdepth 1 -size +1M\%#

[shutdown] sudo shutdown -h now

# ninja
[ninja parallel build] ninija -j\%#
[ninja build] ninja
[ninja clean] ninja -t clean
[ninja build.ninja file] touch build.ninja
[ninja compile_commands.json] ninja -t compdb $RULE_NAMES # e.g. app obj lib

[version python] python --version
[version go] go version
[version tmux] tmux -V
[version zsh] zsh --version
[version bash] bash --version
[version screen] screen -v
[version vim] vim -v
[version sed] sed --version
[version git] git --version

# lzz
# space + `#` -> parse as comment
# 'hogehoge''piyopiyo' -> "hogehoge'piyopiyo"
# 'hogehoge'""'piyopiyo' -> "hogehogepiyopiyo"
[c++ split hpp to cpp: lzz .hpp to .lzz] FILENAME=\%# && cat $FILENAME | sed -e '/^#include/i '""'#hdr' | sed -e '/^#include/a '""'#end' | tee ${FILENAME%.*}.lzz # do lzz <lzz filepath> -> xxx.cpp xxx.h
[lzz] lzz $LZZFILE\%# # gen xxx.cpp xxx.h NOTE: overwrite

# clang-format
[clang-format replace file] clang-format -i $FILEPATH
[clang-format all (find)] find . \( -name "*.c" -o -name "*.cc" -o -name "*.cpp" -o -name "*.cxx" -o -name "*.h" -o -name "*.hpp" \) -print0 | xargs -0 -L 1 -I{} bash -cx "clang-format -i '{}'"
[clang-format all (git)] git ls-files -z -- ':*.cpp' ':*.hpp' ':*.cxx' ':*.cc' ':*.c' ':*.h' | xargs -0 -L 1 -I{} bash -cx "clang-format -i '{}'"

# bash
[shell var regexp] ${FILEPATH\%#%./} # dirname(dirpath)
[shell var regexp] ${FILEPATH\%#%.*} # without ext
[shell var regexp] ${FILEPATH\%###*/} # basename
[shell var regexp] ${FILEPATH\%###*.} # ext
[shell max] $((\%# > 0 ?  : 0)) # e.g. $((JOBS>4 ? JOBS : 4))
[shell min] $((\%# < 0 ?  : 0)) # e.g. $((JOBS<8 ? JOBS : 8))
[shell max] sort -rg | head -n1
[shell min] sort -g | head -n1
[shell array slice] ${array[@]:\%#} # ${array[@]:1}
[sehll reverse array print] echo "${array\%#[@]}" | rev # WARN: more than 1 length required

# [How to run a program in a clean environment in bash? \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/48994/how-to-run-a-program-in-a-clean-environment-in-bash )
[maybe clean bash login] env -i bash -l # no HOME, DISPLAY
[maybe cleanest bash login] env -i bash --noprofile --norc # no HOME, DISPLAY
[complete relogin] su -l $(whoami)
[complete relogin  zsh(linux)] su $(whoami) -s $(which zsh)
[complete relogin bash(linux)] su $(whoami) -s $(which bash)
[clean login(mac)] login -p -f $USER
[clean login(ubuntu)] sudo bash -c "exec -l login -p -f $USER" # need sudo

# diff
[diff ignore space(blank)] diff -b \%#
[diff directory] diff -r \%# # DIR_A DIR_B
[diff directory only filepath] diff -rq \%# # DIR_A DIR_B
[diff multifiles] diff --from-file=$SRC\%# $FILE1 $FILE2 # don't use process substitution at --from-file
## FYI: [How to get diff working like git\-diff? \- Stack Overflow]( https://stackoverflow.com/questions/4857310/how-to-get-diff-working-like-git-diff )
[git style diff at out of repo] git diff --no-index -- \%#
[diff for patch file] command diff -up $SRC_FILE\%# $DST_FILE
[gron json diff] diff <(gron \%#) <(gron ) # go get -u github.com/tomnomnom/gron
[jsondiffpatch json diff] jsondiffpatch \%# # npm install -g jsondiffpatch
[diff only new line] diff -c $SRC_FILE\%# $DST_FILE | grep '^+'
# mainly for cat /proc/interrupts files
[diff between number] paste -d ' ' $SRC\%# $DST | awk -F' ' 'BEGIN{w=16} {for(i=1;i<=NF/2;i++){ a=$i; b=$(i+NF/2); if (a ~ /^[0-9]+$/ && b ~ /^[0-9]+$/) {printf("%"w"s", sprintf("%+d(%s)", int(b)-int(a), int(a)!=0?sprintf("%.1f%%", (int(b)-int(a))/int(a)*100.0):"-"))} else {printf("%"w"s", a)}; printf " " }; printf "\n"}' | grep '+[1-9][0-9]*'
[diff with zsh process substitution] # use =() instead of <()
[diff yaml or json] dyff between --omit-header # go get github.com/homeport/dyff/cmd/dyff
[git diff to html] git diff | diff2html --input stdin --output stdout --style side > diff.html # npm install -g diff2html-cli
[unified diff to html] command diff -u $SRC\%# $DST | diff2html --input stdin --output stdout --style side > diff.html # npm install -g diff2html-cli
[diff to  svg] diff -u $SRC\%# $DST | delta --no-gitconfig --24-bit-color=always --side-by-side --width $COLUMNS | ansitoimg diff.svg
[diff to  png] diff -u $SRC\%# $DST | delta --no-gitconfig --24-bit-color=always --side-by-side --width $COLUMNS | ansitoimg -p raster diff.png
[diff to html] diff -u $SRC\%# $DST | delta --no-gitconfig --24-bit-color=always --side-by-side --width $COLUMNS | ansitoimg -p html diff.html
[word diff] git diff --word-diff --no-index -- \%#

[source code to  svg] bat --color=always \%# | ansitoimg code.svg
[source code to  png] bat --color=always \%# | ansitoimg -p raster code.png
[source code to html] bat --color=always \%# | ansitoimg -p html code.html

# mac
[mac sshpass install] brew install http://git.io/sshpass.rb
[brew switch version] brew switch $formula\%# $version

# heredoc
[heredoc to filename] cat > $FILEPATH\%# << 'EOF'
[heredoc to filename] cat << 'EOF' > $FILEPATH\%#
[heredoc to pipe] cat << 'EOF' | \%#
[heredoc with git diff apply] cat << 'EOF' | git -C $(git rev-parse --show-toplevel) apply # paste git diff result and type EOR and enter
[string to pipe input] <<<"\%#"

[linux: check shared lib path objdump -p] objdump -p \%# # readelf -d

# nkf
[nkf guess] nkf -g \%#
[nkf auto conv] nkf -w \%#
[nkf add UTF-8 BOM] nkf --oc=UTF-8-BOM
[nkf add UTF-8 BOM] nkf --oc=UTF-8-BOM --overwrite 
[nkf drop(remove,delete) UTF-8 BOM] nkf --oc=UTF-8
[nkf drop(remove,delete) UTF-8 BOM] nkf --oc=UTF-8 --overwrite 
[nkf zenkaku to hankaku] nkf -Z

# symbolic link
[ln symbolic link file      overwrite] ln -sf $LINK_FILE_DST $LINK_FILE_SRC
[ln symbolic link directory overwrite] ln -sfn $LINK_DIR_DST $LINK_DIR_SRC
[traverse symbolic link at ubuntu] namei \%#
[check symbolic link] for src in $(find .\%# -type l); do if [ -e "$src" ]; then printf 'OK'; else printf 'NG'; fi; printf ': %s -> %s\n' "$src" "$(readlink "$src")"; done # for busybox ls command
[check symbolic link(sudo)] for src in $(sudo find .\%# -type l); do if [ -e "$src" ]; then printf 'OK'; else printf 'NG'; fi; printf ': %s -> %s\n' "$src" "$(sudo readlink "$src")"; done

# time
# [shell \- How can I redirect the output of the "time" command? \- Stack Overflow]( https://stackoverflow.com/questions/2408981/how-can-i-redirect-the-output-of-the-time-command )
[time command redirect tips] (time \%#) # |& tee $FILEPATH
[time command redirect tips] {time \%#} # |& tee $FILEPATH
[time verbose log (mac)] /usr/bin/time -l 
[time verbose log (linux)] /usr/bin/time -v 
[time /usr/bin/time] command time \%# # or \time or 'time'
[time /usr/bin/time json] /usr/bin/time -f "{\"maxrss\":%M}" -o out.json \%#

# unbuffer command
# [shell \- Turn off buffering in pipe \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe )
[unbuffer command] unbuffer \%#
[unbuffer command] script -c "$COMMAND\%#" /dev/null # |& tee $FILEPATH

# gdb
[gdb bind process] gdb -p $PID # bt detach quit
[gdb with args] gdb --args # [exec command] [args...]
[gdb without loading .gdbinit] gdb -n \%#
[gdb server] gdbserver --multi localhost:10080
[gdb swap stdout] echo -e 'call close(1)\ncall open("'"$(tty)\%#"'", 66, 066)\ndetach\nquit' | sudo gdb -q -p $PID --nx # you can use filepath instead of tty
[gdb swap stderr] echo -e 'call close(2)\ncall open("'"$(tty)\%#"'", 66, 066)\ndetach\nquit' | sudo gdb -q -p $PID --nx # you can use filepath instead of tty
[rust gdb] rust-gdb -q $(cargo metadata --format-version=1 | jq -r '(.target_directory + "/debug/" + (.workspace_root | gsub(".*/";"")))')
[rust remote target debug] RUST_GDB=gdb-multiarch rust-gdb -q
[check glibc version] ldd --version
[check glibc version] /lib/x86_64-linux-gnu/libc.so.6

[gdb running process backtrace (gstack)] gdb-backtrace # use this script than pstack command

[gdb switch fd(stdin,out,err)] fdswap # my command (you can also use reptyr or retty)

# perf
[git clone FlameGraph] cd ~/local/bin && git clone https://github.com/brendangregg/FlameGraph
[perf frame graph] perf script -i \%# | ~/local/bin/FlameGraph/stackcollapse-perf.pl | ~/local/bin/FlameGraph/flamegraph.pl > perf.data.flame_graph.svg
[perf top (see function)] perf top -t $TID
[perf top (see function)] perf top -p $PID
[perf event list] perf list

# TERM
[TERM tmux] export TERM=screen-256color
[TERM xterm] export TERM=xterm-256color
[tmux get current window name] tmux display-message -p '#W'
[tmux get current pane id] tmux display-message -p '#W.#P'
[tmux get current pane id] tmux display-message -p '#D'
[tmux split horizontal |] tmux split-window -h -t $(tmux display-message -p '#W')
[tmux split vertical -] tmux split-window -v -t $(tmux display-message -p '#W')
[tmux # check] echo {a..z} {A..Z} | tr ' ' '\n' | xargs -J 1 -I{} bash -c "printf '#{}='; tmux display-message -p '#{}'"
[tmux send command to some pane] tmux send-keys -t $PANE_ID\%# '' C-m
[tmux show current window setting] tmux show-window-options
[tmux fix fixed window title setting] tmux set automatic-rename on # run after restore session
[tmux get current session name] tmux display-message -p '#S'
[tmux dump variables] tmux display-message -a
[tmux show variable] tmux display-message -p '#{pane_current_path\%#}'

[modern watch command] viddy -n \%# # go get github.com/sachaos/viddy
[repeat command] watch -n $SEC "$CMD"
[watch with bash] watch -n 1 "bash -c '\%#'" # use "" to surround bash
[cmd repeat like watch] while true; do sleep 1; \%#; done
[pseudo watch command] while true; do sleep 1; bash -c "clear; \%#"; done
[pseudo watch command] while true\%$do sleep 1\%$clear\%$\%#\%$done
[nohup pseudo watch command] nohup bash -c 'i=0; while true; do sleep 1; bash -c "\%#"; i=$((i+1)); done' &
[for one liner] for i in $(seq \%#); do echo $i; done
[ntimes for command] for ((i=1; i <=\%# ; i++)); do\%$sleep 1\%$echo "$i"\%$echo 'error' |& grep -v 'error'\%$if [[ $? != 0 ]]; then\%$break\%$fi\%$done
[loop command] i=0; while true; do bash -c "echo $i; \%# ;sleep 0.1;"; i=$((i+1)); done

[stopwatch] time cat # stop:c-c

[fork bomb] echo ':(){ :|:& };:' !

[from when] uptime

[awk args] awk -v var=\%# '{print var}'

# route
[route add default gateway] sudo route add default gw \%# # FYI: for permanent setting, /etc/network/interfaces or /etc/network/if-up.d/static-routes or /etc/rc.local
[add gateway to specific addr] sudo route add -net $TARGET_ADDR gw $GW_ADDR netmask 255.255.255.0 $NIC

# lib
[nm: with object filename] nm -A \%#
[nm: dynamic symbol] nm -AD \%# # e.g. calloc, free
[nm: demangle] nm --demabgle \%# # or nm -C FYI: c++filt
[nm: find all    -D] find . -name "*.so\%#" -exec nm -AD {} \; 2>/dev/null #     include dynamic symbol table
[nm: find all no -D] find . -name "*.a\%#" -exec nm -A  {} \; 2>/dev/null # not include dynamic symbol table
[nm: reverse resolution of undefined function] ldd \%# | grep -o -E '/[^ ]*' | xargs nm -AD | grep "$FUNC"

[list lib dependency without ldd] readelf -a \%# | grep "Shared "
[list lib dependency without ldd(arm)] arm-linux-gnueabihf-readelf -a \%# | grep "Shared "

[elf: elf header] readelf -h \%#
[elf: program header] readelf -l \%#
[elf: section header] readelf -S \%#
[mach-o: section/segment header] llvm-readelf -S \%#
[elf: elf/program/section header] readlef -e \%#
[read section] readelf -x\%# # -x25 # FYI: readelf -S
[elf: symbol header] readelf -s \%#
[show string table] FILE_PATH=\%# && readelf -S $FILE_PATH | grep -A 1 strtab | tr -d '\n' | xargs bash -c 'od --skip-bytes 0x$4 --read-bytes 0x$5 -t x1z '"$FILE_PATH"
[show string table] FILE_PATH=\%# && readelf -S $FILE_PATH | grep strtab | grep -o '\[[0-9]*\]' | sed 's/\[\|\]//g' | xargs -I{} readelf -x{} $FILE_PATH
[objdump dump .plt] objdump -d -j .plt 
[objdump dump .plt.got] objdump -d -j .plt.got 

[strings? by readelf] target=\%#;readelf -S "$target" | grep "\[.*]" | awk '{print $2}' | grep '^\.' | xargs -L1 -I{} bash -c "echo {}1>&2; readelf -x {} '$target'" | grep -C 3 "$keyword"

[static library: list objects] ar tv \%#

[strip debug symbols from executable file] strip \%#

# ldd
[list lib dependency without ldd] /lib64/ld-linux-x86-64.so.2 --list \%#
[list lib dependency without ldd] /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 --list \%#
[ldd at darwin] otool -L \%#
[LD] LD_PRELOAD=\%#
[LD] LD_LIBRARY_PATH=\%#
[LD dynamic ldd] LD_TRACE_LOADED_OBJECTS=1 \%# # exec command or ld xxx.so
[LD] LD_SHOW_AUXV=1 \%#
[LD] LD_DEBUG=help /bin/echo \%#
[LD_PRELOAD in mac] DYLD_FORCE_FLAT_NAMESPACE=1 DYLD_INSERT_LIBRARIES=\%# # there is no LD_PRELOAD in mac
[ld show default linker script] ld --verbose
[list loaded functions from dynamic libraries] LD_DEBUG=bindings \%#
[cross arch(arm) ldd] arm-linux-gnueabihf-readelf -a \%# | grep "Shared library:"

[show dynamic library of process] sudo lsof -p $PID
[show dynamic library of process] sudo pldd $PID

[ldd tree] lddtree -a \%# # sudo apt-get install pax-utils
[ldd: elf info] readelf -d \%#
[lddtree shell script url] https://raw.githubusercontent.com/ncopa/lddtree/master/lddtree.sh

[execute without x flag] /lib64/ld-linux-x86-64.so.2 \%# # for lookup ld path: $ strings /bin/ls | head -n 1

[malloc free check] MALLOC_CHECK_=1\%# # 1:print stderr and continue, 2:abort

[patchelf remove unused rpath] patchelf --shrink-rpath $TARGET # remove only unused rpath
[patchelf overwrite rpath] patchelf --set-rpath $SO_PATH1:$SO_PATH2 $TARGET
[patchelf add so] patchelf --add-needed $SO_PATH $TARGET # any filepath ok but recommend relative filepath not absolute filepath
[patchelf add so] patchelf --remove-needed $SO_PATH $TARGET

# root
[fakeroot] fakeroot

# man
[man ld] man ld.so!
[man ascii] man ascii!
[ascii table(ubuntu)] printf "$(printf '\\x%x' {0..255})" | od -Ax -tx1z
[ascii table(   mac)] printf "$(printf '\\x%x' {0..255})" | god -Ax -tx1z
[man search] man -k \%#
[man shell builtin command] man n \%#
[man user command] man 1 
[man systemcall] man 2 
[man glibc func] man 3 
[man prcofs] man 5 procfs

# grep
[grep without message] grep -sq \%#
[grep fixed string] grep -F \%# # no regex '$' -> '\$', '\' -> '\\'
[grep japanese (gnu grep)] grep -n -P '[\p{Hiragana}\p{Katakana}\p{Han}]'
[binary grep] bingrep \%# # cargo install bingrep
[grep force even if binary] grep -a \%#
[grep only highlight] grep -e '$' -e '\%#' # or use '|' or use '-C 99999'
[grep line length limit (for min.js)] grep -E -e '^.{,500}$' --and -e \%#

# linux
[segmentation backtrace] catchsegv \%# # command
[segmentation backtrace] LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so \%#
[stop the world lib path] $HOME/local/lib/libstop_the_world.so
[segmentation backtrace to line] backtrace2line # my command

[ltrace in mac] sudo dtrace -l \%#

[trace system call by ltrace] ltrace -S 
[trace network system call] strace -e trace=network 
[trace file system call] strace -e trace=file 
[trace signal system call] strace -e trace=signal 
[trace external command execution] strace -f -s 9999 -e execve,execveat,fork,vfork 
[list systemcall of command] strace \%# 3>&1 1>&2 2>&3 3>&- | sed -E 's/^([^(]+)\(.*$/\1/g' | sort | uniq

[check PIE or not in linux] hardening-check \%#
[check PIE or not in mac] otool -hv \%#

[tput cols(terminal width)] tput cols
[tput lines(terminal height)] tput lines
[tput color list] echo "tput setaf <val>"; for ((i = 0; i <= 255; i++)); do printf "%s%03d " $(tput setaf $i) $i; done # echo $(tput setaf 1) RED $(tput sgr0) DEFAULT

# ただし、STATの表示が一部省略されているように見える(ps auxで見える1文字目のみと思われる)
[ps list threads ubuntu] ps -Lfl -p $PID
[process tree hint for linux] ps x -o  "%p %r %y %x %c"
[ps list priority and nice value] ps -p $(pgrep \%#) -o pid,tid,policy,pri,ni,rtprio,comm
[pstree on ubuntu] ps -e f ww
[pstree with args ubuntu] ps -e f
[pstree of current shell] ps -e f ww | grep -C 10 $$
[pstree on mac] pstree -p $(pgrep \%#) # with parent # brew install pstree
[decl ppid like reverse pstree] recv_ppid() { ps u $1 | tail -n 1; [[ "$1" == "1" ]] && return; pid=$(ps -o ppid= -p $1 | tr -d ' '); [[ -z "$pid" ]] && return 1; recv_ppid $pid; }; ppid() { recv_ppid $1 | column -t }
[send signal to process] kill -SIG\%# $PID # e.g. SIGCONT
[kill process tree for ubuntu] kill -TERM -- $PID # how to find process: ps x -o "%p %r %y %x %c"
[kill process tree for mac] kill -TERM -- -$PID
[list process which use some lib for linux] ps $(sudo grep \%# /proc/*/maps | cut -d / -f 3 | sort -n | uniq | grep -v self)
[show  process environment] ps e -ww -p $PID
[ubuntu show process environment(pgrep)] strings /proc/$(pgrep \%#)/environ
[ubuntu show process environment(pid)] strings /proc/\%#/environ
[pgrep with user info] ps wup $(pgrep -f \%#)
[pgrep with user info] ps aux | grep -v grep | grep -i \%#
[ps thread at mac(but no tid)] ps aux -M $PID

# performance
[gprof: gmon.out call graph] gprof $EXEC_FILE_PATH\%# | gprof2dot | dot -Tsvg -o output.svg

# copy
[copy with progress] cp -v \%#
[copy] cp -R \%# # src/ dst/src # Do not use -r: symbolic link -> no symbolic link
[show copy progress] watch -n 0.1 progress -q

[restart xbindkeys] pkill xbindkeys && xbindkeys

# [bash \- How to solve the issue that a Terminal screen is messed up? \(usually after a resizing\) \- Unix & Linux Stack Exchange]( https://unix.stackexchange.com/questions/61584/how-to-solve-the-issue-that-a-terminal-screen-is-messed-up-usually-after-a-res )
[fix terminal] stty sane; resize; reset

# nohup
[nohup] nohup \%# </dev/null &> $(echo $(mktemp) | tee $(tty)) &
[nohup] nohup \%# </dev/null 1>/dev/null 2>/dev/null &

# vmstat
[vmstat to csv] grep -v '^procs' | grep -v '^ r' | sed -E 's/ +/,/g' | sed -E 's/^,//g'

# image
[image resize] convert $IN\%# -resize 48x48 $OUT
[image convert extend] convert $IMAGE\%# -append -background none -gravity center -extent 320x320 $OUTPUT
[image resize] mogrify -resize 160x $IMAGE\%# # e.g. 160x or 160x160
[image white noise] convert -size 128x128 xc:gray +noise random -colorspace gray noise.png
[image black] convert -size 128x128 xc:black black.png
[image white] convert -size 128x128 xc:white white.png
# FYI: [linux \- How to view raw binary data as an image with given width and height? \- Super User]( https://superuser.com/questions/294270/how-to-view-raw-binary-data-as-an-image-with-given-width-and-height )
[image convert raw to png] find . -name "*\%#.raw" | xargs -L 1 -I{} convert -depth 8 -size 1024x1024+0 gray:{} {}.png
[image convert raw to png] find . -name "*\%#.raw" | parallel --no-notice -a - convert -depth 8 -size 1024x1024+0 gray:{} {}.png
[image convert png to raw] convert white.png -depth 8 -size 1000x1000 gray:white.raw
[image gen gif] convert -fuzz 10% -delay 1x8 *.png animation.gif
[image convert gif to png] convert -verbose -coalesce $IN.gif\%# $OUT.png
[image convert concat vertical] convert *.png\%# -append $OUT.png
[image convert concat horizontal] convert *.png\%# +append $OUT.png
[image convert fill non-transparent area] convert before.png -fuzz 20% -alpha on -fill 'rgba(255, 0, 0, 0.5)' -opaque '#000' after.png
[image convert add extra transparent space] magick before.png -background none -gravity center  -extent '%[fx:w*1.1]x0' after.png # "convert" is a legacy program. Try it with "magick".
# FYI: [ワンライナーで色相を変えた画像をたくさん作る \- Qiita]( https://qiita.com/ir-yk/items/18395cc44f0d1123965d )
[image convert modulate(色相)] mkdir -p results; seq 100 300 | xargs -n1 -I{} convert \%# -modulate 100,100,{} results/modulate_{}.png
# FYI: [コマンド一発で画像を角丸にする \- Qiita]( https://qiita.com/s_of_p/items/8aefeeadb3ae3029b4b2 )
[image convert 角丸] convert -size 512x512 xc:none -draw "roundrectangle 0,0 512,512 32,32" src.png\%# -resize 512x512 -compose src-in -composite -unsharp 0x1 dst.png
[image convert transparent] convert src.png\%# -fuzz 10% -transparent white transparent.png
[image convert font] convert -list font | grep "Font:"


[getconf 32 bits or 64 bits] getconf LONG_BIT

# glob examples
[glob without] ^\%#
[glob sub] *~\%# # multi ok: *~hoge~fuga
[glob mv all files except some dir] mv ^$DIR $DIR
[glob mv all files except some dir] mv *~$DIR $DIR

[hostname to ip] dig +short \%#

# argcheck
[argcheck bash] command echo -n \%#
[argcheck python3] python3 -c 'import sys; print(sys.argv[1:])' \%#
[argcheck python2] python2 -c 'import sys; print sys.argv[1:] ' \%#

[parallel] parallel --no-notice \%#

# cmds
[pup: Parsing HTML at the command line] pup

# cd
[cd symbolic link dst dir] cd -P \%#

# ar
# FYI: [linux \- How to merge two "ar" static libraries into one? \- Stack Overflow]( https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one )
[ar archive archives(libtool)] libtool -static -o $NEW.a\%# # archives... WARN: order of .o load order is important # sudo apt-get install -y libtool

[ar archive archives] ls *.a | xargs -L 1 ar -x ; ar -qc $NEW.a\%# *.o # non-safe use tmp dir WARN: order of .o load order is important
[ar extract] ar x \%#

# FYI: [macOS Mojave の WiFi をコマンドからオン・オフする \- Qiita]( https://qiita.com/KEINOS/items/21c9ca07664a641620eb )
[wi-fi mac on] networksetup -setairportpower en0 on
[wi-fi mac off] networksetup -setairportpower en0 off
[wi-fi device name mac] networksetup -listallhardwareports | grep -A 1 "Wi-Fi" | grep '^Device:' | sed 's/^Device: //'
[wi-fi dhcp update mac] networksetup -setdhcp Wi-Fi

# dummy file
[dummy file : linux] fallocate -l \%# # 10(without B), 10K, 10M, 10G
[dummy file : mac] mkfile -v \%# # 10(without B), 10K, 10M, 10G
[dummy file] dd if=/dev/zero of=1G.bin bs=1024000 count=1000
[dummy random file] dd if=<(openssl enc -aes-256-ctr -pass pass:"$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64)" -nosalt < /dev/zero 2>/dev/null) of=100MB.bin bs=1MB count=100 iflag=fullblock

# vscode
[vscode install extension] code --install-extension \%#
[vscode list extensions] code --list-extensions
[vscode check remote ssh server setting extensions] code --extensions-dir ~/.vscode-server/extensions --list-extensions
[vscode force update all extensions] code --list-extensions | xargs -I {} code --install-extension {} --force
[vscode open new project] code -n .
[vscode open project(at active window)] code --add .

# icon
[icon icns(mac) extract] iconutil --convert iconset \%#
[icon icns(mac) compress] iconutil --convert icns \%#
[icon to png] sips -s format png \%# --out output.png
[icon ico(windows)] convert \%#.png -define icon:auto-resize icon.ico

[svg to pdf] rsvg-convert -f pdf -o test.pdf test.svg

[plantuml png] plantuml test.uml # test.png
[plantuml svg] plantuml -tsvg test.uml
[plantuml atxt] plantuml -ttxt test.uml # test.atxt
[plantuml utxt] plantuml -utxt test.uml # test.utxt
[plantuml pdf] plantuml -tpdf test.uml
[plantuml pdf] plantuml -tpdf test.uml && rsvg-convert -f pdf -o test.pdf test.svg
[plantuml html] plantuml -thtml test.uml

[binary editor] bed \%# # go get -u github.com/itchyny/bed/cmd/bed
[hexdump color] hexyl # cargo install hexyl

[is binary file] { file --mime \%# | grep -q "charset=binary"; }

[xmllint format check] xmllint --noout --valid \%#
[xmllint format output] xmllint --format \%# # use export XMLLINT_INDENT=" " to control indent
[xml tidy format output] tidy -xml -i -q \%#

# FYI:
# [Linux系OSにおいてディスクが読み込み専用\(readonly\)になりました。どう対処すればよいですか？ \| クラウド・エヌ・インフォメーション]( https://www.cloudn-service.com/faq/4028 )
# [リカバリーモードでrootユーザーなのにReadOnlyだと怒られる時の対処法 \- Qiita]( https://qiita.com/ironsand/items/f40581705a7bb402c01d )
[remount rootfs] sudo mount -o rw,remount /

# csv
[csv2markdown] cat \%# | mdt # go get github.com/monochromegane/mdt/...
[csv2markdown] cat \%# | tty-table # npm install -g tty-table
[csv2markdown] csvtomd \%# # pip3 install csvtomd
[csv2svg] csv2svg \%# # go get -u github.com/umaumax/csv2svg/...
[csv colorful output] cat \%# | ccsv /dev/stdin # go get -u github.com/nak1114/ccsv
[csv diff] daff \%# # pip3 install daff

# yum
[yum whatprovides (search so dependency)] yum whatprovides \%#
[apt-get whatprovides (search so dependency)] dpkg -S $FILEPATH

# pkg-config
[pkg-config confirm opencv version] pkg-config --modversion opencv
[confirm opencv version] opencv_version
[pkg-config list all config] pkg-config --list-all

# dot graphviz
[dot graphviz find gen] find . -name '*.dot' | xargs -L1 -I{} dot -Kdot -Tsvg -o "{}.svg" "{}"
[dot graphviz pipe] \%# | xargs -L1 -I{} dot -T svg -o "{}".svg "{}"
[dot graphviz from pipe text input tool install] pip3 install https://github.com/umaumax/dotpipe/archive/master.tar.gz

# bash
[echo alphabet] echo {a..z}
[shell expand number] {0..9} # 0 1 ... 9
[shell expand number] {00..10} # 00 01 ... 09 10
[bash seq mkdir] for i in $DIR\%#_{00..9}; do mkdir ./$i; done # no zsh

# rust
[rust install nightly] rustup install nightly
[rust switch to nightly] rustup default $(rustup toolchain list | grep -o '^nightly-[^ ]*' | head -n 1)
[rust add cross build target] rustup target add \%#
[rust env_logger] RUST_LOG=debug \%#
[ltrace cargo run] CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=ltrace cargo run
[cargo install from github] cargo install --git $GIT_URL # e.g. https://github.com/jameysharp/static-ldd
[cargo install list] cargo install --list
[cargo install] cargo install --path .
[cargo create new lib crate] cargo new --lib \%#
[cargo create new bin crate] cargo new --bin \%#
[cargo test show output] cargo test -- --nocapture \%#
[cargo open doc] cargo doc --open
[cargo doc: run server] cargo docserver -p 12345 # cargo install cargo-docserver
[cargo doc: run server] ( cd target/doc && python3 -m http.server 12345 )
[cargo add lib dependency] cargo add \%# # cargo install cargo-edit
[cargo module tree list] cargo tree \%# # cargo install cargo-tree
[cargo fix warning] cargo fix \%# # cargo install cargo-fix
[cargo module license list] cargo-license \%# # cargo install cargo-license
[cargo modules of toml file] cargo metadata --format-version=1 --no-deps | jq '.packages[].dependencies[].name' -r
[cargo expand macro debug] cargo exapnd \%# # cargo install cargo-expand
[cargo nm] cargo nm -- --demangle ./target/debug/\%# # cargo install cargo-binutils
[cargo arm build] cargo build --target armv7-unknown-linux-gnueabihf # rustup target add armv7-unknown-linux-gnueabihf
[cross arch test build only] cargo test --target armv7-unknown-linux-gnueabihf --no-run
[cargo run example] cargo run --example \%#
[cargo project root] dirname $(cargo locate-project | jq -r '.root')
[rustc linker flags] rustc -Z print-link-args # only nightly rust run `rustup default nightly`
[rust arch target list] rustup target list
[rust build unused function] RUSTFLAGS="-C link-dead-code" cargo build 
[cargo with flags] RUSTFLAGS="\%#" cargo build 
[rust 'Blocking waiting for file lock on package cache' while building] rm -rf ~/.cargo/registry/index/ ~/.cargo/.package-cache # cargo clean # pkill rls cargo
[cargo build with compile commands] cargo build --verbose
[rust dump some function] objdump -d \%# | c++filt | awk -v RS= '/^[[:xdigit:]]+ <std::env::var>/'
[rust dump main function only] objdump -d \%# | awk -v RS= '/^[[:xdigit:]]+ <[0-9A-Za-z_]+main[0-9A-Za-z_]+>/'
[rust repl] evcxr # cargo install evcxr_repl
[rust change toolchain default <-> nightly] rustup-toolchain-switch # my command
[cargo feature tree(all)] cargo tree -e features
[cargo feature tree(sepecific)] cargo tree -e features -i $crate_name
[rust llvm version] rustc --version --verbose

[shared library search path] ldconfig -v 2>/dev/null | grep -v $'\t' | cut -d: -f1 | tr '\n' ':'

# fzf
[fzf without some word] echo '!some_word (e.g. !utest)'

# FYI: use gopls
[vim golang completion fix] go get -u github.com/nsf/gocode; go get -u golang.org/x/tools/cmd/gopls; go get -u github.com/sourcegraph/go-langserver; echo 'vim -c ":GoInstallBinaries"; vim -c ":UpdateRemotePlugins"'

# terminal
[terminal image: img2sixel] img2sixel --width '256px'
[terminal image: hello gopher] curl 'https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F665%2Fe44c3fbc-af63-c555-1941-e39040bb385d.png?ixlib=rb-1.2.2&auto=compress%2Cformat&gif-q=60&s=fbe7017dcf4a56a8b391cf91f76b77b5' | img2sixel

# xargs
[xargs per one] xargs -L 1 -I{} \%# # DO NOT USE -I {} -L 1

[readline] | while IFS= read -r line || [[ -n "$line" ]]; do\%$  \%#  \%$  \%$\%$done

# ansi color
[ansi color awk print] awk '{ printf "\\033[38;2;87;199;255m%s\n",$0; }'
[ansi color awk match] awk '/.\[38;2;87;199;255m.*/ { printf "%s\n",$0; }'

# pawk
[pawk install] pip3 install pawk
[pawk /etc/hosts to json] cat /etc/hosts | pawk -B 'd={}' -E 'json.dumps(d)' '!/^#/ d[f[1]] = f[0]'
[pawk md to html] cat \%# | pawk -E 'markdown.markdown(t)'

# bc
[bc flaot calc] echo "scale=6; \%#" | bc | sed -e 's/^./0./' -e 's/^-./-0./'

# process substitution
[tee output process substitution] tee >(\%#)

# ntp
[ubuntu set time force (tmp ntp)] sudo date --set "@$(curl 'http://worldtimeapi.org/api/timezone/Asia/Tokyo' | grep -o '"unixtime":[0-9]*' | cut -c12-)"
[update time without ntp command] sudo date --set "$(curl -s --head http://google.com | grep '^Date:' | sed 's/Date: //g') -0000"

# print0
[print0] tr '\n' '\0'
[print0] perl -pl0e1
[print0 sed and count] perl -0ne 'BEGIN{$count=0} $_ =~ s/\n\%#/\\n/g; printf("[%3d]:%s",$count,$_); $count++' | tr '\0' '\n'

# env
[add path env at the beginning] export PATH="\%#:$PATH"
[add path env at the end] export PATH="$PATH:\%#"
[filter current shell PATH env] export PATH_BK="$PATH"; export PATH=$(t1=$(mktemp); t2=$(mktemp); echo -n $PATH | tr ':' '\n' | tee $t1 | { { grep -v \%# } || { echo -n "$PATH" | tr ':' '\n' } } | tee $t2 | tr '\n' ':' | sed 's/:*$//'; diff -U 999 $t1 $t2 1>&2)

# filename
[generate continuous filename] ruby -e '(0..9\%#).each{|i|printf"%04d_right.png\n",i}'

# perl
[ol perl source code comfirm] perl -MO=Deparse # -le 'print "Hello, World!"'
[ol compare version] perl -e 'eval "exit ((version->parse(@ARGV[0]) @ARGV[1] version->parse(@ARGV[2])) ? 0 : 1)"' # v2.0 '<' v2.1
[ol perl glob] perl -e 'print join("\n", glob(@ARGV[0]))' '\%#'

# expand
[tab to space] expand -t 2 # pipe or filename
[space to tab] unexpand -t 2 # pipe or filename

# overwrite
[overwrite file command wrapper] FILE=\%#; TMP_FILE="$(mktemp)"; cat "$FILE" | cat > "$TMP_FILE" && mv "$TMP_FILE" "$FILE"
[git xargs overwrite file command example] git ls-files -z -- '*.vim' | xargs -0 -I{} echo {} | overwrite expand -t 2

# copyq
[copyq process existing check] pgrep -l CopyQ
[clipboard manager popup] copyq menu # on darwin transparent menu is shown bug?
[clipboard manager paste] copyq tab '&clipboard' read $NUM
[clibboard manager print all tab content] copyq eval -- "tab('&clipboard'); for(i=1; i<=size(); i++) print('['+ str(i) +'] '+ str(read(i-1)) + '\n');" # i=0 lower is newer

# download
[download install editor tmp] mkdir -p ~/.local/bin; pushd ~/.local/bin; [[ ! -e ./micro ]] && curl https://getmic.ro | bash; export PATH="$PWD:$PATH"; popd
[download fzf arm7 binary] tar xvzf <(curl --output - -L https://github.com/junegunn/fzf-bin/releases/download/0.20.0/fzf-0.20.0-linux_arm7.tgz) -C .
[download fzf arm7 binary url] https://github.com/junegunn/fzf-bin/releases/download/0.20.0/fzf-0.20.0-linux_arm7.tgz
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/socat
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/x86_64/nano
[download linux static binary] wget https://raw.githubusercontent.com/yunchih/static-binaries/master/strace
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/arm/file
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/arm/nm
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/arm/objdump
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/arm/readelf
[download linux static binary] wget https://raw.githubusercontent.com/andrew-d/static-binaries/master/binaries/linux/arm/strace
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/gdb-arm-static-7.11 -O gdb
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/gdbserver-armel-static-8.0.1 -O gdb-server
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/ldd-arm-static -O ldd
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/lsof-armel-static -O lsof
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/ltrace-arm-static-0.7.91 -O ltrace
[download linux static binary] wget https://raw.githubusercontent.com/therealsaumil/static-arm-bins/master/socat-armel-static -O socat

# cat
[cat with separators among files] tail -n +1 $FILES
[cat with separators among files] awk 'FNR==1 && NR!=1 {print "########"}{print}' $FILES
[cat head and tail] (head; echo "\n----------------\n"; tail) < \%#

[format output like a table] column -t

# vim / nvim
[nvim deoplete plugin fix?] pip3 --user --no-cache-dir install -I pynvim; pip3 --user --no-cache-dir install -I neovim; echo 'open vim and run ":UpdateRemotePlugins"'
# [Vimプラグイン"の"カテゴリまとめ \- Qiita]( https://qiita.com/yutakatay/items/f19b2a0a962a587db5cf )
[ vim start speed test] echo "scale=3; $( vim --startuptime /tmp/stime_mine.log -c 'quit' > /dev/null && tail -n 1 /tmp/stime_mine.log | cut -d ' ' -f1) / $(vi -u DEFAULTS --startuptime /tmp/stime_def.log -c 'quit' > /dev/null && tail -n 1 /tmp/stime_def.log | cut -d ' ' -f1)" | bc | xargs -I{} echo {}x slower your Vim than the default.
[nvim start speed test] echo "scale=3; $(nvim --startuptime /tmp/stime_mine.log -c 'quit' > /dev/null && tail -n 1 /tmp/stime_mine.log | cut -d ' ' -f1) / $(vi -u DEFAULTS --startuptime /tmp/stime_def.log -c 'quit' > /dev/null && tail -n 1 /tmp/stime_def.log | cut -d ' ' -f1)" | bc | xargs -I{} echo {}x slower your Vim than the default.

# lcov
[lcov info list]lcov --list \%#

[retry command] until \%#; do sleep 5; done

# sqlite3
[sqlite3 gui] sqlitebrowser \%# # sudo apt-get install -y sqlite3 libsqlite3-dev sqlitebrowser
[sqlite3 rich cli] litecli \%# # pip3 install litecli # e.g. select * FROM `<<table_name>>`

# mysql
[mysql rich cli] mycli \%# # mycli -uroot -p -h127.0.0.1 -P 3306

# go
[go test with color] gotest -v # go get -u github.com/rakyll/gotest

# example data sites
[example data csv] https://raw.githubusercontent.com/goodby/csv/master/example/user.csv
[example data json] https://gist.githubusercontent.com/gcollazo/884a489a50aec7b53765405f40c6fbd1/raw/49d1568c34090587ac82e80612a9c350108b62c5/sample.json

# proxy
[free proxy check] curl -sSf "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt" | xargs -L1 -I{} bash -c 'echo -n {}; timeout 5 curl www.google.com -s -x {} >/dev/null 2>&1 && echo " ${GREEN}OK${DEFAULT}" || echo " ${RED}NG${DEFAULT}"'
[free proxy check] curl -sSf "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt" | parallel -j32 --no-notice -L1 -I{} "bash -c 'echo -n {}; timeout 5 curl www.google.com -s -x {} >/dev/null 2>&1 && echo \" ${GREEN}OK${DEFAULT}\" || echo \" ${RED}NG${DEFAULT}\"'"
[curl noproxy] curl --noproxy "*" \%#
[wget noproxy] wget --no-proxy \%#

# bash
# below sed must be gnu sed
[bash debug step run] bash <(cat \%# | sed '2itrap '"'"'echo -ne "\\\\033[90m[DEBUG]:\\\\033[35m$BASH_SOURCE:$LINENO:$BASH_COMMAND\\\\033[00m"; read -p " "'"'"' DEBUG')

[realpath of current directory] builtin pwd -P # directory symbolic is solved

[braille tenji 点字 unicode] seq 0x2800 0x28FF | ruby -ne 'print $_.to_i.chr("UTF-8")'

# chmod
[chmod sticky bit, SGID, SUID] chmod \%# # chmod 6644 1: T:Sticky Bit(o+t), 2: S:SGID(g+s), 4: S:SUID(u+s)
[chmod sticky bit] chmod o+t \%#
[chmod SGID] chmod g+s \%#
[chmod SUID] chmod u+s \%#
[find SUID bin files] find /bin /sbin /usr/bin -perm -u+s
[chmod dir:775, file:664] chmod -R "=r,u+w,g+w,+X" \%#
[chmod dir:777, file:666] chmod -R "=r,u+w,g+w,o+w,+X" \%#
[chmod dir:755, file:644] chmod -R "=r,u+w,+X" \%#

# date
[date to variable] read day month year <<< $(date +'%d %m %Y')
[date to variable] eval $(date +"day=%d; month=%m; year=%Y")

# threads
[count threds per process(bash)] ( echo "pid name threads"; find /proc/[0-9]*/status | xargs grep -E '^(Name|Threads)' | perl -nle 'if (/^\/proc\/([0-9]+)\/.+:Name:\s+(.+)$/) { $p=$1; $n=$2 } elsif (/^\/proc\/([0-9]+)\/.+:Threads:\s+(.+)$/ && $1==$p) { print "$p $n $2" }' )
[count threds per process(zsh) ] ( echo "pid name threads"; echo /proc/<0-9>*/status | xargs grep -E '^(Name|Threads)' | perl -nle 'if (/^\/proc\/([0-9]+)\/.+:Name:\s+(.+)$/) { $p=$1; $n=$2 } elsif (/^\/proc\/([0-9]+)\/.+:Threads:\s+(.+)$/ && $1==$p) { print "$p $n $2" }' )

# lolcat
[delay(annimated) cat] lolcat -a

[check default port applications] cat /etc/services

# service
[service list] service --status-all

# other
[rot13] python -c 'print(raw_input().encode("rot13"))'
[rot13] nkf -r

# top
[docker container top] ctop # brew install ctop (or nugget ctop or see [bcicen/ctop: Top\-like interface for container metrics]( https://github.com/bcicen/ctop ))
[top log] top -b -d 1 -n 60 # 1sec * 60
[top with threads] top -H -b -n 1
[htop ansi as html] echo q | htop | aha --black --line-fix > htop.html

# systemd
[systemd running service list] systemctl list-units --type=service
[systemd service list all] systemctl list-unit-files --type=service
[systemd stop] systemctl stop $SERVICE_NAME
[systemd disable] systemctl disable $SERVICE_NAME
[systemd status(info)] systemctl status $SERVICE_NAME
[systemd settig filepath] /usr/lib/systemd/system
[service setting file cat] systemctl cat $SERVICE_NAME # sshd.service
[service dump setting variable] systemctl show $SERVICE_NAME
[service time] systemd-analyze
[service time plot] systemd-analyze plot > plot.svg

# journalctl
[journalctl unit filter] journalctl -u $UNIT_NAME # systemctl list-unit-files --all
[force clear journalctl] journalctl --flush --rotate; journalctl --vacuum-time=1s
[journalctl cut timestamp] journalctl | cut -c17-

# pid
[pid files location] /var/run/

# tty
[tty] python -c 'import os; import sys; print(os.ttyname(sys.stdin.fileno()))'
[tty] echo "/dev/$(ps -p $$ -o tty | tail -n 1)"
[tty from pid] echo "/dev/$(ps -p $PID -o tty | tail -n 1)"


# expect
[auto generate expect code] autoexpect -f script.exp \%# # command

# golang
[golang debug build for gdb] go build -gcflags "-N -l" \%#
[golang core dump generation enable] GOTRACEBACK=crash \%#

# sudo
[sudo with current PATH] sudo env PATH="$PATH" \%#
[sudo with current env] sudo -i \%#
[sudo su with current PATH] sudo su -p

[show i-node number] ls -i \%#
[search file from i-node] find \%# -inum $I_NODE
[check device major/minor number] ls -l /dev/\%#

# binary
[hex string to binary (big endian)] echo -n 1234abcd\%# | xxd -r -p - 
[hex string to binary (little endian 32bit)] echo -n 1234abcd | xxd -r -p - | xxd -e -g4 /dev/stdin | xxd -r 
[hex string to binary (little endian 64bit)] echo -n 1234abcd | xxd -r -p - | xxd -e -g8 /dev/stdin | xxd -r 
[little endian <-> big endian(32bit binary)] xxd -e -g4 /dev/stdin | xxd -r 
[little endian <-> big endian(64bit binary)] xxd -e -g8 /dev/stdin | xxd -r 
[hex string endian reverse(32bit)] echo -n 1234abcd2345bcde\%# | fold -w8 | python3 -c "import sys, binascii; [print(binascii.hexlify(binascii.unhexlify(word.rstrip())[::-1]).decode(), end='') for word in sys.stdin.readlines()]"
[hex string endian reverse(32bit)] echo -n 1234abcd2345bcde\%# | xxd -r -p - | xxd -e -g4 /dev/stdin | xxd -r | xxd -p
[hex string endian reverse(64bit)] echo -n 1234abcd2345bcde\%# | fold -w16 | python3 -c "import sys, binascii; [print(binascii.hexlify(binascii.unhexlify(word.rstrip())[::-1]).decode(), end='') for word in sys.stdin.readlines()]"
[hex string endian reverse(64bit)] echo -n 1234abcd2345bcde\%# | xxd -r -p - | xxd -e -g8 /dev/stdin | xxd -r | xxd -p
[write by 4B units to binary] echo -n 6ffffffb\%# | xxd -r -p - | xxd -e -g4 /dev/stdin | xxd -r | dd of=$TARGET bs=1 seek=$OFFSET conv=notrunc
[write by 8B units to binary] echo -n 000000006ffffffb\%# | xxd -r -p - | xxd -e -g8 /dev/stdin | xxd -r | dd of=$TARGET bs=1 seek=$OFFSET conv=notrunc
[write by raw data to binary] echo -en \%# | dd of=$TARGET bs=1 seek=$OFFSET conf=notrunc # data example: '\xE0\x1F\x80\x52\xC0\x03\x5F\xD6'

# snap
[snap installed package file list] tree /snap/$PACKAGE\%#/current/

[force pkill] pkill -KILL \%#
[force kill] kill -KILL \%#

# vnc
[ubuntu vnc] sudo gsettings set org.gnome.Vino require-encryption false; /usr/lib/vino/vino-server --display=:0

# jenkins
[jenkins pipeline groovy file lint(check)] curl -X POST -F "jenkinsfile=<$(readlink -f $JENKINS_PIPELINE_GROOVY_FILEPATH\%#)" $JENKINS_SERVER/pipeline-model-converter/validate # or use jenkins-lint command

# hostname
[lookup hostname] uname -n # [【Linux】インフラエンジニアの僕が「hostname」コマンドを使わない理由とは？ \- Qiita]( https://qiita.com/satton6987/items/f50ad3df302290d1f544 )

# env
[run command with enfile] env $(cat \%#.env) $COMMAND


# backlight
[control backlight at ubuntu] echo 100\%# | sudo tee /sys/class/backlight/intel_backlight/brightness # 0~1808

# touch
[update file access/modify/change date] touch \%# # you can check by stat command

# fold
[split string to n chars] fold -w2 # default is 2

# arch
[display the machine's arch type] arch # uname -p [macos \ Why does arch output i386?]( https://apple.stackexchange.com/questions/140651/why-does-arch-output-i386 )

[run piped script with arg] \#% | bash -s -- # arg1 arg2

[delete chars(only for ascii)] colrm # $START(1~) $END(default:last)

[report current working directory of a process] pwdx $PID # output is /proc/$PID/cwd

# display
[set external 1st display input source setting] ddcctl -d 1 -i # DVI-1:3, DVI-2:4, HDMI-1:17, HDMI-2:18 # https://github.com/kfix/ddcctl
[set external 1st display brightness to 0] ddcctl -d 1 -b 0
[set external 1st display brightness to 100] ddcctl -d 1 -b 100

# less
[less: open without close] less +F

# socat
[port listen request to stdout] socat tcp-listen:8080\%#,fork stdout

# originals
[original: select command of all commands] allcmdspeco !
[original: diff filter with grep] grep-diff
[original: diff filter with any commands] xdiff
[original: git show merge conflict solution diff] git-merge-conflict-diff
[git log enhanced] git foresta # alias is gf

# version
[python version compare] python3 -c "import sys; from distutils.version import LooseVersion; exit(0 if LooseVersion(sys.argv[1]) <=\%# LooseVersion(sys.argv[2]) else 1);" $CURRENT $NEW

# stress
[simple stress] seq 1 100 | xargs -I{} -P 3 bash -c "yes > /dev/null" # 300%

# manual
[bash builtin commands manual] man bash
[zsh builtin commands manual] man zshbuiltins
[zsh builtin commands manual] run-help type

# ASLR
[disable ASLR(address ranomization) temporary (ubuntu)] setarch $(uname -m) -R $COMMAND
[disable ASLR(address ranomization) temporary (ubuntu, mac)] disaslr $COMMAND # my command

# seq
[seq with text] seq -f 'hoge\%#_%g' 1 3
[seq incremental with N] seq # START INC END

# zombie
[check zombie process] ps aux | grep 'Z'
[create zombie process] echo 'import os; import time; pid = os.fork();\nif pid==0: exit(0);\nprint("parent pid:{}".format(os.getpid())); print("zombi  pid:{}".format(pid));\nwhile 1: time.sleep(1);' | python3 -

# chrt
[change SCHED_FIFO priority] chrt -f -p 99 $PID # 1 is lowest, 99 is highest

[show inode] ls -i

[print irq count log] cat /proc/interrupts

# ntimes
[ntimes] ntimes # 3 ls
[ntimes zsh builtin] repeat # 3 ls
[ntimes hyperfine] hyperfine --min-runs # 5 'sleep 0.2' 'sleep 3.2'

# commands
[spell typo check command] typos

[list namespace] lsns
