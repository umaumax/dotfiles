# [tmux\(1\) \- Linux manual page]( http://man7.org/linux/man-pages/man1/tmux.1.html )

run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | tmux -V | perl -pe 's/[^\d]*(\d+\.\d+|\d+)[^\d]*/(0+$1)/ge;')"
# NOTE: for tmux version compatibility
# if-shell -b '[[ "$(echo "$TMUX_VERSION < 1.9" | bc)" -eq 1 ]]' \
# "xxx; \
# yyy"


# key
# []: default key
# -r: like a vim submode
# -a: the new window is inserted at the next index up from the specified target-window, moving win‐ dows up if necessary, otherwise target-window is the new window location.
bind -r t new-window -a -c '#{pane_current_path}' # tab [c]
bind -r n next-window
bind -r p previous-window
# window move n,p
bind s split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'
bind j select-pane -D
bind k select-pane -U
bind h select-pane -L
bind l select-pane -R
# w -> select window
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1
# Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# find window
bind -r f choose-window

# select window by number
bind-key          0 select-window -t :0
bind-key          1 select-window -t :1
bind-key          2 select-window -t :2
bind-key          3 select-window -t :3
bind-key          4 select-window -t :4
bind-key          5 select-window -t :5
bind-key          6 select-window -t :6
bind-key          7 select-window -t :7
bind-key          8 select-window -t :8
bind-key          9 select-window -t :9

# help
# [What is the command for inline help in tmux? \- Super User]( https://superuser.com/questions/737075/what-is-the-command-for-inline-help-in-tmux )
# <C-b>+? or :list-commands

# sessionの移動
bind c choose-session
bind -r tab switch-client -n
bind -r S-tab switch-client -r

# window自体の移動
bind -r S-left swap-window -t -1
bind -r S-down last-window
bind -r S-up   choose-window
bind -r S-right swap-window -t +1

# bind b select-pane -t :.+
# bind C-b select-pane -t :.+
# bind B select-pane -t :.-

# bind -n M-left select-pane -L
# bind -n M-down select-pane -D
# bind -n M-up select-pane -U
# bind -n M-right select-pane -R

bind -n M-left previous-window
bind -n M-down last-window
bind -n M-up   choose-window
bind -n M-right next-window

# bind v copy-mode
bind b copy-mode
bind C-b copy-mode
bind B copy-mode
bind Escape copy-mode

bind : command-prompt

# -g: global session
setw -g mode-keys vi

# # C-e*2でtmux内のプログラムにC-eを送る
# bind C-e send-prefix
# set -g prefix C-e
# unbind C-b

# option
# vim submodeのような機能のwait time[ms]
set -g repeat-time 400
set -g display-time 6000
set -g status-interval 30
set -g history-limit 5000
# キーストロークのディレイを減らす
set -sg escape-time 0

# status line
set -g status-right "#(w | head -1 | cut -d, -f4) | %Y/%m/%d (%a) %p %I:%M"
setw -g window-status-format "#I:#W"
setw -g window-status-current-format "#I:#W_#P"
set -g status-style bg=black
set -g status-style fg=cyan
# set -g status-left-style fg=black
set -g status-left-style bg=magenta
set -g status-right-style fg=black
set -g status-right-style bg=green
setw -g window-status-current-style "bright,reverse",bg="cyan",fg="colour237"
set-option -g default-terminal "screen-256color"
set-window-option -g xterm-keys on

set -g pane-border-style fg=green,bg=black
set -g pane-active-border-style fg=white,bg=yellow

# 設定ファイルのreload
bind r source-file ~/.tmux.conf \; display-message "Reload Config!!"

# マウス操作を有効にする
# [tmux v2.1からmouse関連の設定が変わった - Qiita](http://qiita.com/jyotti/items/70a3a8035d767f99f93d)
# v2.1 <= version
set-option -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# version < v2.1
#set -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on
#set -g mouse-select-window on

# | でペインを縦分割する
bind | split-window -h
# - でペインを横分割する
bind - split-window -v

# rename window to current path
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

set-option -g set-titles on
set-option -g set-titles-string "#{session_name}"

# ----

# [dotfilesを作るときのOS別対応をする \- Panda Noir]( http://www.pandanoir.info/entry/2017/12/06/000000 )
# [Mac \(ローカル\)とLinux \(リモート\)とtmuxでクリップボードを共有 \- Qiita](https://qiita.com/py0n/items/2d00e9f53aba63c54afa)

# # Linux with xsel
if "which xsel" "bind-key -T copy-mode-vi     v send-keys -X begin-selection"
if "which xsel" "bind-key -T copy-mode-vi     y send-keys -X copy-pipe-and-cancel 'nkf -w | xsel -bi'"
if "which xsel" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'nkf -w | xsel -bi'"
# if "which xsel" "bind-key -T copy-mode-vi   C-v send-keys -X rectangle-toggle"
if "which xsel" "bind-key -T copy-mode-vi     y send-keys -X copy-pipe-and-cancel 'nkf -w | xsel -bi'"
if "which xsel" "bind-key -T copy-mode-vi     Y send-keys -X copy-line"
if "which xsel" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'nkf -w | xsel -bi'"
if "which xsel" "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'nkf -w | xsel -bi'"

# # Mac
# Ctrl+b [ -> v -> v or y or Enter
# with mouse -> with opt key
# [tmux 2\.6とreattach\-user\-namespace]( https://blog.nijohando.jp/post/tmux-2.6-and-reattach-to-user-namespace/ )
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi     v send-keys -X begin-selection"
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi     V send-keys -X select-line"
# if "which nkf && which pbcopy" "bind-key -T copy-mode-vi   C-v send-keys -X rectangle-toggle"
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi     y send-keys -X copy-pipe-and-cancel 'nkf -w | pbcopy'"
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi     Y send-keys -X copy-line"
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'nkf -w | pbcopy'"
if "which nkf && which pbcopy" "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'nkf -w | pbcopy'"
bind C-p paste-buffer
