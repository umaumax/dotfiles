[
  {
    "key": "ctrl+m",
    "command": "editor.action.insertLineAfter",
    // "command": "type",
    // "args": {
    // "text": "\n"
    // },
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+h",
    "command": "cursorLeft"
  },
  {
    "key": "ctrl+l",
    "command": "cursorRight"
  },
  {
    "key": "ctrl+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  // for cmd + shift + p
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "cmd+k cmd+j",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+f",
    "command": "deleteLeft",
    "when": "isMac && textInputFocus"
  },
  {
    "key": "cmd+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+c",
    "command": "cancelSelection",
    "when": "editorTextFocus && editorHasSelection && isMac"
  },
  {
    "key": "cmd+j",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus && editorHasSelection"
  },
  {
    "key": "cmd+k cmd+k",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus && editorHasSelection"
  },
  // for GitHub copilot
  {
    "key": "cmd+enter",
    "command": "editor.action.inlineSuggest.commit",
    "when": "isMac && editorTextFocus && suggestWidgetVisible"
  },
  {
    "key": "ctrl+e",
    "command": "cursorLineEnd",
    "when": "isWindows"
  },
  {
    "key": "ctrl+numpad_add",
    "command": "editor.action.fontZoomIn",
    "when": "isWindows"
  },
  {
    "key": "ctrl+shift+oem_plus",
    "command": "editor.action.fontZoomIn",
    "when": "isWindows"
  },
  {
    "key": "ctrl+oem_plus",
    "command": "editor.action.fontZoomIn",
    "when": "isWindows"
  },
  {
    "key": "ctrl+numpad_subtract",
    "command": "editor.action.fontZoomOut",
    "when": "isWindows"
  },
  {
    "key": "ctrl+shift+oem_minus",
    "command": "editor.action.fontZoomOut",
    "when": "isWindows"
  },
  {
    "key": "ctrl+oem_minus",
    "command": "editor.action.fontZoomOut",
    "when": "isWindows"
  },
  {
    "key": "ctrl+numpad0",
    "command": "editor.action.fontZoomReset",
    "when": "isWindows"
  },
  {
    "key": "cmd+y",
    "command": "redo",
    "when": "isMac"
  },
  {
    "key": "ctrl+up",
    "command": "cursorTop",
    "when": "isWindows && textInputFocus"
  },
  {
    "key": "ctrl+down",
    "command": "cursorBottom",
    "when": "isWindows && textInputFocus"
  },
  {
    "key": "tab",
    "command": "selectNextQuickFix",
    "when": "editorFocus && quickFixWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevQuickFix",
    "when": "editorFocus && quickFixWidgetVisible"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.terminal.new",
    "when": "isWindows && terminalFocus"
  },
  {
    "key": "ctrl+right",
    "command": "workbench.action.terminal.focusNext",
    "when": "isWindows && terminalFocus"
  },
  {
    "key": "ctrl+left",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "isWindows && terminalFocus"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+right",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "shift+cmd+]",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "cmd+left",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "shift+cmd+[",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.openEditorAtIndex1",
    "when": "isWindows"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.openEditorAtIndex2",
    "when": "isWindows"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.openEditorAtIndex3",
    "when": "isWindows"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.openEditorAtIndex4",
    "when": "isWindows"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.openEditorAtIndex5",
    "when": "isWindows"
  },
  {
    "key": "ctrl+6",
    "command": "workbench.action.openEditorAtIndex6",
    "when": "isWindows"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.openEditorAtIndex7",
    "when": "isWindows"
  },
  {
    "key": "ctrl+8",
    "command": "workbench.action.openEditorAtIndex8",
    "when": "isWindows"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.openEditorAtIndex9",
    "when": "isWindows"
  },
  {
    "key": "cmd+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "cmd+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "cmd+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "cmd+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "cmd+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "cmd+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "cmd+9",
    "command": "workbench.action.openEditorAtIndex9"
  },
  {
    "key": "cmd+k cmd+h",
    "command": "workbench.action.editor.nextChange",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+k cmd+shift+h",
    "command": "workbench.action.editor.previousChange",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+k cmd+h",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "isInDiffEditor"
  },
  {
    "key": "cmd+k cmd+shift+h",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "isInDiffEditor"
  },
  // for reverse expandLineSelection (cmd+l)
  {
    "key": "cmd+shift+l",
    "command": "vscode-extension-eval.action",
    "when": "editorHasSelection",
    "args": {
      "lang": "ts",
      "command": [
        "function clamp(value: number, min: number, max: number): number {",
        "  return Math.min(Math.max(value, min), max);",
        "}",
        "const editor = vscode.window.activeTextEditor!;",
        "const document = editor.document;",
        "const selection = editor.selection;",
        "const startLine = document.lineAt(",
        "  clamp(selection.start.line - 1, 0, document.lineCount - 1)",
        ");",
        "editor.selection = new vscode.Selection(",
        "  startLine.range.start,",
        "  selection.end",
        ");"
      ]
    }
  },
  {
    "key": "alt+l",
    "command": "expandLineSelection",
    "when": "isWindows"
  },
  // for windows
  {
    "key": "alt+shift+l",
    "command": "vscode-extension-eval.action",
    "when": "editorHasSelection",
    "args": {
      "lang": "ts",
      "command": [
        "function clamp(value: number, min: number, max: number): number {",
        "  return Math.min(Math.max(value, min), max);",
        "}",
        "const editor = vscode.window.activeTextEditor!;",
        "const document = editor.document;",
        "const selection = editor.selection;",
        "const startLine = document.lineAt(",
        "  clamp(selection.start.line - 1, 0, document.lineCount - 1)",
        ");",
        "editor.selection = new vscode.Selection(",
        "  startLine.range.start,",
        "  selection.end",
        ");"
      ]
    }
  },
  // select all word under cursor by multi cursor: e.g. cmd+d, cmd+a alternative for cmd+shift+l
  {
    "key": "cmd+a",
    "command": "editor.action.selectHighlights",
    "when": "editorHasSelection && editorFocus && !findInputFocussed"
  },
  // {
  //   "key": "ctrl+s",
  //   "command": "vim-search-and-replace.start",
  //   "when": "editorFocus",
  // },
  {
    "key": "ctrl+s",
    "command": "vscode-extension-eval.action",
    "when": "isMac && editorFocus",
    "args": {
      "lang": "ts",
      "command": [
        "import { TextEditor, Selection } from 'vscode';",
        "function selectWordAtCursorPosition(editor: TextEditor): boolean {",
        "    if (!editor.selection.isEmpty) {",
        "        return true;",
        "    }",
        "    const cursorWordRange = editor.document.getWordRangeAtPosition(editor.selection.active);",
        "    if (!cursorWordRange) {",
        "        return false;",
        "    }",
        "    const newSe = new Selection(cursorWordRange.start.line, cursorWordRange.start.character, cursorWordRange.end.line, cursorWordRange.end.character);",
        "    editor.selection = newSe;",
        "    return true;",
        "}",
        "(() => {",
        "    const editor = vscode.window.activeTextEditor!;",
        "    if (!editor) { return; }",
        "    let word = '';",
        "    if (editor.selection.isEmpty) {",
        "        if (!selectWordAtCursorPosition(editor)) {",
        "            vscode.window.showInformationMessage('vscode-extension-eval: Can not get word at cursor!');",
        "            return;",
        "        }",
        "    }",
        "    word = editor.document.getText(editor.selection);",
        "    console.log('word is', word);",
        "    vscode.commands.executeCommand('vim-search-and-replace.start', word);",
        "    vscode.window.showInformationMessage('vscode-extension-eval: use ctrl+j or ctrl+k');",
        "})();"
      ]
    }
  },
  {
    "key": "ctrl+j",
    "command": "vim-search-and-replace.expandSelection",
    "when": "isMac && vim-search-and-replace.active",
    "args": {
      "down": 1
    }
  },
  {
    "key": "ctrl+k",
    "command": "vim-search-and-replace.expandSelection",
    "when": "isMac && vim-search-and-replace.active",
    "args": {
      "up": 1
    }
  },
  {
    "key": "cmd+'",
    "command": "editor.togglequotes"
  },
  {
    "key": "cmd+\"",
    "command": "editor.togglequotes"
  },
  {
    "key": "ctrl+'",
    "command": "editor.togglequotes"
  },
  {
    "key": "ctrl+\"",
    "command": "editor.togglequotes"
  },
  {
    "key": "shift+enter",
    "command": "findThenJump.initiate",
    "when": "isMac && editorTextFocus"
  },
  {
    "key": "cmd+h",
    "command": "textmarker.toggleHighlight",
    "when": "editorTextFocus"
  }
]
