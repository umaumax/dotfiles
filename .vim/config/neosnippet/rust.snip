snippet string_const
	"${0}".to_string()

snippet string_from
alias stringfrom
	String::from("${0}")

snippet derive_Debug
abbr println!("{:?} or {:#?}")
	#[derive(Debug)]${0}

snippet cfg_test
	#[cfg(test)]${0}

snippet super
	use super::*;${0}

# NOTE: below join wrapper always return ""
snippet module_fzf
alias fzf_module,use_fzf
	`join([], feedkeys("\<Plug>(fzf#rust_module_header)", ''))`${0}

snippet return_type
	 -> ${0}

snippet segmentation_fault
	unsafe {
	  *(0 as *mut u32) = 42;
	}${0}

snippet type_debug
alias what_is_this_type
abbr way to know type via build message
	let _ :() = ${0};

snippet sleep_ms
abbr use std::{thread, time};
	thread::sleep(time::Duration::from_millis(${0}));

snippet sleep_us
abbr use std::{thread, time};
	thread::sleep(time::Duration::from_micros(${0}));

snippet sleep_ns
abbr use std::{thread, time};
	thread::sleep(time::Duration::from_nanos(${0}));

snippet fibonacci
	pub fn fib(n: i32) -> i32 {
		match n {
			0 => 0,
			1 => 1,
			_ => fib(n - 2) + fib(n - 1),
		}
	}${0}

snippet arc_mutex_new
	Arc::new(Mutex::new(${0}))

snippet thread_spawn
	thread::spawn(move || {${0}});

snippet args
abbr use std::env;
	let args: Vec<String> = env::args().collect();${0}

snippet stopwatch
alias calc_time
	use std::time::Instant;

	let start = Instant::now();
	${0}
	let end = start.elapsed();
	println!("{} sec", end.as_secs_f64());

snippet pi
	std::f64::consts::PI${0}

snippet println
	println!("{:?}", ${0});

snippet result_error
	Result<()${0}, Box<dyn std::error::Error + Sync + Send>>

snippet anyhow_result_conv
	.map_err(|e| anyhow::anyhow!(e))?${0}

snippet anyhow_err
  Err(anyhow::anyhow!("$0"))

snippet anyhow_ok
	Ok::<(), anyhow::Error>(()){$0}

snippet Error
abbr std::error::Error
	std::error::Error${0}

snippet box_error
	Box<dyn std::error::Error>${0}

snippet main_result
	fn main() -> Result<(), Box<dyn std::error::Error>> {
		println!("Hello World!");
		${0}
		Ok(())
	}

snippet main_tokio_result
#[tokio::main]
	async fn main() -> Result<(), Box<dyn std::error::Error>> {
			println!("Hello, world!");
			${0}
			Ok(())
	}

snippet From_impl
	impl From<${1:#:src}> for ${2:#:dst} {
			fn from(d: $1) -> Self {
					Self {
						${0}
					}
			}
	}

snippet Iterator_impl
	impl Iterator for ${1} {
			type Item = ${2};
			fn next(&mut self) -> Option<Self::Item> {
					${0}
			}
	}

snippet filepath_arg
alias arg_filepath
	impl AsRef<Path>${0}

snippet arg_string
	impl Into<String>${0}

snippet arg_option
	impl Into<Option<${0}>>

snippet test_example
	#[cfg(test)]
	mod tests {
			use super::*;

			#[test]
			fn test_${0}() {
			}
	}

snippet structopt_main
	use structopt::StructOpt;

	#[derive(StructOpt)]
	struct Cli {
			#[structopt(
					long = "verbose",
					help = "verbose output log"
			)]
			verbose: bool,
	}

	fn main() -> anyhow::Result<()> {
			let cli = Cli::from_args();
			if cli.verbose {
					println!("start main function");
			}
	}${0}

snippet tokio_sleep
alias sleep_tokio
	tokio::time::sleep(tokio::time::Duration::from_millis(${0})).await;

snippet tokio_spwan
	tokio::spawn(async move {
			${0}
			Ok::<(), anyhow::Error>(())
	});

snippet hashmap
	use std::collections::HashMap;

	let mut scores = HashMap::new();

	${0}
	scores.insert(String::from("Blue"), 10);
