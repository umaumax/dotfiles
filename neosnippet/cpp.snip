# wrap command
snippet wcout
options word
	std::cout << ${0}`NeoSnippetWrapLine('wcout')` << std::endl;
snippet wcerr
options word
	std::cerr << ${0}`NeoSnippetWrapLine('wcerr')` << std::endl;
snippet wclog
options word
	std::clog << ${0}`NeoSnippetWrapLine('wclog')` << std::endl;
snippet wif
options word
	if (`NeoSnippetWrapLine('wif')`) {
		${0}
	}

# REQUIRED: ctags
snippet funcname
	`CppFuncName()`${0}

# NOTE: below join wrapper always return ""
snippet include_fzf
alias fzf_include
	`join([], feedkeys("\<Plug>(fzf#cpp_include_header)", ''))`${0}

snippet contains
alias find_string
abbr !=: found, ==: not found
	(${1:#:str}.find(${2:#:keyword}) != std::string::npos)${0}

snippet contains_all
alias find_string_all
	std::string keyword = ${1};
	if (keyword != "") {
	  std::string::size_type pos = 0;
	  while ((pos = target.find(keyword, pos)) != std::string::npos) {
	    pos += keyword.length();
	    ${0}
	  }
	}

snippet prefix_string
alias string_prefix
	if (${1:#:target}.size() >= ${2:#:prefix}.size() && std::equal(std::begin($2), std::end($2), std::begin($1))) {
	  ${0}
	}

snippet cast_dynamic
abbr for class
	dynamic_cast<${1:#:Type}>(${2:#:TARGET})${0}
snippet cast_static
abbr for not pointer
	static_cast<${1:#:Type}>(${2:#:TARGET})${0}
snippet cast_reinterpret
abbr for pointer
	reinterpret_cast<${1:#:Type}>(${2:#:TARGET})${0}
snippet cast_const
abbr for const cast
	const_cast<${1:#:Type}>(${2:#:TARGET})${0}
snippet cast_void_pointer_to_rvalue
	auto &${0} == static_cast<$2&>(*reinterpret_cast<${2:#:type}*>(${1:#:pointer}));

snippet debug_print
options head
abbr << __func__ << ...
	std::cerr << __func__ << ": " << ${1:#:msg} << " (" __FILE__ ":" << __LINE__ << ')' << std::endl;${0}

snippet to_bool
alias bool_to_string
	((${0:#:bool value})?"true":"false")

# NOTE: pp is too short to select
snippet pppp
alias ppp
	#include "cxx-prettyprint/prettyprint.hpp" // https://github.com/louisdx/cxx-prettyprint${0}
snippet streampp
	#include "umaumaxcpp/streampp.hpp" // FORBIDDEN_COMMIT_MAGIC_KEYWORD${0}

snippet std
alias s
	std::${0}

snippet stdcout
alias cout
	std::cout << ${0} << std::endl;

snippet stdcerr
alias cerr
	std::cerr << ${0} << std::endl;

snippet stdclog
alias clog
	std::clog << ${0} << std::endl;

# [iq1snippets/cpp\.snip at master Â· koturn/iq1snippets]( https://github.com/koturn/iq1snippets/blob/master/cpp11/cpp.snip )
# for vector etc...
snippet cout_all
	std::copy(std::begin(${1}), std::end($1), std::ostream_iterator<const decltype($1)::value_type&>(std::cout, ${2:" "}));${0}

snippet fstream
	std::${1:fstream} ${2:fs}(${3:#:filename}${4:, std::ios::binary});
	if (!$2.is_open()) {
	  ${5:std\:\:cerr << "Failed to open\: " << $3 << std\:\:endl;}
	}
	${0}

snippet sleep
	std::this_thread::sleep_for(std::chrono::${1:milliseconds}(${2:1000}));${0}

snippet numeric_limits
	std::numeric_limits<${1:int}>::${0:#:max or min}()

snippet foreach_iterator
	for (std::${1:vector}<${2}>::iterator ${3:itr} = ${4}.begin(); $3 != $4.end(); ++$3) {
	  ${0}
	}

snippet string
	std::string ${0}

snippet vector
abbr std::vector<T>
	std::vector<${1:int}> ${0}

snippet vector2d
abbr std::vector<std::vector<T>>
	std::vector<std::vector<${1:int}>> ${2:#:varname}(${3:#:height}, std::vector<$1>(${0:#:width}))
snippet vector3d
abbr std::vector<std::vector<std::vector<T>>>
	std::vector<std::vector<std::vector<${1:int}>>> ${2:#:varname}(${3:#:out}, std::vector<std::vector<$1>>(${4:#:mid}, std::vector<$1>(${0:#:in})))

snippet vector_copy_with_cast_constractor
	std::vector<${1:#:dst type}> ${2:#:dst var name}(${3:#:src var name}.begin(), $3.end());${0}
snippet vector_copy_with_cast
	${1:#:dst var name}.resize(${2:#:src var name}.size());
	std::copy($2.begin(), $2.end(), $1.begin());${0}
snippet stream_vector
	std::copy(${1:#:vector}.begin(), $1.end(), ostream_iterator<${2:#:type}>(${3:std::cout}, " "));${0}

snippet random
	std::${1:mt19937} ${2:rnd}((std::random_device())())${0}

snippet thread
	std::thread ${1:#:name}([${2:&}]{
	  ${0}
	});

snippet async
	auto ${1:#:name} = std::async(std::launch::${2:async}, [${3:&}]{
	  ${0}
	});

snippet unused
abbr avoid unused variable warning
	(void)${0:#:var};

snippet for_auto
	for (auto&& ${1:e} : ${2:#:container}) {
	  ${0}
	}

snippet try
	try {
	  ${0}
	} catch (${1:const std::exception&} ${2:e}) {
	  ${3:std::cerr << $2.what() << std::endl;}
	}

snippet for_dump_map
	for (auto& v:${0:#:map}) {
	  std::cout << v.first << " : " << v.second << std::endl;
	}
snippet for_dump_vec
	for (auto& v:${0:#:map}) {
	  std::cout << v << ", ";
	}
	std::cout << std::endl;

# <algorithm>
snippet for_each
abbr std::for_each <algorithm>
	std::for_each(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    ${0}
	  });

snippet all_of
abbr std::all_of <algorithm>
	std::all_of(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    return ${0};
	  });

snippet none_of
abbr std::none_of <algorithm>
	std::none_of(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    return ${0};
	  });

snippet any_of
abbr std::any_of <algorithm>
	std::any_of(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    return ${0};
	  });

snippet sort
abbr std::sort <algorithm>
	std::sort(std::begin(${1}), std::end($1))${0}

snippet sort_lambda
abbr std::sort <algorithm>
	std::sort(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& x, const decltype($1)::value_type& y) {
	    return ${0:#:x < y};
	  });

snippet sort_stable
abbr std::stable_sort <algorithm>
	std::stable_sort(std::begin(${1}), std::end($1))${0}

snippet sort_stable_lmabda
abbr std::stable_sort <algorithm>
	std::stable_sort(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& x, const decltype($1)::value_type& y) {
	    return ${0:#:x < y};
	  });

snippet min_assigne
	$1 = ${1} < ${2} ? $1 : $2;${0}
snippet max_assigne
	$1 = ${1} > ${2} ? $1 : $2;${0}
snippet min
	(${1} < ${2} ? $1 : $2)${0}
snippet max
	(${1} > ${2} ? $1 : $2)${0}

snippet min_element
abbr nullptr? <algorithm>
	*std::min_element(std::begin(${1}), std::end($1))${0}

snippet max_element
abbr nullptr? <algorithm>
	*std::max_element(std::begin(${1}), std::end($1))${0}

snippet find
abbr <algorithm>
	std::find(std::begin(${1}), std::end($1), ${2:#:value})${0}

snippet find_if
abbr std::find_if <algorithm>
	std::find_if(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    return ${0};
	  });

snippet remove
abbr std::remove <algorithm>
	std::remove(std::begin(${1}), std::end($1), ${2:#:value})${0}

snippet remove_if
abbr std::remove_if <algorithm>
	std::remove_if(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:e}) {
	    return ${0};
	  });

snippet remove_erase
	${1}.erase(std::remove(std::begin($1), std::end($1), ${2:#:value}), std::end($1));${0}

snippet remove_erase_if
	${1}.erase(
	  std::remove_if(
	    std::begin($1),
	    std::end($1),
	    [](const decltype($1)::value_type& ${2:e}) {
	      return ${0};
	    }),
	  std::end($1));

snippet unique
abbr std::unique <algorithm>
	std::unique(std::begin(${1}), std::end($1))${0}

snippet unique_lambda
abbr std::unique <algorithm>
	std::unique(
	  std::begin(${1}),
	  std::end($1),
	  [](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
	    return ${0:#:x == y};
	  });

snippet unique_erase
	${1}.erase(std::unique(std::begin($1), std::end($1)), std::end($1));${0}

snippet unique_erase_lambda
	${1}.erase(
	  std::unique(
	    std::begin($1),
	    std::end($1),
	    [](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
	      return ${0:#:x == y};
	    }),
	  std::end($1));

snippet copy
abbr std::copy <algorithm>
	std::copy(std::begin(${1}), std::end($1), std::begin(${2}))${0}

snippet sum
	std::accumulate(std::begin(${1}), std::end($1), ${2:decltype($1)::value_type()})${0}

snippet time_measurement
alias chrono_time, stopwatch, calc_time
abbr REQUIRED: #include <chrono>
	std::chrono::system_clock::time_point ${1:#:start}_start = std::chrono::system_clock::now();
	${0}
	double $1_elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now() - $1_start).count();

snippet duration_cast
abbr std::chrono::duration_cast<T>() <chrono>
	std::chrono::duration_cast<std::chrono::${1:milliseconds}>(${2})${0}
snippet shared_void_pointer_cast
alias cast_shared_void_pointer
abbr cast std::shared_ptr<void> to some pointer (also unique pointer)
	(${0:#:dst pointer type}*)${1:#:smart pointer var name}.get()

snippet mutex
  std::unique_lock<std::mutex> lock(${0:mutex});

snippet lock_guard
	{
	  std::lock_guard<decltype($2)> ${1:lock}(${2:#:mutex});
	  ${0}
	}

snippet lock_guard_adopt
	{
	  std::lock_guard<decltype($2)> ${1:lock}(${2:#:mutex}, std::adopt_lock);
	  ${0}
	}

snippet join
	std::ostringstream ${1:oss};
	if (!${2}.empty()) {
	  std::copy(std::begin($2), std::prev(std::end($2)), std::ostream_iterator<const decltype($2)::value_type&>($1, ${3:","}));
	  $1 << *std::rbegin($2);
	}
	${0}

snippet join_to_string
	${1}.empty() ? "" : std::accumulate(
	  std::next(std::begin($1)),
	  std::end($1),
	  std::to_string($1[0]),
	  [](const std::string& ${2:acc}, const decltype($1)::value_type& ${3:e}) {
	    return $2 + ${4:","} + std::to_string($3);
	  })${0}

snippet split_function
	#include <string>
	#include <vector>
	std::vector<std::string> Split(std::string text, std::string delims) {
	  std::vector<std::string> vec;
	  std::string::size_type spos = 0, epos;
	  if (text == "") return vec;
	  while ((epos = text.find_first_of(delims, spos)) != std::string::npos) {
	    vec.emplace_back(text.substr(spos, epos - spos));
	    spos = epos + 1;
	  }
	  vec.emplace_back(text.substr(spos));
	  return vec;
	}
	${0}

snippet split_by_char
	#include <sstream>
	#include <vector>
	std::vector<std::string> ${1:tokens};
	std::istringstream ${2:iss}(${3:#:string});
	for (std::string ${4:token}; std::getline($2, $4, ${5:','});) {
	  $1.emplace_back($4);
	}
	${0}

snippet vector_cout
	for (auto&& v : ${1:#:vector}) {
	  std::cout << v << " ";
	}
	std::cout << std::endl;${0}

# FYI: [c\+\+ \- std::string to char\* \- Stack Overflow]( https://stackoverflow.com/questions/7352099/stdstring-to-char/42308974 )
snippet string_to_char_vector
	std::vector<char> cstr(${1}.c_str(), $1.c_str() + $1.size() + 1);${0}
snippet string_to_char_snprintf
	std::snprintf(${1:#:pointer}, ${2:#:size}, "%s", ${0:#:str})

snippet regex
	std::regex ${1:#:name}("${2:#:pattern}");${0}

snippet regex_match_loop
	for (std::sregex_iterator ${1:itr} = std::sregex_iterator(std::begin(${2:#:text}), std::end($2), ${3:#:regex}), ${4:end}; $1 != $4; ++$1) {
	  ${0}
	}

snippet regex_split_loop
	for (std::sregex_iterator ${1:itr} = std::sregex_iterator(std::begin(${2:#:text}), std::end($2), ${3:#:regex}, -1), ${4:end}; $1 != $4; ++$1) {
	  ${0}
	}

snippet regex_replace
	std::regex_replace(${1:#:text}, std::regex("${2:#:pattern}"), "${3:#:after}");${0}

snippet extern_c
	#ifdef __cplusplus
	extern "C" {
	#endif  // __cplusplus

	${0}

	#ifdef __cplusplus
	}
	#endif  // __cplusplus

snippet if_cpp11
	#if __cplusplus >= 201103L
	${0}
	#endif  // __cplusplus >= 201103L

snippet if_cpp14
	#if __cplusplus >= 201402L
	${0}
	#endif  // __cplusplus >= 201402L

snippet if_gcc
	#ifdef __GNUC__
	${0}
	#endif  // __GNUC__

snippet if_x64
	#if defined(__x86_64__) || defined(_WIN64) || defined(__MINGW64__)
	${0}
	#endif  // defined(__x86_64__) || defined(_WIN64) || defined(__MINGW64__)

snippet class_template
	template <class T>
	class ${1:#:class name} {
	  public:
	  $1(){};
	  ~$1(){};

	  private:
	  int ${2:#:method name}(T xxx);
	};

	template <>
	inline int $1<int>::$2(int xxx) {
	  return 0;
	}
	template <>
	inline int $1<char>::$2(char xxx) {
	  return 0;
	}
	${0}

snippet stream_eof_detection
	  std::streampos archive_offset    = iss.tellg();
	  std::streamoff stream_end_offset = iss.seekg(0, std::ios_base::end).tellg();
	  iss.seekg(archive_offset);
	  // some processing
	  if (iss.tellg() == stream_end_offset - 1) {
	    ${0:#:eof processing}
	  }

snippet boost_serialization_headers
alias serialization_headers
	#include <boost/archive/text_iarchive.hpp>
	#include <boost/archive/text_oarchive.hpp>
	#include <boost/serialization/map.hpp>
	#include <boost/serialization/serialization.hpp>
	#include <boost/serialization/shared_ptr.hpp>
	#include <boost/serialization/string.hpp>
	#include <boost/serialization/vector.hpp>
	${0}
snippet serialization
alias boost_serialization
	boost::archive::text_oarchive toa(${1:#:ostream});${0}
snippet deserialization
alias boost_deserialization
	boost::archive::text_iarchive tia(${1:#:istream});${0}

snippet include-guard
	#ifndef ${1:`substitute(toupper(expand('%')),'\.', '_', 'g')`}
	#define $1
	#endif  // $1${0}

snippet include-guard-with-include-prefix
	#ifndef ${1:INCLUDE_`substitute(toupper(expand('%')),'\.', '_', 'g')`}
	#define $1
	#endif  // $1${0}

snippet namespace
	namespace ${1:#: namespace} {
	}  // namespace $1${0}

snippet ros_info
alias ros_cout, ROS_INFO
	ROS_INFO_STREAM(${0:#: "xxx" << yyy});
snippet ros_error
alias ros_cerr, ROS_ERROR
	ROS_ERROR_STREAM(${0:#: "xxx" << yyy});
snippet ros_warn
alias ros_clog, ROS_LOG
	ROS_WARN_STREAM(${0:#: "xxx" << yyy});

snippet ros_debug
alias ROS_DEBUG
	ROS_DEBUG_STREAM(${0:#: "xxx" << yyy});

snippet assert_with_fixed_message
	assert((${1:#:condition}) && "${0:#:message}");

snippet assert_with_formated_message
	assert((${1:#:condition}) || !std::fprintf(stderr, "%s:%d ${0:#:format}\n", __FILE__, __LINE__));

snippet sto_exception_try_catch
abbr <stdexcept> throw for gdb bt
	try {
	  ${0}
	} catch (const std::invalid_argument& e) {
	  std::fprintf(stderr, "invalid_argument %s\n", e.what());
	  std::flush(std::cerr);
	  throw;
	} catch (const std::out_of_range& e) {
	  std::fprintf(stderr, "invalid_argument %s\n", e.what());
	  std::flush(std::cerr);
	  throw;
	}

# [c\+\+ \- Get home directory in Linux \- Stack Overflow]( https://stackoverflow.com/questions/2910377/get-home-directory-in-linux/2910392#2910392 )
snippet home_dir
alias get_home_dir
	#include <unistd.h>
	#include <sys/types.h>
	#include <pwd.h>

	struct passwd *pw = getpwuid(getuid());
	const char *homedir = pw->pw_dir;
	${0}

snippet is_file_exist
alias file_exist
	#include<string>
	#include<fstream>
	#include<iostream>

	bool checkFileExistence(const std::string& str)
	{
	    std::ifstream ifs(str);
	    return ifs.is_open();
	}
	${0}

snippet push_back
	emplace_back${0}

snippet transform
	std::transform(${1:#:src}.begin(), $1.end(), std::back_inserter(${2:#:dst}), [](${3:#:src type} ${4:#:src var}) {
	  return ${5:#:dst val};
	});
	${0}

snippet breakpoint
abbr REQUIRED: <signal.h>
	raise(SIGTRAP);${0}

snippet include__user
alias incl__user
	#include "${0}"
snippet include__system
alias incl__system
	#include <${0}>

snippet include_chrono
alias incl_chrono
	#include <chrono>${0}
snippet include_functional
alias incl_functional
	#include <functional>${0}
snippet include_iomanip
alias incl_iomanip
	#include <iomanip>${0}
alias incl_algorithm
	#include <algorithm>${0}

snippet clang-format-off-on
	// clang-format off
	// clang-format on${0}

snippet sprintf_string
alias snprintf_string
	[&]() {
	  char buf[1024];
	  std::snprintf(buf, sizeof(buf), ${1:#:format});
	  return std::string(buf);
	}();${0}

snippet string_lambda
alias lambda_string
	[&]() {
	  std::stringstream ss;
	  ss << "${0}";
	  return ss.str();
	}();

snippet sprintf_library
alias library_sprintf
	// clang-format off
	namespace fmt { template <class... Args> std::string snprintf(char* buff, std::size_t n, const char* const format, Args... args) { std::snprintf(buff, n, format, args...); return std::string(buff); } template <class... Args> std::string snprintf(std::size_t n, const char* const format, Args... args) { char buff[n]; return snprintf(buff, n, format, args...); } template <class... Args> std::string sprintf(const char* const format, Args... args) { std::size_t n = std::snprintf(nullptr, 0, format, args...); return snprintf(n, format, args...); } }  // namespace fmt
	// clang-format on${0}

snippet float_equal
abbr #include <limits>
	(std::abs(${1} - ${2}) <= std::numeric_limits<float>::epsilon())${0}

snippet double_equal
abbr #include <limits>
	(std::abs(${1} - ${2}) <= std::numeric_limits<double>::epsilon())${0}

snippet __FUNC__
alias func_macro, FUNC
abbr no mangling name(method without class name)
	__func__${0}

snippet __LINE__
alias line_macro, LINE
	__LINE__${0}

snippet __FILE__
alias file_macro, FILE
	__FILE__${0}

snippet using_typedef
	using ${1:#:new type name} = ${2:#: type};${0}

snippet typedef
	typedef ${1:#:type} ${2:#:new type name};${0}

snippet malloc
	${1:#:type} *${2:#:var name} = reinterpret_cast<$1*>(malloc(sizeof($1)*${3:#:number}));${0}

# WARN: don't use auto& at index
snippet for_blocking
	#include <algorithm>
	const int $1$1_step = ${5:1};
	const int $2$2_step = ${6:1};
	for (int $1$1 = 0; $1$1 < ${3:#:j_max}; $1$1 += $1$1_step) {
	  const auto $1$1_end = std::min($1$1 + $1$1_step, $3);
	  for (int $2$2 = 0; $2$2 < ${4:#:i_max}; $2$2 += $2$2_step) {
	    const auto $2$2_end = std::min($2$2 + $2$2_step, $4);
	    for (int ${1:j} = $1$1; $1 < $1$1_end; ++$1) {
	      for (int ${2:i} = $2$2; $2 < $2$2_end; ++$2) {
	        ${0}
	      }
	    }
	  }
	}

snippet pp_2d_array
	#include <iomanip>
	for (int j = 0; j < ${2:#:j_max}; j++) {
	  for (int i = 0; i < ${3:#:i_max}; i++) {
	    std::cout << std::setw(4) << ${1:#:array}[j][i];
	  }
	  std::cout << std::endl;
	}
	${0}

snippet alignas_malloc_at_any_target
abbr #include <cstlib>, std::free()
	${1:#:type}* ${2:#:var name};
	(int)posix_memalign(reinterpret_cast<void**>(&$2), ${3:#:alignment}, sizeof($1) * ${4:#:size});${0}

snippet alignas_malloc_at_linux
abbr not Mac OS X
	${1:#:type}* ${2:#:var name} = static_cast<$1*>(aligned_alloc(${3:#:alignment}, (sizeof($1) * ${4:#:size} + ($3 - 1)) & ~($3 - 1)));${0}

snippet alignas_alignof
	alignas(alignof(${0:float32x4_t}))

snippet float_test_headers
	#include <cassert>
	#include <cfenv>
	#include <cstdio>
	#include <limits>
	#include <string>
	#include <typeinfo>
	${0}
snippet float_test_assert
abbr can't use string as dummy value use number
	#undef VAR_NAME
	#define VAR_NAME(x) (#x "")
	assert(!std::fetestexcept(FE_OVERFLOW) || !std::fprintf(stderr, "%s:%d RAISED FLOATING-POINT OVERFLOW: %s %s = %s\n", __FILE__, __LINE__, typeid(${1:#:var name}).name(), VAR_NAME($1), std::to_string($1).c_str()));
	assert(!std::fetestexcept(FE_UNDERFLOW) || !std::fprintf(stderr, "%s:%d RAISED FLOATING-POINT UNDERFLOW: %s %s = %s\n", __FILE__, __LINE__, typeid($1).name(), VAR_NAME($1), std::to_string($1).c_str()));
	${0}
snippet float_test_clear_assert
	assert((std::feclearexcept(FE_ALL_EXCEPT) == 0) || !std::fprintf(stderr, "%s:%d FE_ALL_EXCEPT FAILED\n", __FILE__, __LINE__));${0}
snippet float_test_clear
abbr can't use string as dummy value use number
	#undef VAR_NAME
	#define VAR_NAME(x) (#x "")
	!std::fetestexcept(FE_OVERFLOW) || !std::fprintf(stderr, "%s:%d RAISED FLOATING-POINT OVERFLOW: %s %s = %s\n", __FILE__, __LINE__, typeid(${1:#:var name}).name(), VAR_NAME($1), std::to_string($1).c_str());
	!std::fetestexcept(FE_UNDERFLOW) || !std::fprintf(stderr, "%s:%d RAISED FLOATING-POINT UNDERFLOW: %s %s = %s\n", __FILE__, __LINE__, typeid(${1:#:var name}).name(), VAR_NAME($1), std::to_string($1).c_str());
	//  (std::feclearexcept(FE_ALL_EXCEPT) == 0) || !std::fprintf(stderr, "%s:%d FE_ALL_EXCEPT FAILED\n", __FILE__, __LINE__);
	std::fprintf(stderr, "%s:%d FE_ALL_EXCEPT %s\n", __FILE__, __LINE__, (std::feclearexcept(FE_ALL_EXCEPT) == 0) ? "SUCCESS" : "FAILED");
	${0}

snippet get_number_of_supporting_threads
abbr USE HINT ONLY
	#include <thread>
	std::thread::hardware_concurrency()${0}

snippet split_whitespaces
	std::vector<std::string> split_whitespaces(const std::string& str) {
	  std::vector<std::string> rets;
	  auto trimed_str = str;
	  boost::algorithm::trim(trimed_str);
	  if (trimed_str == "") {
	    return rets;
	  }
	  boost::algorithm::split(rets, trimed_str, boost::is_any_of(" "), boost::token_compress_on);
	  return rets;
	}${0}

snippet rm_file
alias rm
	std::remove(${0});

# FYI: [How can I get the list of files in a directory using C or C\+\+? \- Stack Overflow]( https://stackoverflow.com/questions/612097/how-can-i-get-the-list-of-files-in-a-directory-using-c-or-c )
snippet opendir
alias ls
	std::vector<std::string> Opendir(const std::string &path) {
	  std::vector<std::string> files;
	  DIR *dir;
	  struct dirent *ent;
	  if ((dir = opendir(path.c_str())) != nullptr) {
	    while ((ent = readdir(dir)) != nullptr) {
	      files.emplace_back(ent->d_name);
	    }
	    closedir(dir);
	  }
	  return files;
	}${0}

snippet filter_regexp
	std::vector<std::string> FilterRegex(const std::vector<std::string> &src, const std::string &regex_pattern) {
	  std::vector<std::string> ret;
	  std::regex re(regex_pattern);
	  std::copy_if(src.begin(), src.end(), std::back_inserter(ret), [&re](std::string filename) {
	    return std::regex_match(filename, re);
	  });
	  return ret;
	}${0}

snippet file_write
	{
	  std::ofstream ofs;
	  ofs.open(${1:#:filename}, std::ios::out | std::ios::binary | std::ios::trunc);
	  if (!ofs) {
	    std::cerr << "open failed :" << $1 << std::endl;
	    return 1;
	  }
	  ofs.write(${2:#:address}, ${3:#:size});
	}${0}

# FYI: [c\+\+11 \- How to execute a command and get return code stdout and stderr of command in C\+\+ \- Stack Overflow]( https://stackoverflow.com/questions/52164723/how-to-execute-a-command-and-get-return-code-stdout-and-stderr-of-command-in-c )
snippet exec
	#include <array>
	#include <stdexcept>
	#include <string>

	int Exec(const std::string& cmd, std::string& output) {
	  constexpr std::size_t buffer_size = 128;
	  std::array<char, buffer_size> buffer;
	  auto pipe = popen(cmd.data(), "r");
	  if (!pipe) throw std::runtime_error("popen() failed!");

	  while (!std::feof(pipe)) {
	    // NOTE: only capture stdout
	    if (std::fgets(buffer.data(), buffer.size(), pipe)) {
	      output += buffer.data();
	    }
	  }
	  auto status    = pclose(pipe);
	  auto exit_code = WEXITSTATUS(status);
	  return exit_code;
	}${0}

snippet fps_loop
	#include <algorithm>
	#include <chrono>
	#include <thread>

	double fps               = ${1:#:fps};
	int64_t sleep_interval_us = static_cast<int64_t>(1000.0 * 1000.0 / fps);

	int64_t pre_unix_timestamp_us = -1;
	for (int i = 0; i < ${2:#:max loop number}; i++) {
	  int64_t unix_timestamp_us = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
	  if (pre_unix_timestamp_us >= 0) {
	    int64_t sleep_us = sleep_interval_us - (unix_timestamp_us - pre_unix_timestamp_us);
	    if (sleep_us > 0) {
	      std::this_thread::sleep_for(std::chrono::microseconds(sleep_us));
	      unix_timestamp_us += sleep_us;
	    }
	  }
	  pre_unix_timestamp_us = unix_timestamp_us;
	  ${0}
	}

snippet time_duration_conv
abbr from double(us)
	std::chrono::duration<double, std::micro>(${0})

snippet unix_timestamp_us
	std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count()${0}

snippet log_tmp
	#include <fstream>
	{
	  std::ofstream("${1:/tmp/tmp.log}", std::ios_base::app) << "${0}" << std::endl;
	}
# FYI: [c\+\+ \- Current date and time as string \- Stack Overflow]( https://stackoverflow.com/questions/16357999/current-date-and-time-as-string )
# NOTE: maybe âlocaltime_râ is not a member of âstdâ occured
snippet log_tmp_with_time_c++11
	#include <fstream>
	#include <ctime>
	#include <iomanip>
	{
	  auto t  = std::time(nullptr);
	  struct tm timeinfo;
	  localtime_r(&t, &timeinfo);
	  std::ofstream("${1:/tmp/tmp.log}", std::ios_base::app) << std::put_time(&timeinfo, "%Y/%m/%d %H:%M:%S ") << "${0}" << std::endl;
	}
snippet log_tmp_with_time
	#include <ctime>
	{
	  time_t rawtime;
	  struct tm timeinfo;
	  char buffer[32];
	  time(&rawtime);
	  localtime_r(&rawtime, &timeinfo);
	  strftime(buffer, sizeof(buffer), "%Y/%m/%d %H:%M:%S ", &timeinfo);
	  std::ofstream("${1:/tmp/tmp.log}", std::ios_base::app) << std::string(buffer) << "${0}" << std::endl;
	}

# FYI: [c\+\+ \- Current date and time as string \- Stack Overflow]( https://stackoverflow.com/questions/16357999/current-date-and-time-as-string )
snippet now_time_string
	#include <ctime>
	#include <iomanip>
	#include <sstream>
	auto t = std::time(nullptr);
	struct tm timeinfo;
	std::localtime_r(&t, &timeinfo);
	std::ostringstream oss;
	oss << std::put_time(&timeinfo,"%Y/%m/%d %H:%M:%S");
	auto str = oss.str();${0}

# FYI : [C\+\+ version for mkdir \- p](http:  //mylinuxtechcorner.blogspot.com/2012/09/c-version-for-mkdir-p.html )
snippet mkdir_all
	#include <dirent.h>
	#include <sys/stat.h>
	#include <algorithm>
	bool MkdirAll(const std::string& full_filepath, const mode_t mode) {
	  std::string path(full_filepath);
	  struct stat st;
	  for (std::string::iterator iter = path.begin(); iter != path.end();) {
	    std::string::iterator next_iter = std::find(iter, path.end(), '/');
	    std::string target_path         = std::string(path.begin(), next_iter);
	    iter                            = next_iter;
	    if (iter != path.end()) {
	      iter++;
	    }

	    if (stat(target_path.c_str(), &st) == 0) {
	      if (!S_ISDIR(st.st_mode)) {
	        errno = ENOTDIR;
	        // NOTE: not a dir
	        return false;
	      } else {
	        // NOTE: already exists
	        continue;
	      }
	    }
	    if (mkdir(target_path.c_str(), mode) != 0 && errno != EEXIST) {
	      // NOTE: cannot create dir
	      return false;
	    }
	    // NOTE: create success
	  }
	  return true;
	}${0}

snippet file_to_string
	std::string filepath = ${0};
	std::ifstream ifs(filepath, std::ios::in);
	if (ifs.fail()) {
	  std::cerr << "failed to read " << filepath << std::endl;
	  return 1;
	}
	std::string str((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());
	ifs.close();
	if (ifs.fail()) {
	  std::cerr << "failed to close " << filepath << std::endl;
	  return 1;
	}
# FYI: [c\+\+ \- How to read a binary file into a vector of unsigned chars \- Stack Overflow]( https://stackoverflow.com/questions/15138353/how-to-read-a-binary-file-into-a-vector-of-unsigned-chars )
snippet file_to_vector
	#include <fstream>
	#include <iostream>
	#include <iterator>
	#include <vector>
	${0}
	template <class T>
	std::vector<T> FileToVector(const std::string filepath) {
	  std::ifstream file(filepath, std::ios::binary);
		// WARN: error handling
	  file.unsetf(std::ios::skipws);
	  std::streampos file_size;
	  file.seekg(0, std::ios::end);
	  file_size = file.tellg();
	  file.seekg(0, std::ios::beg);
	  std::vector<T> vec;
	  vec.reserve(file_size);
	  vec.insert(vec.begin(), std::istream_iterator<T>(file),
	             std::istream_iterator<T>());
	  return vec;
	}

snippet picojson_from_str
	picojson::value json;
	std::string err = picojson::parse(v, ${0});
	if (err.empty() == false) {
	  std::cerr << err << std::endl;
	  return 1;
	}
	std::cout << json << std::endl;

snippet picojson_from_file
	#include "picojson.h"
	#include <fstream>
	#include <iostream>
	#include <iterator>
	#include <sstream>
	#include <string>
	std::string filepath = ${0};
	std::ifstream ifs(filepath, std::ios::in);
	if (ifs.fail()) {
	  std::cerr << "failed to read " << filepath << std::endl;
	  return 1;
	}
	std::istream_iterator<char> input(ifs);
	picojson::value json;
	std::string err;
	input = picojson::parse(json, input, std::istream_iterator<char>(), &err);
	if (!err.empty()) {
	  std::cerr << err << std::endl;
	  return 1;
	}
	std::cout << json << std::endl;

snippet picojson_get_obj
	picojson::object& ${0:obj} = ${1}.get<picojson::object>();

snippet picojson_get
abbr double, int64_t, std::string, picojson::array
	${1:obj}[${2:#key}].get<${0:#:type}>()
snippet picojson_get_array
	picojson::array& ${0:#:var name} =${1:obj}[${2:#key}].get<picojson::array}>();

snippet picojson_to_str_example
	picojson::object obj;
	obj.emplace(std::make_pair("key", picojson::value("value")));
	obj.emplace(std::make_pair("key", picojson::value(static_cast<double>(123))));
	picojson::value val(obj);
	val.serialize();
	std::stringstream ss;
	ss << val.serialize();${0}

snippet picojson_to_file_example
	picojson::object obj;
	obj.emplace(std::make_pair("key", picojson::value("value")));
	obj.emplace(std::make_pair("key", picojson::value(static_cast<double>(123))));
	picojson::value v(obj);
	v.serialize(std::ostream_iterator<char>(std::cout));${0}

# FYI: [jarro2783/cxxopts: Lightweight C\+\+ command line option parser]( https://github.com/jarro2783/cxxopts )
snippet parsearg_cxxopts_example
alias arg_cxxopts_example
	#include "cxxopts.hpp"
	cxxopts::ParseResult Parse(int argc, char* argv[]) {
	  cxxopts::Options options(argv[0], " - help message");
	  options.positional_help("[optional args]").show_positional_help();
	  std::string output;
	  std::vector<std::string> args;
	  options.allow_unrecognised_options().add_options()            //
	      ("o,output", "output dir",                                //
	       cxxopts::value<std::string>(output)->default_value(""))  //
	      ("args", "[stream key [# of stream]...]...",              //
	       cxxopts::value<std::vector<std::string>>(args))          //
	      ("h,help", "Print help");
	  options.parse_positional({"args"});
	  auto result = options.parse(argc, argv);
	  if (result.count("help")) {
	    std::cerr << options.help({"", "Group"}) << std::endl;
	    exit(0);
	  }
	  output = result["output"].as<std::string>();
	  if (result.count("args")) {
	    args = result["args"].as<std::vector<std::string>>();
	  }
	  return result;
	}
	auto result = Parse(argc, argv);${0}

snippet regexp_test
	  std::regex re(${1:#:regex pattern});
	  bool ret = std::regex_match(${0:#:str}, re);
snippet regexp_match_group
	  std::regex re(${1:#:regex pattern});
	  std::smatch match;
	  bool ret = std::regex_match(${0:#:str}, match, re);

# FYI: [æ¬ã®è«: C\+\+0xã«ãããenable\_ifã®æ°ããä½¿ãæ¹]( https://cpplover.blogspot.com/2011/04/c0xenableif.html )
# [std::enable\_ifãä½¿ã£ã¦ãªã¼ãã¼ã­ã¼ãããæãenablerãä½¿ãï¼ \- Qiita]( https://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462 )
# [C\+\+ã¡ã¿é¢æ°ã®ã¾ã¨ã \- Qiita]( https://qiita.com/_EnumHack/items/ee2141ad47915c55d9cb )
# [C\+\+ ã§æ¥½ããã¡ã¿ãã­ã°ã©ãã³ã°ãããã \- Qiita]( https://qiita.com/pink_bangbi/items/929916d77054988f626e )
# [åãããtemplate classåã§ããããã§ãã¯ããã¡ã¿é¢æ° \- Qiita]( https://qiita.com/tyanmahou/items/a0d67e221b8971e895c6 )
snippet template_is_same
	template <typename T, typename std::enable_if<std::is_same<T, ${1:#:type}>::value, std::nullptr_t>::type = nullptr>
	void foo(T t) {
	  std::cout << "$1" << std::endl;
	}
	template <typename T, typename std::enable_if<!std::is_same<T, $1>::value, std::nullptr_t>::type = nullptr>
	void foo(T t) {
	  std::cout << "not $1" << std::endl;
	}${0}

# FYI: [ã¹ã³ã¼ããæã¤åæå \- cpprefjp C\+\+æ¥æ¬èªãªãã¡ã¬ã³ã¹]( https://cpprefjp.github.io/lang/cpp11/scoped_enum.html )
# FYI: [Google C\+\+ Style Guide]( https://google.github.io/styleguide/cppguide.html#Enumerator_Names )
# kEnumName or ENUM_NAME
snippet enum_decl
	enum class ${1:#:enum class name} : ${2:int} {
	  ${3:#:kEnumName} = 0,
	  ${4:#:ENUM_NAME},
	};
	static_cast<$2>($1::$3)${0}

snippet enum_cast
	static_cast<${1:#:type}>(${2:#:enum class name}::${0:#:type})

snippet env_is_set
	std::getenv(${0}) != nullptr
snippet env_get
	const char* env_char = std::getenv(${0});
	std::string env = std::string(env_char != nullptr ? env_char : "${1:#:default value}");

snippet gcd
alias cp_gcd
	int GCD(int a, int b) {
	  if (b == 0) {
	    return a;
	  }
	  return GCD(b, a % b);
	}${0}

snippet filesize
	#include <fstream>
	/**
	 * @brief return file size (unit is Byte)
	 *
	 * @param filename
	 *
	 * @return file size (unit is Byte), or -1 (no such file)
	 */
	std::ifstream::pos_type GetFileSize(const std::string filename) {
	  // NOTE: ate: at-end
	  std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);
	  return in.tellg();
	}${0}

snippet nullpo
abbr undefined behavior(but maybe SIGSEGV)
	*(volatile int *)(nullptr);${0}

snippet trap
	__builtin_trap();${0}

snippet var_debug_definition
	#define VAR_DEBUG(x) std::cout << "[VAR_DEBUG]:" #x << "=" << x << std::endl;${0}

snippet devnull_out
alias dummy_out
	std::ofstream("/dev/null") << ${0};

snippet comment_header
alias comment_mark
	// ---- ---- ---- ----
	// ---- ---- ---- ----
	// ${0}
	// ---- ---- ---- ----
	// ---- ---- ---- ----

snippet size_file
alias get_size_file
abbr ifstream
	${1}.seekg(0, $1.end);
	size_t size${0} = $1.tellg();
	$1.clear();
	$1.seekg(0, std::ios::beg);

snippet iomanip_right
alias printf_right
	std::setw(${1}) << std::right${0}

snippet iomanip_left
alias printf_left
	std::setw(${1}) << std::left${0}

snippet iomanip_fill
alias printf_fill
	std::setfill('${1:0}')${0}

snippet iomanip_precision
alias printf_precision
abbr e.g. std::cout << HERE #include <iomanip>
	std::fixed << std::setprecision(${1}) << ${0}

snippet iomanip_max_precision
alias printf_max_precision
abbr e.g. std::cout << HERE #include <iomanip>, <limits>
	std::fixed << std::setprecision(std::numeric_limits<${1:float}>::max_digits10 + 1) << ${0}

snippet namespace_internal
	namespace internal {
	  ${0}
	}

snippet namespace_detail
abbr boost style
	namespace detail {
	  ${0}
	}

snippet gmock_ElementsAre
abbr actual, matcher
	EXPECT_THAT(${0}, testing::ElementsAre(${1:#:0,1,2,3}));

snippet char_to_string
	std::string(1, ${0});

snippet chars_to_string
	std::string(${1:#:char pointer}, ${0:#:len});

snippet gettid
	#include <unistd.h>
	#include <sys/types.h>
	#include <sys/syscall.h>
	
	pid_t gettid(void) {
	  return syscall(SYS_gettid);
	}${0}
