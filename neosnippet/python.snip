# vim: set noexpandtab ts=4 sw=4 :

snippet     funcname
	`cfi#get_func_name()`

snippet find_first
	def find_first(list, predicate):
		return next((e for e in list if predicate(e)), None)

snippet open_file
alias with_open_file
	with open(${1:#input_file_name}, 'r', encoding='utf-8') as ${2:tmp_file}:
		${3:$input_file_content} = $2.read()
	${0}

snippet class
	class ${1:#class name}:
		def __init__(self, ${0}):

snippet input
abbr input speed up tech
	input = sys.stdin.readline

snippet for_range
	for ${2:i} in range(${1:# 0 ~ n-1}):
		${0}

snippet init_list
	[None] * ${1:#N}
snippet init_list2
	[[None] * ${2:#N2} for _ in range(${1:#N1})]

snippet write_file
	def write_file(file_name, text):
		with open(file_name, 'w') as f:
			f.write(text)
			f.truncate()

snippet argparse
alias cmdparse
	import argparse

	parser = argparse.ArgumentParser()
	parser.add_argument('-string-option', default='')
	parser.add_argument('-bool-flag', default=True, type=bool)
	parser.add_argument('required-arg')

	args, extra_args = parser.parse_known_args()
	# args.option_xxx
	# args.required_arg

snippet self
	self.

snippet from
	from ${1:# specificated name} import ${0:# package name}

snippet mean_def_np
	def mean(self):
		mean = np.mean(self.vec, axis=0)
		return mean

snippet mean_np
	${0:#output} = np.mean(${1:#input}, axis=0)

snippet exit
	sys.exit(${0})

snippet abspath
abbr abspath of script path # required: import pathlib
	script_abspath = pathlib.Path(__file__).resolve().parent

snippet pathjoin
	os.path.join(${1:#path}, ${0:#path})

snippet urlencode
	urllib.parse.urlencode(${0:#str})

snippet decode_uft_8
	decode("utf-8")

snippet getenv
	os.getenv(${1:#key}, ${0:#default value})

snippet list_expand
alias tiple_expand
	*${0:#list name}

snippet dict_expand
	**${0:#dict name}

snippet urllib3_proxy_support
abbr urllib3 doesn't use http_proxy env
	option = {'': ''}
	http_proxy = os.getenv("http_proxy")
	http = urllib3.ProxyManager(http_proxy, **option) if http_proxy else urllib3.PoolManager(**option)

# NOTE: order: printf < print_with_end < printf_
snippet printf_
	print("${1:#message}".format(${0}))
snippet printf_with_end
	print("${1:#message}".format(${2}), end="${0}")

snippet print_with_end
	print("${1:#message}", end="${0}")

snippet argv
	sys.argv

snippet pprint
	pprint.pprint
snippet pformat
	pprint.pformat

