snippet     funcname
    `cfi#get_func_name()`

snippet readline
    ${0} | awk 1 | while read LINE; do
      ${1:echo "LINE: $LINE"}
    done

snippet ismac
    if [[ $(uname) == "Darwin" ]]; then
        ${0}
    fi

snippet isubuntu
    if [[ $(uname -a) =~ "Ubuntu" ]]; then
        ${0}
    fi

snippet iswindows
    if [[ "$OS" =~ "Windows" ]]; then
        ${0}
    fi

snippet trimspace
  sed "s/^[ \t]*//"

snippet devnull
  >/dev/null 2>&1

snippet stderr
  1>&2

snippet default_var
alias defvar
  ${1:dst var name}=\${${2:src var name}:-"${3:default value}"}

snippet alias_enable
abbr to enable alias at bash
    shopt -s expand_aliases

snippet for_array
alias forarray
  for ${2:# element name} in "${${1:#array name}[@]}"; do
    echo $$2
    ${0}
  done

snippet for_ls
alias forls
  for ${2:# element name} in \`ls ${1:# ls target}\`; do
    echo $$2
    ${0}
  done

snippet arg_check
alias argcheck
  [[ $# -le ${1:# no of args} ]] && echo "\$0 ${0:# description}" && exit 1

snippet alias
  alias ${1}='${0}'

snippet echoerr
    echo 1>&2 ${0}

snippet array
    "${${0:#array name}[@]}"

snippet array_len
    ${#${0:#array name}[@]}

snippet array_assign
    ${2:#dst array name}a=("${${0:#src array name}[@]}")

snippet append_array
alias array_append
    ${2:#dst array}=("${${1:#src array}[@]}" ${0})

snippet append_array_self
alias array_append_self
    ${1:#dst array}+=(${0})

snippet tmpfile
abbr don't use in .xxxrc or .xxx_profile
  tmpfile=$(mktemp "/tmp/$(basename \$0).$$.tmp.XXXXX")
  trap "[[ -e $tmpfile ]] && rm -f $tmpfile" 0 1 2 3 15

snippet tac
    awk '{a[i++]=\$0} END{for(j=i-1; j>=0;) print a[j--]}'

snippet uniq
    awk '!a[\$0]++'

snippet wcc
    awk '{n+=length(\$0)} END{print n}'

snippet wcw
    awk '{n+=NF} END{print n}'

snippet wcl
    awk 'END{print NR}'

snippet     getopts
abbr        getopts
options     head
  while getopts ":a:" opt "$@"; do
    case "$opt" in
      \?)
        echo "Invalid option -$OPTARG was ignored." >&2;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1;;
    esac
  done

snippet lineno
  $LINENO

snippet try_catch
  function try_catch() {
      {
          eval "$@"
      } ||
      {
          echo "${0:An error occurred}"
          return -1
      }
  }

snippet date-for-file
  date +"%Y-%m-%d_%k-%M-%S"

snippet sum
  awk '{for(i=1;i<=NF;i++)sum+=$i;} END{print sum}'
