snippet     funcname
    `cfi#get_func_name()`

snippet readline
    ${0} | awk 1 | while read LINE; do
      ${1:echo "LINE: $LINE"}
    done

snippet ismac
  [[ $(uname) == "Darwin" ]]
snippet islinux
  [[ $(uname) == "Linux" ]]
snippet isubuntu
  [[ $(uname -a) =~ "Ubuntu" ]]
snippet iswindows
  [[ "$OS" =~ "Windows" ]]
snippet isdocker
  [[ -f /.dockerenv ]]
snippet ismac_if
    if [[ $(uname) == "Darwin" ]]; then
        ${0}
    fi
snippet islinux_if
    if [[ $(uname) == "Linux" ]]; then
        ${0}
    fi
snippet isubuntu_if
    if [[ $(uname -a) =~ "Ubuntu" ]]; then
        ${0}
    fi
snippet iswindows_if
    if [[ "$OS" =~ "Windows" ]]; then
        ${0}
    fi
snippet isdocker
  if [[ -f /.dockerenv ]]; then
    ${0}
  fi

snippet isbash_if
  if [[ -n $BASH ]]; then
    ${0}
  fi
snippet isbash
  [[ -n $BASH ]] && ${0}
snippet iszsh_if
  if [[ $ZSH_NAME == zsh ]]; then
    ${0}
  fi
snippet iszsh
  [[ $ZSH_NAME == zsh ]] ${0}

snippet ispipe
  [[ -p /dev/stdout ]] ${0}

snippet trimspace
  sed "s/^[ \t]*//"

snippet devnull
  >/dev/null 2>&1
snippet stderr
  1>&2

snippet default_var
alias defvar
  ${1:dst var name}=\${${2:src var name}:-"${3:default value}"}

snippet alias_enable
abbr to enable alias at bash
    shopt -s expand_aliases

snippet for_array
alias forarray
  for ${2:# element name} in "${${1:#array name}[@]}"; do
    echo $$2
    ${0}
  done

snippet for_ls
alias forls
  for ${2:# element name} in \`ls ${1:# ls target}\`; do
    echo $$2
    ${0}
  done

snippet for_pwd
  dirpath=$PWD && while true; do
    echo $dirpath
    [[ "$dirpath" == "/" ]] && break || dirpath="$(dirname $dirpath)"
  done

snippet arg_check
alias argcheck
  [[ $# -le ${1:# no of args} ]] && echo "\$0 ${0:# description}" && exit 1

snippet alias
  alias ${1}='${0}'

snippet echoerr
    echo 1>&2 ${0}

snippet array
    "${${0:#array name}[@]}"

snippet array_len
    ${#${0:#array name}[@]}

snippet array_assign
    ${2:#dst array name}a=("${${0:#src array name}[@]}")

snippet append_array
alias array_append
    ${2:#dst array}=("${${1:#src array}[@]}" ${0})

snippet append_array_self
alias array_append_self
    ${1:#dst array}+=(${0})

snippet search_array
alias array_search
  $(echo ${${1:#array name}[@]} | grep -E -q "(^| )${0:#keyword}( |$)")

snippet search_array_not_found
alias array_search_not_found
  ! $(echo ${${1:#array name}[@]} | grep -E -q "(^| )${0:#keyword}( |$)")

snippet tmpfile
  tmpfile=$(mktemp "/tmp/$(basename \$0).$$.tmp.XXXXX")

snippet tmpfile_with_trap
abbr don't use trap in .xxxrc or .xxx_profile
  tmpfile=$(mktemp "/tmp/$(basename \$0).$$.tmp.XXXXX")
  trap "[[ -e $tmpfile ]] && rm -f $tmpfile" 0 1 2 3 15

snippet tmpfile_in_function
  local tmpfile=$(mktemp "/tmp/$(basename $0).$$.tmp.XXXXX")
  ${0}
  [[ -e "$tmpfile" ]] && rm -f "$tmpfile"

snippet tac
    awk '{a[i++]=\$0} END{for(j=i-1; j>=0;) print a[j--]}'

snippet uniq
    awk '!a[\$0]++'

snippet wcc
    awk '{n+=length(\$0)} END{print n}'

snippet wcw
    awk '{n+=NF} END{print n}'

snippet wcl
    awk 'END{print NR}'

snippet     getopts
abbr        getopts
options     head
  while getopts ":a:" opt "$@"; do
    case "$opt" in
      \?)
        echo "Invalid option -$OPTARG was ignored." >&2;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1;;
    esac
  done

snippet lineno
  $LINENO

snippet try_catch
  function try_catch() {
      {
          eval "$@"
      } ||
      {
          echo "${0:An error occurred}"
          return -1
      }
  }

snippet date-for-file
  date +"%Y-%m-%d_%k-%M-%S"

snippet sum
  awk '{for(i=1;i<=NF;i++)sum+=$i;} END{print sum}'

# [Bash Templating: How to build configuration files from templates with Bash? \- Stack Overflow]( https://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash )
snippet template
abbr you can use bash var in a template file
  eval "cat <<EOF
  $(<${1:#template file path})
  EOF
  " > ${0:#output file path}

snippet lambda
abbr pseudo lambda function which is formattable by shfmt
  function lambda() {
    ${0}
  } && lambda

snippet slice
abbr ${@:0} == $@
  ${${1:#array name}:${0:#1,2,3,...}}

snippet debug
alias log_run
  function debug() { echo -e "\033[0;35m[log]\033[0m \033[0;33m$@\033[0m" && "$@"; }

snippet switch_case_example
  case $TERM in
    linux) LANG=C ;;
    *)     LANG=ja_JP.UTF-8;;
  esac

snippet second_to_humanreadable_time
  $(printf "%02d : %02d" $((${1:#second}/60)) $(($1 % 60)))${0}

snippet substr_function
  function substr(){ echo -n ${1:$2:${3:-${#1}}}; } #substr( str, pos[, len] )

snippet hr
alias line_char
  function hr() { printf '%*s\n' "${2:-$(tput cols)}" '' | tr ' ' "${1:--}"; }

snippet snake
  function snake(){ sed -r 's/([A-Z])/_\L\1\E/g'; }
snippet camel
  function camel(){ sed -r 's/_(.)/\U\1\E/g'; }
snippet lower
  function lower(){ tr '[:upper:]' '[:lower:]'; }
snippet upper
  function upper(){ tr '[:lower:]' '[:upper:]'; }

snippet pid
  $$

snippet heredoc_cat
  cat << EOF
  ${0}
  EOF

snippet heredoc_cat_no_expand_var
  cat << 'EOF'
  ${0}
  EOF

snippet heredoc_var
  ${1:#var name}=\`cat << EOF
  ${0}
  EOF\`

snippet heredoc_var_no_expand_var
  ${1:#var name}=\`cat << 'EOF'
  ${0}
  EOF\`

snippet heredoc_file
  cat << EOF > ${1:#file path}
  ${0}
  EOF

snippet heredoc_file_no_expand_var
  cat << 'EOF' > ${1:#file path}
  ${0}
  EOF

snippet lock_script
abbr avoid multiple starts
  exec 9< \$0
  perl -mFcntl=:flock -e "open(LOCK,'<&=9');exit(!flock(LOCK,LOCK_EX|LOCK_NB))" || {
      echo "\$0 is already running. (duplicate process)" >&2
      exit 1
  }

snippet ok
alias check
  echo -e "${GREEN}✔${DEFAULT}" "$@"

snippet ng
alias failure
  echo -e "${RED}✘${DEFAULT}" "$@"

snippet help_0
  [[ $# == 0 ]] && echo "\$0 <${0}>" && return 1

snippet docker_build_with_proxy_settings
  tag="${1:#image name}:latest"

  httpproxy=$HTTP_PROXY
  ftpproxy=$FTP_PROXY
  httpsproxy=$HTTPS_PROXY

  docker build \
    -t $tag \
    --build-arg HTTP_PROXY=$httpproxy \
    --build-arg http_proxy=$httpproxy \
    --build-arg FTP_PROXY=$ftpproxy \
    --build-arg ftp_proxy=$ftpproxy \
    --build-arg HTTPS_PROXY=$httpsproxy \
    --build-arg https_proxy=$httpsproxy "$@" .
snippet docker_build_user_flags
  --build-arg user="$USER" --build-arg uid="$UID" --build-arg gid="$GID"
snippet docker_build_proxy_flags
  --build-arg HTTP_PROXY="$HTTP_PROXY" --build-arg HTTPS_PROXY="$HTTPS_PROXY" --build-arg FTP_PROXY="$FTP_PROXY"

snippet docker_run_snippets
  tag="${1:#image name}"

  val=$(stty size)
  rows=$(echo $val | cut -d ' ' -f 1)
  cols=$(echo $val | cut -d ' ' -f 2)

  proxyurl="$HTTP_PROXY"
  docker run -e http_proxy=${proxyurl} -e https_proxy=${proxyurl} -i -t $tag /bin/bash -c "stty rows $rows cols $cols; exec /bin/bash -l"
snippet docker_run_flags_with_terminal_size_settings
  val=$(stty size)
  rows=$(echo $val | cut -d ' ' -f 1)
  cols=$(echo $val | cut -d ' ' -f 2)
  /bin/bash -c "stty rows $rows cols $cols; exec /bin/bash -l"
  #or
  -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM
snippet docker_run_flags_with_proxy_settings
  proxyurl="$HTTP_PROXY"
  -e http_proxy=${proxyurl} -e https_proxy=${proxyurl}
snippet docker_run_flags_with_x_window_system
  --privileged -e DISPLAY=$DISPLAY -v /tmp/.X11-unix/:/tmp/.X11-unix
snippet docker_run_flags_with_workdir
  --privileged -v $PWD/docker-ws:/home/${1:#user}/ws --workdir /home/$1/ws
snippet docker_run_it_bash
  docker run -it $tag /bin/bash

snippet function_list_bash
  compgen -A function
snippet function_list_zsh
  print -l ${(ok)functions}
