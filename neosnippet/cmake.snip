# [vim\-snippets\-neosnippet/cmake\.snip at master · gisphm/vim\-snippets\-neosnippet]( https://github.com/gisphm/vim-snippets-neosnippet/blob/master/neosnippets/cmake.snip )
snippet init
	cmake_minimum_required(VERSION ${1:3.5.1})
	project(${2:#:ProjectName})


	# add_subdirectory()

	set(${PROJECT_NAME}_SRCS xxx.cpp)

	set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
	add_definitions(-DXXX)
	add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SRCS})

	# list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
	find_package(${3:#:library} REQUIRED)
	include_directories(${$3_INCLUDE_DIRS})
	target_link_libraries(${PROJECT_NAME} ${$3_LIBRARIES})

	install(TARGETS ${PROJECT_NAME} DESTINATION bin)
	${0}

snippet proj
	project(${0:Name})

# ubuntu 16.04 default cmake: 3.5.1
snippet min
	cmake_minimum_required(VERSION ${0:3.5.1})

snippet include
abbr NOTE: 1st arg is not target
	include_directories(${${0:#:include_dir}})

snippet find
	find_package(${1:#:library} ${0: REQUIRED})
	include_directories(${$1_INCLUDE_DIRS})
	target_link_libraries(${2:#:project target} ${$1_LIBS})

snippet glob
	file(glob ${1:#:srcs} *.${0:cpp})

snippet subdir
	add_subdirectory(${0:#:src})

snippet lib
	add_library(${1:#:lib} ${${0:#:srcs}})

snippet link
	target_link_libraries(${1:#:bin} ${0:#:somelib})

snippet bin
	add_executable(${1:#:bin})${0}

snippet set
	set(${1:#:var} ${0:#:val})

snippet dep
	add_dependencies(${1:#:target}
			${0:#:dep}
	)

snippet c_flags
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${0}")

snippet cpp_flags
alias cxx_flags
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${0}")

snippet ExternalProject_Add_url
	include(ExternalProject)
	ExternalProject_Add(${1:#:googletest}
	  URL ${2:#:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
	  URL_HASH SHA1=${3:#:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
	  SOURCE_DIR "${CMAKE_BINARY_DIR}/${4:#:gtest-src}"
	  BINARY_DIR "${CMAKE_BINARY_DIR}/${0:#:gtest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)
	add_dependencies(${PROJECT_NAME} $1)

snippet ExternalProject_Add_googletest
abbr with googlemock
	include(ExternalProject)
	ExternalProject_Add(googletest
	  DOWNLOAD_COMMAND ""
	  SOURCE_DIR       "${CMAKE_CURRENT_SOURCE_DIR}/googletest"
	  BINARY_DIR       "${CMAKE_CURRENT_BINARY_DIR}/googletest"
	  INSTALL_COMMAND  cp -R ${CMAKE_CURRENT_BINARY_DIR}/googletest/lib/ ${CMAKE_INSTALL_PREFIX}/ &&
	                   cp -R ${CMAKE_CURRENT_SOURCE_DIR}/googletest/googletest/include/ ${CMAKE_INSTALL_PREFIX}/ &&
	                   cp -R ${CMAKE_CURRENT_SOURCE_DIR}/googletest/googlemock/include/ ${CMAKE_INSTALL_PREFIX}/
	  TEST_COMMAND     ""
	)${0}
	add_dependencies(${PROJECT_NAME} googletest)

snippet ExternalProject_Add_header_only_library
	include(ExternalProject)
	ExternalProject_Add(${1:#:project name}
	  GIT_REPOSITORY    ${2:#:url}
	  GIT_TAG           master
	  SOURCE_DIR        "${CMAKE_CURRENT_BINARY_DIR}/$1-build"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	  BUILD_IN_SOURCE TRUE
	)
	set($1_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/$1-build/${3:include})
	target_include_directories(${PROJECT_NAME} PRIVATE
	  ${$1_INCLUDE_DIR}
	)${0}
	add_dependencies(${PROJECT_NAME} $1)

snippet ExternalProject_Add_cxxopts
abbr for arg parse
	include(ExternalProject)
	ExternalProject_Add(cxxopts
	  GIT_REPOSITORY    https://github.com/jarro2783/cxxopts.git
	  GIT_TAG           master
	  SOURCE_DIR        "${CMAKE_CURRENT_BINARY_DIR}/cxxopts-build"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	  BUILD_IN_SOURCE TRUE
	)
	set(cxxopts_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/cxxopts-build/include)
	target_include_directories(${PROJECT_NAME} PRIVATE
	  ${cxxopts_INCLUDE_DIR}
	)${0}
	add_dependencies(${PROJECT_NAME} cxxopts)

snippet ExternalProject_Add_git
	include(ExternalProject)
	ExternalProject_Add(${1:#:googletest}
	  GIT_REPOSITORY    ${2:#:https://github.com/google/googletest.git}
	  GIT_TAG           ${3:master}
	  SOURCE_DIR        "${CMAKE_BINARY_DIR}/${4:#:googletest-src}"
	  BINARY_DIR        "${CMAKE_BINARY_DIR}/${0:#:googletest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)
	add_dependencies(${PROJECT_NAME} $1)

snippet ExternalProject_Add_patch
	# project()
	include(ExternalProject)
	ExternalProject_Add(${1:#:project name}
	  PREFIX $1
	  GIT_REPOSITORY ${2:#:URL}
	  GIT_TAG master
	  PATCH_COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -maxdepth 1 -name "*.patch" -print0 | xargs --no-run-if-empty -0 -L 1 patch -p1 --input
	  CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/lib"
	  INSTALL_COMMAND ""
	)${0}
	add_dependencies(${PROJECT_NAME} $1)

snippet ExternalProject_Add_make
	BUILD_IN_SOURCE TRUE
	BUILD_COMMAND bash -c "${1:#:cd XXX && make release}"${0}

snippet props
	set_target_properties(${1:#:target}
	  ${2:#:properties} ${3:#:compile_flags}
	  ${0:"-O3 -Wall -pedantic"}
	)

snippet test
	add_test(${1:#:TestName} ${0:#:testCommand --options})

snippet dump_var
	message(STATUS "*** dump start cmake variables ***")
	get_cmake_property(_variableNames VARIABLES)
	set(var_dump_filepath "${CMAKE_CURRENT_BINARY_DIR}/var_dump.log")
	file(WRITE "${var_dump_filepath}") # truncate
	foreach(_variableName ${_variableNames})
	  message(STATUS "${_variableName}=${${_variableName}}")
	  file(APPEND "${var_dump_filepath}" "${_variableName}=${${_variableName}}\n")
	endforeach()
	message(STATUS "*** dump end ***")
	${0}

snippet message
alias echo
	message(${0})

snippet messages_list
alias echo_list echo_var
	message("\${${0:#: list var name}}")
snippet echo_var_with_name
	message("${0:#: list var name}:\${$0}")

snippet foreach_list
abbr don't use ${} as var name here
options head
	foreach(${1:item} IN LISTS ${2:#:items})
	  ${0}
	endforeach()

snippet list_append_all
	foreach(${1:item} IN LISTS ${2:#:items})
	  list(APPEND ${3:#:new_item} "${4:#:prefix}\${$1}${0:#:suffix}")
	endforeach()

snippet list_length
	list(LENGTH ${1:#:list} ${2:#:out-var})${0}
snippet list_get
	list(GET ${1:#:list} ${2:#:element index} ${3:#:[index...]} ${4:#:out-var})${0}
snippet list_join
	list(JOIN ${1:#:list} ${2:#:glue} ${3:#:out-var})${0}
snippet list_sublist
	list(SUBLIST ${1:#:list} ${2:#:begin} ${3:#:length} ${4:#:out-var})${0}
snippet list_find
	list(FIND ${1:#:list} ${2:#:value} ${3:#:out-var})${0}
snippet list_append
	list(APPEND ${1:#:list} [${2:#:element...]})${0}
snippet list_filter
	list(FILTER ${1:#:list} ${2:#:INCLUDE or EXCLUDE} REGEX ${3:#:regex})${0}
snippet list_insert
	list(INSERT ${1:#:list} ${2:#:index} ${3:#:[element...]})${0}
snippet list_remove_ietm
	list(REMOVE_ITEM ${1:#:list} ${2:#:value...})${0}
snippet list_at
	list(REMOVE_AT ${1:#:list} ${2:#:index...})${0}
snippet list_duplicates
	list(REMOVE_DUPLICATES ${1:#:list})${0}
snippet list_transform
	list(TRANSFORM ${1:#:list} ${2:#:ACTION} ${3:#:[...]})${0}
snippet list_reverse
	list(REVERSE ${1:#:list})${0}
snippet list_sort
	list(SORT ${2:#:list})${0}

snippet get_filename
abbr File name without directory
	get_filename_component(${1:#:var name} ${${0:#:path}} NAME)
snippet get_directory
abbr Directory without file name
	get_filename_component(${1:#:var name} ${${0:#:path}} DIRECTORY)
snippet get_ext
abbr File name longest extension (.b.c from d/a.b.c)
	get_filename_component(${1:#:var name} ${${0:#:path}} EXT)
snippet get_filename_without_ext
abbr File name without directory or longest extension
	get_filename_component(${1:#:var name} ${${0:#:path}} NAME_WE)
snippet get_absolute_path
abbr Full path to file
	get_filename_component(${1:#:var name} ${${0:#:path}} ABSOLUTE)
snippet get_realpath
abbr Full path to existing file with symlinks resolved
	get_filename_component(${1:#:var name} ${${0:#:path}} REALPATH)

snippet set_target_properties_sources
	set_target_properties(${1:#:target} PROPERTIES SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/${0})

snippet filepath_to_target
	string(REPLACE "/" "_" target ${${0:#:filepath}})

snippet version_if
	if(${CMAKE_VERSION} VERSION_LESS ${1:#:version e.g. 3.6})
		${0:option(CMAKE_CXX_CLANG_TIDY "clang-tidy command" OFF)}
	endif()

# FYI:
# [CMakeを使ってみた \(7\) find\_packageとpkg\_check\_modulesによるライブラリ探索 \- wagavulin's blog]( https://www.wagavulin.jp/entry/2017/02/20/082608 )
# [CMake: Of what use is find\_package\(\) if you need to specify CMAKE\_MODULE\_PATH anyway? \- Stack Overflow]( https://stackoverflow.com/questions/20746936/cmake-of-what-use-is-find-package-if-you-need-to-specify-cmake-module-path-an )
snippet hook_find_package
	list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")
	# find_package(${1:#:package name} REQUIRED)

	mkdir -p ./cmake
	cat > ./cmake/Find$1.cmake << 'EOF'
	find_package($1 REQUIRED NO_MODULE)

	set($1_LIBRARIES xxx;yyy;zzz)
	set($1_LIBS ${$1_LIBRARIES})
	set($1_LIB_COMPONENTS ${$1_LIBRARIES})
	EOF
	${0}

snippet mkdir
	file(MAKE_DIRECTORY ${0:#:dirpath})

snippet env_var
	$ENV{${0}}
snippet home
	$ENV{HOME}${0}

snippet global_var
	set(${1:#:var name} ${2:#:value} CACHE ${3:STRING} "${0:#:description}")

snippet PIC
alias fPIC
abbr -fPIC
	set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)${0}

snippet add_test
	add_test(
	  NAME ${1:#:test_name}
	  COMMAND ${0:\${CMAKE_CURRENT_SOURCE_DIR\}/test.sh}
	)

# FYI: [c \- linking a shared library with statics using CMake \- Stack Overflow]( https://stackoverflow.com/questions/19141383/linking-a-shared-library-with-statics-using-cmake )
snippet link_start_end_group
abbr Wrap the static libraries in to the shared library
	target_link_libraries(${PROJECT_NAME}
	  -Wl,--start-group
	  ${0}
	  -Wl,--end-group
	)

snippet is_root
	if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
	  ${0}
	endif()

snippet if_exists_file_or_dir
	if(EXISTS ${1})
	  ${0}
	endif()
snippet if_exists_not_file_or_dir
	if(NOT EXISTS ${1})
	  ${0}
	endif()

snippet add_subdirectory_parent
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../${0} ${CMAKE_CURRENT_BINARY_DIR}/$0)

snippet touch
	file(TOUCH ${0})

snippet return
	return()${0}

# FYI: [linux \- cmake : How to change file permissions when installing? \- Stack Overflow]( https://stackoverflow.com/questions/19399705/cmake-how-to-change-file-permissions-when-installing )
snippet install_with_permissions
	install(
	  FILES ${1}
	  # TODO: choose permissions!
	  # USE_SOURCE_PERMISSIONS
	  # PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
	  DESTINATION ${0:bin}
	)
