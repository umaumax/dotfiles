snippet funcname
	`cfi#get_func_name()`${0}

snippet remove_ext
	${1:#:filename} := strings.TrimSuffix($1, filepath.Ext($1))${0}

snippet remove_ext_func
	func removeExt(fname string) string {
			ext := filepath.Ext(fname)
			return fname[:len(fname)-len(ext)]
	}
	${0}

# FYI: [Go Slice Tricks \(Japanese\) Â· golang\.shop]( https://golang.shop/post/go-slice-tricks-ja/ )
snippet append_self
	${1} = append($1, ${0:#:var...})
snippet slice_copy
	${1} = append([]${2:#:type}(nil), ${0:#:var}...)
snippet slice_delete_at
	${1} = append(${1}[:${2:#:index}], $1[$2+1:]...)${0}
snippet slice_filtering_without_allocate_memory
	${2:#:dst} := ${1:#:src}[:0]
	for _, x := range $1 {
		if ${0:#:condition} {
			$1 = append($2, x)
		}
	}
snippet slice_reverse
	for i := len(${1})/2-1; i >= 0; i-- {
		j := len($1)-1-i
		$1[i], $1[j] = $1[j], $1[i]
	}
	${0}
snippet help_overwrite
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, \`${0}
		\`)
		flag.PrintDefaults()
	}

snippet readline
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		text := scanner.Text()
	}
	if err := scanner.Err(); err != nil {
		log.Printf("stdin read err:%s\n", err)
	}
	${0}

# FYI: [go \- How to strings\.Split on newline? \- Stack Overflow]( https://stackoverflow.com/questions/25080862/how-to-strings-split-on-newline )
snippet split_line
	strings.Split(strings.Replace(${0}, "\r\n", "\n", -1), "\n")

snippet file_ext_overwrite
	${1:#:src}[0:len($1)-len(filepath.Ext($1))] + ".${0:#:ext}"
